
testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aae4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000548  0800abf8  0800abf8  0000bbf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b140  0800b140  0000d1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b140  0800b140  0000c140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b148  0800b148  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b148  0800b148  0000c148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b14c  0800b14c  0000c14c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800b150  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e4  200001d4  0800b324  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005b8  0800b324  0000d5b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011f10  00000000  00000000  0000d1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029bf  00000000  00000000  0001f10d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b8  00000000  00000000  00021ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000def  00000000  00000000  00022c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019dc4  00000000  00000000  00023a77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015cce  00000000  00000000  0003d83b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093d87  00000000  00000000  00053509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e7290  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006010  00000000  00000000  000e72d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  000ed2e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800abdc 	.word	0x0800abdc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	0800abdc 	.word	0x0800abdc

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	@ 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fmul>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d06f      	beq.n	8000e90 <__aeabi_fmul+0xf8>
 8000db0:	441a      	add	r2, r3
 8000db2:	ea80 0c01 	eor.w	ip, r0, r1
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dbe:	d01e      	beq.n	8000dfe <__aeabi_fmul+0x66>
 8000dc0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000dc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dd4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dd8:	bf3e      	ittt	cc
 8000dda:	0049      	lslcc	r1, r1, #1
 8000ddc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de0:	005b      	lslcc	r3, r3, #1
 8000de2:	ea40 0001 	orr.w	r0, r0, r1
 8000de6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dea:	2afd      	cmp	r2, #253	@ 0xfd
 8000dec:	d81d      	bhi.n	8000e2a <__aeabi_fmul+0x92>
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000df2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df6:	bf08      	it	eq
 8000df8:	f020 0001 	biceq.w	r0, r0, #1
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	0249      	lsleq	r1, r1, #9
 8000e0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e12:	3a7f      	subs	r2, #127	@ 0x7f
 8000e14:	bfc2      	ittt	gt
 8000e16:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1e:	4770      	bxgt	lr
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	dc5d      	bgt.n	8000ee8 <__aeabi_fmul+0x150>
 8000e2c:	f112 0f19 	cmn.w	r2, #25
 8000e30:	bfdc      	itt	le
 8000e32:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e36:	4770      	bxle	lr
 8000e38:	f1c2 0200 	rsb	r2, r2, #0
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e42:	f1c2 0220 	rsb	r2, r2, #32
 8000e46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4e:	f140 0000 	adc.w	r0, r0, #0
 8000e52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e56:	bf08      	it	eq
 8000e58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5c:	4770      	bx	lr
 8000e5e:	f092 0f00 	teq	r2, #0
 8000e62:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0040      	lsleq	r0, r0, #1
 8000e6a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e6e:	3a01      	subeq	r2, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xce>
 8000e72:	ea40 000c 	orr.w	r0, r0, ip
 8000e76:	f093 0f00 	teq	r3, #0
 8000e7a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0049      	lsleq	r1, r1, #1
 8000e82:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e86:	3b01      	subeq	r3, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fmul+0xe6>
 8000e8a:	ea41 010c 	orr.w	r1, r1, ip
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fmul+0x18>
 8000e90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	bf18      	it	ne
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d00a      	beq.n	8000eb6 <__aeabi_fmul+0x11e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000eaa:	d1d8      	bne.n	8000e5e <__aeabi_fmul+0xc6>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f090 0f00 	teq	r0, #0
 8000eba:	bf17      	itett	ne
 8000ebc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000ec0:	4608      	moveq	r0, r1
 8000ec2:	f091 0f00 	teqne	r1, #0
 8000ec6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eca:	d014      	beq.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_fmul+0x13e>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d10f      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ed6:	ea93 0f0c 	teq	r3, ip
 8000eda:	d103      	bne.n	8000ee4 <__aeabi_fmul+0x14c>
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	bf18      	it	ne
 8000ee0:	4608      	movne	r0, r1
 8000ee2:	d108      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ef0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ef4:	4770      	bx	lr
 8000ef6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000efa:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000efe:	4770      	bx	lr

08000f00 <__aeabi_fdiv>:
 8000f00:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f08:	bf1e      	ittt	ne
 8000f0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0e:	ea92 0f0c 	teqne	r2, ip
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d069      	beq.n	8000fec <__aeabi_fdiv+0xec>
 8000f18:	eba2 0203 	sub.w	r2, r2, r3
 8000f1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f26:	d037      	beq.n	8000f98 <__aeabi_fdiv+0x98>
 8000f28:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f34:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf38      	it	cc
 8000f3c:	005b      	lslcc	r3, r3, #1
 8000f3e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f42:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf24      	itt	cs
 8000f4a:	1a5b      	subcs	r3, r3, r1
 8000f4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f62:	bf24      	itt	cs
 8000f64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	bf18      	it	ne
 8000f7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f82:	d1e0      	bne.n	8000f46 <__aeabi_fdiv+0x46>
 8000f84:	2afd      	cmp	r2, #253	@ 0xfd
 8000f86:	f63f af50 	bhi.w	8000e2a <__aeabi_fmul+0x92>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f90:	bf08      	it	eq
 8000f92:	f020 0001 	biceq.w	r0, r0, #1
 8000f96:	4770      	bx	lr
 8000f98:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa0:	327f      	adds	r2, #127	@ 0x7f
 8000fa2:	bfc2      	ittt	gt
 8000fa4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000fa8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fac:	4770      	bxgt	lr
 8000fae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	e737      	b.n	8000e2a <__aeabi_fmul+0x92>
 8000fba:	f092 0f00 	teq	r2, #0
 8000fbe:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0040      	lsleq	r0, r0, #1
 8000fc6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fca:	3a01      	subeq	r2, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xc2>
 8000fce:	ea40 000c 	orr.w	r0, r0, ip
 8000fd2:	f093 0f00 	teq	r3, #0
 8000fd6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fda:	bf02      	ittt	eq
 8000fdc:	0049      	lsleq	r1, r1, #1
 8000fde:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fe2:	3b01      	subeq	r3, #1
 8000fe4:	d0f9      	beq.n	8000fda <__aeabi_fdiv+0xda>
 8000fe6:	ea41 010c 	orr.w	r1, r1, ip
 8000fea:	e795      	b.n	8000f18 <__aeabi_fdiv+0x18>
 8000fec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff0:	ea92 0f0c 	teq	r2, ip
 8000ff4:	d108      	bne.n	8001008 <__aeabi_fdiv+0x108>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	f47f af7d 	bne.w	8000ef6 <__aeabi_fmul+0x15e>
 8000ffc:	ea93 0f0c 	teq	r3, ip
 8001000:	f47f af70 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 8001004:	4608      	mov	r0, r1
 8001006:	e776      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	d104      	bne.n	8001018 <__aeabi_fdiv+0x118>
 800100e:	024b      	lsls	r3, r1, #9
 8001010:	f43f af4c 	beq.w	8000eac <__aeabi_fmul+0x114>
 8001014:	4608      	mov	r0, r1
 8001016:	e76e      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001018:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800101c:	bf18      	it	ne
 800101e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8001022:	d1ca      	bne.n	8000fba <__aeabi_fdiv+0xba>
 8001024:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001028:	f47f af5c 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 800102c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8001030:	f47f af3c 	bne.w	8000eac <__aeabi_fmul+0x114>
 8001034:	e75f      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001036:	bf00      	nop

08001038 <__aeabi_d2lz>:
 8001038:	b538      	push	{r3, r4, r5, lr}
 800103a:	2200      	movs	r2, #0
 800103c:	2300      	movs	r3, #0
 800103e:	4604      	mov	r4, r0
 8001040:	460d      	mov	r5, r1
 8001042:	f7ff fcc5 	bl	80009d0 <__aeabi_dcmplt>
 8001046:	b928      	cbnz	r0, 8001054 <__aeabi_d2lz+0x1c>
 8001048:	4620      	mov	r0, r4
 800104a:	4629      	mov	r1, r5
 800104c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001050:	f000 b80a 	b.w	8001068 <__aeabi_d2ulz>
 8001054:	4620      	mov	r0, r4
 8001056:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 800105a:	f000 f805 	bl	8001068 <__aeabi_d2ulz>
 800105e:	4240      	negs	r0, r0
 8001060:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001064:	bd38      	pop	{r3, r4, r5, pc}
 8001066:	bf00      	nop

08001068 <__aeabi_d2ulz>:
 8001068:	b5d0      	push	{r4, r6, r7, lr}
 800106a:	2200      	movs	r2, #0
 800106c:	4b0b      	ldr	r3, [pc, #44]	@ (800109c <__aeabi_d2ulz+0x34>)
 800106e:	4606      	mov	r6, r0
 8001070:	460f      	mov	r7, r1
 8001072:	f7ff fa3b 	bl	80004ec <__aeabi_dmul>
 8001076:	f7ff fd11 	bl	8000a9c <__aeabi_d2uiz>
 800107a:	4604      	mov	r4, r0
 800107c:	f7ff f9bc 	bl	80003f8 <__aeabi_ui2d>
 8001080:	2200      	movs	r2, #0
 8001082:	4b07      	ldr	r3, [pc, #28]	@ (80010a0 <__aeabi_d2ulz+0x38>)
 8001084:	f7ff fa32 	bl	80004ec <__aeabi_dmul>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	4630      	mov	r0, r6
 800108e:	4639      	mov	r1, r7
 8001090:	f7ff f874 	bl	800017c <__aeabi_dsub>
 8001094:	f7ff fd02 	bl	8000a9c <__aeabi_d2uiz>
 8001098:	4621      	mov	r1, r4
 800109a:	bdd0      	pop	{r4, r6, r7, pc}
 800109c:	3df00000 	.word	0x3df00000
 80010a0:	41f00000 	.word	0x41f00000

080010a4 <DS3231_GetTime>:
    return HAL_I2C_Master_Transmit(hi2c, DS3231_ADDRESS, data, sizeof(data), HAL_MAX_DELAY);
}

// Hàm đọc thời gian từ DS3231
HAL_StatusTypeDef DS3231_GetTime(I2C_HandleTypeDef *hi2c, DS3231_TimeTypeDef *time)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af04      	add	r7, sp, #16
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
    uint8_t data[7];

    // Đọc 7 byte dữ liệu từ thanh ghi TIME
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hi2c, DS3231_ADDRESS, DS3231_REG_TIME, I2C_MEMADD_SIZE_8BIT, data, 7, HAL_MAX_DELAY);
 80010ae:	f04f 33ff 	mov.w	r3, #4294967295
 80010b2:	9302      	str	r3, [sp, #8]
 80010b4:	2307      	movs	r3, #7
 80010b6:	9301      	str	r3, [sp, #4]
 80010b8:	f107 0308 	add.w	r3, r7, #8
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	2301      	movs	r3, #1
 80010c0:	2200      	movs	r2, #0
 80010c2:	21d0      	movs	r1, #208	@ 0xd0
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f002 fd3b 	bl	8003b40 <HAL_I2C_Mem_Read>
 80010ca:	4603      	mov	r3, r0
 80010cc:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK)
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <DS3231_GetTime+0x34>
        return status;
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
 80010d6:	e060      	b.n	800119a <DS3231_GetTime+0xf6>

    // Chuyển đổi dữ liệu BCD thành giá trị thực tế
    time->sec = ((data[0] & 0xF0) >> 4) * 10 + (data[0] & 0x0F);
 80010d8:	7a3b      	ldrb	r3, [r7, #8]
 80010da:	091b      	lsrs	r3, r3, #4
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	461a      	mov	r2, r3
 80010e0:	0092      	lsls	r2, r2, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	7a3b      	ldrb	r3, [r7, #8]
 80010ea:	f003 030f 	and.w	r3, r3, #15
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	4413      	add	r3, r2
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	701a      	strb	r2, [r3, #0]
    time->min = ((data[1] & 0xF0) >> 4) * 10 + (data[1] & 0x0F);
 80010f8:	7a7b      	ldrb	r3, [r7, #9]
 80010fa:	091b      	lsrs	r3, r3, #4
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	461a      	mov	r2, r3
 8001100:	0092      	lsls	r2, r2, #2
 8001102:	4413      	add	r3, r2
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	b2da      	uxtb	r2, r3
 8001108:	7a7b      	ldrb	r3, [r7, #9]
 800110a:	f003 030f 	and.w	r3, r3, #15
 800110e:	b2db      	uxtb	r3, r3
 8001110:	4413      	add	r3, r2
 8001112:	b2da      	uxtb	r2, r3
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	705a      	strb	r2, [r3, #1]
    time->hour = ((data[2] & 0xF0) >> 4) * 10 + (data[2] & 0x0F);
 8001118:	7abb      	ldrb	r3, [r7, #10]
 800111a:	091b      	lsrs	r3, r3, #4
 800111c:	b2db      	uxtb	r3, r3
 800111e:	461a      	mov	r2, r3
 8001120:	0092      	lsls	r2, r2, #2
 8001122:	4413      	add	r3, r2
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	b2da      	uxtb	r2, r3
 8001128:	7abb      	ldrb	r3, [r7, #10]
 800112a:	f003 030f 	and.w	r3, r3, #15
 800112e:	b2db      	uxtb	r3, r3
 8001130:	4413      	add	r3, r2
 8001132:	b2da      	uxtb	r2, r3
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	709a      	strb	r2, [r3, #2]
    time->day = ((data[3] & 0xF0) >> 4) * 10 + (data[3] & 0x0F);
 8001138:	7afb      	ldrb	r3, [r7, #11]
 800113a:	091b      	lsrs	r3, r3, #4
 800113c:	b2db      	uxtb	r3, r3
 800113e:	461a      	mov	r2, r3
 8001140:	0092      	lsls	r2, r2, #2
 8001142:	4413      	add	r3, r2
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	b2da      	uxtb	r2, r3
 8001148:	7afb      	ldrb	r3, [r7, #11]
 800114a:	f003 030f 	and.w	r3, r3, #15
 800114e:	b2db      	uxtb	r3, r3
 8001150:	4413      	add	r3, r2
 8001152:	b2da      	uxtb	r2, r3
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	70da      	strb	r2, [r3, #3]
    time->month = ((data[5] & 0xF0) >> 4) * 10 + (data[5] & 0x0F);
 8001158:	7b7b      	ldrb	r3, [r7, #13]
 800115a:	091b      	lsrs	r3, r3, #4
 800115c:	b2db      	uxtb	r3, r3
 800115e:	461a      	mov	r2, r3
 8001160:	0092      	lsls	r2, r2, #2
 8001162:	4413      	add	r3, r2
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	b2da      	uxtb	r2, r3
 8001168:	7b7b      	ldrb	r3, [r7, #13]
 800116a:	f003 030f 	and.w	r3, r3, #15
 800116e:	b2db      	uxtb	r3, r3
 8001170:	4413      	add	r3, r2
 8001172:	b2da      	uxtb	r2, r3
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	711a      	strb	r2, [r3, #4]
    time->year = ((data[6] & 0xF0) >> 4) * 10 + (data[6] & 0x0F);
 8001178:	7bbb      	ldrb	r3, [r7, #14]
 800117a:	091b      	lsrs	r3, r3, #4
 800117c:	b2db      	uxtb	r3, r3
 800117e:	461a      	mov	r2, r3
 8001180:	0092      	lsls	r2, r2, #2
 8001182:	4413      	add	r3, r2
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	b2da      	uxtb	r2, r3
 8001188:	7bbb      	ldrb	r3, [r7, #14]
 800118a:	f003 030f 	and.w	r3, r3, #15
 800118e:	b2db      	uxtb	r3, r3
 8001190:	4413      	add	r3, r2
 8001192:	b2da      	uxtb	r2, r3
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	715a      	strb	r2, [r3, #5]

    return HAL_OK;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <MyLCD_Delay>:

#include "MyLCD_I2C.h"

//************************** Low Level Functions ***************************************************************//
static void MyLCD_Delay(uint16_t Time)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	4603      	mov	r3, r0
 80011aa:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 80011ac:	88fb      	ldrh	r3, [r7, #6]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f001 fa94 	bl	80026dc <HAL_Delay>
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <MyLCD_WriteI2C>:

static void MyLCD_WriteI2C(MyLCD_I2C* LCD, uint8_t Data, uint8_t Mode)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af02      	add	r7, sp, #8
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	460b      	mov	r3, r1
 80011c6:	70fb      	strb	r3, [r7, #3]
 80011c8:	4613      	mov	r3, r2
 80011ca:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data & 0xF0;
 80011cc:	78fb      	ldrb	r3, [r7, #3]
 80011ce:	f023 030f 	bic.w	r3, r3, #15
 80011d2:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data << 4) & 0xF0;
 80011d4:	78fb      	ldrb	r3, [r7, #3]
 80011d6:	011b      	lsls	r3, r3, #4
 80011d8:	73bb      	strb	r3, [r7, #14]

	if (LCD->BACKLIGHT)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	7adb      	ldrb	r3, [r3, #11]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d007      	beq.n	80011f2 <MyLCD_WriteI2C+0x36>
	{
		Data_H |= MYLCD_BACKLIGHT;
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
 80011e4:	f043 0308 	orr.w	r3, r3, #8
 80011e8:	73fb      	strb	r3, [r7, #15]
		Data_L |= MYLCD_BACKLIGHT;
 80011ea:	7bbb      	ldrb	r3, [r7, #14]
 80011ec:	f043 0308 	orr.w	r3, r3, #8
 80011f0:	73bb      	strb	r3, [r7, #14]
	}

	if (Mode == MYLCD_DATA)
 80011f2:	78bb      	ldrb	r3, [r7, #2]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d108      	bne.n	800120a <MyLCD_WriteI2C+0x4e>
	{
		Data_H |= 0x01;  // RS = 1 for data
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
 80011fa:	f043 0301 	orr.w	r3, r3, #1
 80011fe:	73fb      	strb	r3, [r7, #15]
		Data_L |= 0x01;
 8001200:	7bbb      	ldrb	r3, [r7, #14]
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	73bb      	strb	r3, [r7, #14]
 8001208:	e007      	b.n	800121a <MyLCD_WriteI2C+0x5e>
	}
	else
	{
		Data_H &= ~0x01; // RS = 0 for command
 800120a:	7bfb      	ldrb	r3, [r7, #15]
 800120c:	f023 0301 	bic.w	r3, r3, #1
 8001210:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~0x01;
 8001212:	7bbb      	ldrb	r3, [r7, #14]
 8001214:	f023 0301 	bic.w	r3, r3, #1
 8001218:	73bb      	strb	r3, [r7, #14]
	}

	Data_I2C[0] = Data_H | 0x04;  // EN = 1
 800121a:	7bfb      	ldrb	r3, [r7, #15]
 800121c:	f043 0304 	orr.w	r3, r3, #4
 8001220:	b2db      	uxtb	r3, r3
 8001222:	723b      	strb	r3, [r7, #8]
	MyLCD_Delay(1);
 8001224:	2001      	movs	r0, #1
 8001226:	f7ff ffbc 	bl	80011a2 <MyLCD_Delay>
	Data_I2C[1] = Data_H & ~0x04; // EN = 0
 800122a:	7bfb      	ldrb	r3, [r7, #15]
 800122c:	f023 0304 	bic.w	r3, r3, #4
 8001230:	b2db      	uxtb	r3, r3
 8001232:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L | 0x04;  // EN = 1
 8001234:	7bbb      	ldrb	r3, [r7, #14]
 8001236:	f043 0304 	orr.w	r3, r3, #4
 800123a:	b2db      	uxtb	r3, r3
 800123c:	72bb      	strb	r3, [r7, #10]
	MyLCD_Delay(1);
 800123e:	2001      	movs	r0, #1
 8001240:	f7ff ffaf 	bl	80011a2 <MyLCD_Delay>
	Data_I2C[3] = Data_L & ~0x04; // EN = 0
 8001244:	7bbb      	ldrb	r3, [r7, #14]
 8001246:	f023 0304 	bic.w	r3, r3, #4
 800124a:	b2db      	uxtb	r3, r3
 800124c:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, Data_I2C, 4, 1000);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6818      	ldr	r0, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	791b      	ldrb	r3, [r3, #4]
 8001256:	4619      	mov	r1, r3
 8001258:	f107 0208 	add.w	r2, r7, #8
 800125c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	2304      	movs	r3, #4
 8001264:	f002 fb6e 	bl	8003944 <HAL_I2C_Master_Transmit>
}
 8001268:	bf00      	nop
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <MyLCD_Init>:

//************************** High Level Functions ***************************************************************//
void MyLCD_Init(MyLCD_I2C* LCD, I2C_HandleTypeDef* hi2c_LCD, uint8_t Address, uint8_t Columns, uint8_t Rows)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	4611      	mov	r1, r2
 800127c:	461a      	mov	r2, r3
 800127e:	460b      	mov	r3, r1
 8001280:	71fb      	strb	r3, [r7, #7]
 8001282:	4613      	mov	r3, r2
 8001284:	71bb      	strb	r3, [r7, #6]
	LCD->I2C = hi2c_LCD;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	68ba      	ldr	r2, [r7, #8]
 800128a:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	79fa      	ldrb	r2, [r7, #7]
 8001290:	711a      	strb	r2, [r3, #4]
	LCD->COLUMNS = Columns;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	79ba      	ldrb	r2, [r7, #6]
 8001296:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	7e3a      	ldrb	r2, [r7, #24]
 800129c:	719a      	strb	r2, [r3, #6]
	
	LCD->FUNCTIONSET = MYLCD_FUNCTIONSET | MYLCD_4BITMODE | MYLCD_2LINE | MYLCD_5x8DOTS;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	2228      	movs	r2, #40	@ 0x28
 80012a2:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = MYLCD_ENTRYMODESET | MYLCD_ENTRYLEFT | MYLCD_ENTRYSHIFTDECREMENT;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2206      	movs	r2, #6
 80012a8:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = MYLCD_DISPLAYCONTROL | MYLCD_DISPLAYON | MYLCD_CURSOROFF | MYLCD_BLINKOFF;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	220c      	movs	r2, #12
 80012ae:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = MYLCD_CURSORSHIFT | 0x00;  // Cursor shift with no movement
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2210      	movs	r2, #16
 80012b4:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = MYLCD_BACKLIGHT;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2208      	movs	r2, #8
 80012ba:	72da      	strb	r2, [r3, #11]

	MyLCD_Delay(50);
 80012bc:	2032      	movs	r0, #50	@ 0x32
 80012be:	f7ff ff70 	bl	80011a2 <MyLCD_Delay>
	MyLCD_WriteI2C(LCD, 0x33, MYLCD_COMMAND);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2133      	movs	r1, #51	@ 0x33
 80012c6:	68f8      	ldr	r0, [r7, #12]
 80012c8:	f7ff ff78 	bl	80011bc <MyLCD_WriteI2C>
	MyLCD_WriteI2C(LCD, 0x32, MYLCD_COMMAND);
 80012cc:	2200      	movs	r2, #0
 80012ce:	2132      	movs	r1, #50	@ 0x32
 80012d0:	68f8      	ldr	r0, [r7, #12]
 80012d2:	f7ff ff73 	bl	80011bc <MyLCD_WriteI2C>
	MyLCD_WriteI2C(LCD, 0x28, MYLCD_COMMAND); // 4-bit, 2-line, 5x8 dots
 80012d6:	2200      	movs	r2, #0
 80012d8:	2128      	movs	r1, #40	@ 0x28
 80012da:	68f8      	ldr	r0, [r7, #12]
 80012dc:	f7ff ff6e 	bl	80011bc <MyLCD_WriteI2C>

	MyLCD_WriteI2C(LCD, LCD->DISPLAYCTRL, MYLCD_COMMAND);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	7a1b      	ldrb	r3, [r3, #8]
 80012e4:	2200      	movs	r2, #0
 80012e6:	4619      	mov	r1, r3
 80012e8:	68f8      	ldr	r0, [r7, #12]
 80012ea:	f7ff ff67 	bl	80011bc <MyLCD_WriteI2C>
	MyLCD_WriteI2C(LCD, MYLCD_CLEARDISPLAY, MYLCD_COMMAND);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2101      	movs	r1, #1
 80012f2:	68f8      	ldr	r0, [r7, #12]
 80012f4:	f7ff ff62 	bl	80011bc <MyLCD_WriteI2C>
	MyLCD_Delay(5);
 80012f8:	2005      	movs	r0, #5
 80012fa:	f7ff ff52 	bl	80011a2 <MyLCD_Delay>
	MyLCD_WriteI2C(LCD, MYLCD_RETURNHOME, MYLCD_COMMAND);
 80012fe:	2200      	movs	r2, #0
 8001300:	2102      	movs	r1, #2
 8001302:	68f8      	ldr	r0, [r7, #12]
 8001304:	f7ff ff5a 	bl	80011bc <MyLCD_WriteI2C>
	MyLCD_Delay(5);
 8001308:	2005      	movs	r0, #5
 800130a:	f7ff ff4a 	bl	80011a2 <MyLCD_Delay>
}
 800130e:	bf00      	nop
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
	...

08001318 <MyLCD_SetCursor>:

void MyLCD_SetCursor(MyLCD_I2C* LCD, uint8_t Xpos, uint8_t Ypos)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	460b      	mov	r3, r1
 8001322:	70fb      	strb	r3, [r7, #3]
 8001324:	4613      	mov	r3, r2
 8001326:	70bb      	strb	r3, [r7, #2]
	uint8_t DDRAM_ADDRESS = 0x00;
 8001328:	2300      	movs	r3, #0
 800132a:	73fb      	strb	r3, [r7, #15]

	if (Xpos >= LCD->COLUMNS) Xpos = LCD->COLUMNS - 1;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	795b      	ldrb	r3, [r3, #5]
 8001330:	78fa      	ldrb	r2, [r7, #3]
 8001332:	429a      	cmp	r2, r3
 8001334:	d303      	bcc.n	800133e <MyLCD_SetCursor+0x26>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	795b      	ldrb	r3, [r3, #5]
 800133a:	3b01      	subs	r3, #1
 800133c:	70fb      	strb	r3, [r7, #3]
	if (Ypos >= LCD->ROWS) Ypos = LCD->ROWS - 1;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	799b      	ldrb	r3, [r3, #6]
 8001342:	78ba      	ldrb	r2, [r7, #2]
 8001344:	429a      	cmp	r2, r3
 8001346:	d303      	bcc.n	8001350 <MyLCD_SetCursor+0x38>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	799b      	ldrb	r3, [r3, #6]
 800134c:	3b01      	subs	r3, #1
 800134e:	70bb      	strb	r3, [r7, #2]

	switch (Ypos)
 8001350:	78bb      	ldrb	r3, [r7, #2]
 8001352:	2b03      	cmp	r3, #3
 8001354:	d819      	bhi.n	800138a <MyLCD_SetCursor+0x72>
 8001356:	a201      	add	r2, pc, #4	@ (adr r2, 800135c <MyLCD_SetCursor+0x44>)
 8001358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800135c:	0800136d 	.word	0x0800136d
 8001360:	08001373 	.word	0x08001373
 8001364:	0800137b 	.word	0x0800137b
 8001368:	08001383 	.word	0x08001383
	{
		case 0: DDRAM_ADDRESS = 0x00 + Xpos; break;
 800136c:	78fb      	ldrb	r3, [r7, #3]
 800136e:	73fb      	strb	r3, [r7, #15]
 8001370:	e00b      	b.n	800138a <MyLCD_SetCursor+0x72>
		case 1: DDRAM_ADDRESS = 0x40 + Xpos; break;
 8001372:	78fb      	ldrb	r3, [r7, #3]
 8001374:	3340      	adds	r3, #64	@ 0x40
 8001376:	73fb      	strb	r3, [r7, #15]
 8001378:	e007      	b.n	800138a <MyLCD_SetCursor+0x72>
		case 2: DDRAM_ADDRESS = 0x14 + Xpos; break;
 800137a:	78fb      	ldrb	r3, [r7, #3]
 800137c:	3314      	adds	r3, #20
 800137e:	73fb      	strb	r3, [r7, #15]
 8001380:	e003      	b.n	800138a <MyLCD_SetCursor+0x72>
		case 3: DDRAM_ADDRESS = 0x54 + Xpos; break;
 8001382:	78fb      	ldrb	r3, [r7, #3]
 8001384:	3354      	adds	r3, #84	@ 0x54
 8001386:	73fb      	strb	r3, [r7, #15]
 8001388:	bf00      	nop
	}

	MyLCD_WriteI2C(LCD, MYLCD_SETDDRAMADDR | DDRAM_ADDRESS, MYLCD_COMMAND);
 800138a:	7bfb      	ldrb	r3, [r7, #15]
 800138c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2200      	movs	r2, #0
 8001394:	4619      	mov	r1, r3
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff ff10 	bl	80011bc <MyLCD_WriteI2C>
}
 800139c:	bf00      	nop
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <MyLCD_WriteChar>:

void MyLCD_WriteChar(MyLCD_I2C* LCD, char character)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	460b      	mov	r3, r1
 80013ae:	70fb      	strb	r3, [r7, #3]
	MyLCD_WriteI2C(LCD, character, MYLCD_DATA);
 80013b0:	78fb      	ldrb	r3, [r7, #3]
 80013b2:	2201      	movs	r2, #1
 80013b4:	4619      	mov	r1, r3
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff ff00 	bl	80011bc <MyLCD_WriteI2C>
}
 80013bc:	bf00      	nop
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <MyLCD_WriteString>:

void MyLCD_WriteString(MyLCD_I2C* LCD, char *String)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
	while (*String) MyLCD_WriteChar(LCD, *String++);
 80013ce:	e007      	b.n	80013e0 <MyLCD_WriteString+0x1c>
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	1c5a      	adds	r2, r3, #1
 80013d4:	603a      	str	r2, [r7, #0]
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	4619      	mov	r1, r3
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff ffe2 	bl	80013a4 <MyLCD_WriteChar>
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1f3      	bne.n	80013d0 <MyLCD_WriteString+0xc>
}
 80013e8:	bf00      	nop
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <MyLCD_Clear>:

void MyLCD_Clear(MyLCD_I2C* LCD)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
	MyLCD_WriteI2C(LCD, MYLCD_CLEARDISPLAY, MYLCD_COMMAND);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2101      	movs	r1, #1
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff fedc 	bl	80011bc <MyLCD_WriteI2C>
	MyLCD_Delay(5);
 8001404:	2005      	movs	r0, #5
 8001406:	f7ff fecc 	bl	80011a2 <MyLCD_Delay>
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <microDelay>:
float tCelsius = 0;
float RH = 0;

// Delay function using the hardware timer
void microDelay (uint16_t delay)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(DHT22_htim, 0);
 800141e:	4b09      	ldr	r3, [pc, #36]	@ (8001444 <microDelay+0x30>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2200      	movs	r2, #0
 8001426:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(DHT22_htim) < delay);
 8001428:	bf00      	nop
 800142a:	4b06      	ldr	r3, [pc, #24]	@ (8001444 <microDelay+0x30>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001432:	88fb      	ldrh	r3, [r7, #6]
 8001434:	429a      	cmp	r2, r3
 8001436:	d3f8      	bcc.n	800142a <microDelay+0x16>
}
 8001438:	bf00      	nop
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr
 8001444:	200001f0 	.word	0x200001f0

08001448 <DHT22_Init>:

// Initialize DHT22 with the timer handle
void DHT22_Init(TIM_HandleTypeDef *htim)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
    DHT22_htim = htim;
 8001450:	4a05      	ldr	r2, [pc, #20]	@ (8001468 <DHT22_Init+0x20>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6013      	str	r3, [r2, #0]
    HAL_TIM_Base_Start(DHT22_htim);
 8001456:	4b04      	ldr	r3, [pc, #16]	@ (8001468 <DHT22_Init+0x20>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4618      	mov	r0, r3
 800145c:	f003 ff50 	bl	8005300 <HAL_TIM_Base_Start>
}
 8001460:	bf00      	nop
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	200001f0 	.word	0x200001f0

0800146c <DHT22_Start>:

uint8_t DHT22_Start(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
    uint8_t Response = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	75fb      	strb	r3, [r7, #23]
    GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
    GPIO_InitStructPrivate.Pin = DHT22_PIN;
 8001482:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001486:	607b      	str	r3, [r7, #4]
    GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8001488:	2301      	movs	r3, #1
 800148a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 800148c:	2302      	movs	r3, #2
 800148e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DHT22_PORT, &GPIO_InitStructPrivate); // set the pin as output
 8001494:	1d3b      	adds	r3, r7, #4
 8001496:	4619      	mov	r1, r3
 8001498:	482d      	ldr	r0, [pc, #180]	@ (8001550 <DHT22_Start+0xe4>)
 800149a:	f001 ff5b 	bl	8003354 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(DHT22_PORT, DHT22_PIN, 0);   // pull the pin low
 800149e:	2200      	movs	r2, #0
 80014a0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014a4:	482a      	ldr	r0, [pc, #168]	@ (8001550 <DHT22_Start+0xe4>)
 80014a6:	f002 f8f0 	bl	800368a <HAL_GPIO_WritePin>
    microDelay(1300);   // wait for 1300us
 80014aa:	f240 5014 	movw	r0, #1300	@ 0x514
 80014ae:	f7ff ffb1 	bl	8001414 <microDelay>
    HAL_GPIO_WritePin(DHT22_PORT, DHT22_PIN, 1);   // pull the pin high
 80014b2:	2201      	movs	r2, #1
 80014b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014b8:	4825      	ldr	r0, [pc, #148]	@ (8001550 <DHT22_Start+0xe4>)
 80014ba:	f002 f8e6 	bl	800368a <HAL_GPIO_WritePin>
    microDelay(30);   // wait for 30us
 80014be:	201e      	movs	r0, #30
 80014c0:	f7ff ffa8 	bl	8001414 <microDelay>
    GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 80014c4:	2300      	movs	r3, #0
 80014c6:	60bb      	str	r3, [r7, #8]
    GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 80014c8:	2301      	movs	r3, #1
 80014ca:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DHT22_PORT, &GPIO_InitStructPrivate); // set the pin as input
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	4619      	mov	r1, r3
 80014d0:	481f      	ldr	r0, [pc, #124]	@ (8001550 <DHT22_Start+0xe4>)
 80014d2:	f001 ff3f 	bl	8003354 <HAL_GPIO_Init>
    microDelay(40);
 80014d6:	2028      	movs	r0, #40	@ 0x28
 80014d8:	f7ff ff9c 	bl	8001414 <microDelay>
    if (!(HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)))
 80014dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014e0:	481b      	ldr	r0, [pc, #108]	@ (8001550 <DHT22_Start+0xe4>)
 80014e2:	f002 f8bb 	bl	800365c <HAL_GPIO_ReadPin>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d10c      	bne.n	8001506 <DHT22_Start+0x9a>
    {
        microDelay(80);
 80014ec:	2050      	movs	r0, #80	@ 0x50
 80014ee:	f7ff ff91 	bl	8001414 <microDelay>
        if ((HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))) Response = 1;
 80014f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014f6:	4816      	ldr	r0, [pc, #88]	@ (8001550 <DHT22_Start+0xe4>)
 80014f8:	f002 f8b0 	bl	800365c <HAL_GPIO_ReadPin>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <DHT22_Start+0x9a>
 8001502:	2301      	movs	r3, #1
 8001504:	75fb      	strb	r3, [r7, #23]
    }
    pMillis = HAL_GetTick();
 8001506:	f001 f8df 	bl	80026c8 <HAL_GetTick>
 800150a:	4603      	mov	r3, r0
 800150c:	4a11      	ldr	r2, [pc, #68]	@ (8001554 <DHT22_Start+0xe8>)
 800150e:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8001510:	f001 f8da 	bl	80026c8 <HAL_GetTick>
 8001514:	4603      	mov	r3, r0
 8001516:	4a10      	ldr	r2, [pc, #64]	@ (8001558 <DHT22_Start+0xec>)
 8001518:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 800151a:	e004      	b.n	8001526 <DHT22_Start+0xba>
    {
        cMillis = HAL_GetTick();
 800151c:	f001 f8d4 	bl	80026c8 <HAL_GetTick>
 8001520:	4603      	mov	r3, r0
 8001522:	4a0d      	ldr	r2, [pc, #52]	@ (8001558 <DHT22_Start+0xec>)
 8001524:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 8001526:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800152a:	4809      	ldr	r0, [pc, #36]	@ (8001550 <DHT22_Start+0xe4>)
 800152c:	f002 f896 	bl	800365c <HAL_GPIO_ReadPin>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d006      	beq.n	8001544 <DHT22_Start+0xd8>
 8001536:	4b07      	ldr	r3, [pc, #28]	@ (8001554 <DHT22_Start+0xe8>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	1c9a      	adds	r2, r3, #2
 800153c:	4b06      	ldr	r3, [pc, #24]	@ (8001558 <DHT22_Start+0xec>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	429a      	cmp	r2, r3
 8001542:	d8eb      	bhi.n	800151c <DHT22_Start+0xb0>
    }
    return Response;
 8001544:	7dfb      	ldrb	r3, [r7, #23]
}
 8001546:	4618      	mov	r0, r3
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40010c00 	.word	0x40010c00
 8001554:	200001fc 	.word	0x200001fc
 8001558:	20000200 	.word	0x20000200

0800155c <DHT22_Read>:

uint8_t DHT22_Read(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
    uint8_t a, b = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	71bb      	strb	r3, [r7, #6]
    for (a = 0; a < 8; a++)
 8001566:	2300      	movs	r3, #0
 8001568:	71fb      	strb	r3, [r7, #7]
 800156a:	e066      	b.n	800163a <DHT22_Read+0xde>
    {
        pMillis = HAL_GetTick();
 800156c:	f001 f8ac 	bl	80026c8 <HAL_GetTick>
 8001570:	4603      	mov	r3, r0
 8001572:	4a36      	ldr	r2, [pc, #216]	@ (800164c <DHT22_Read+0xf0>)
 8001574:	6013      	str	r3, [r2, #0]
        cMillis = HAL_GetTick();
 8001576:	f001 f8a7 	bl	80026c8 <HAL_GetTick>
 800157a:	4603      	mov	r3, r0
 800157c:	4a34      	ldr	r2, [pc, #208]	@ (8001650 <DHT22_Read+0xf4>)
 800157e:	6013      	str	r3, [r2, #0]
        while (!(HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 8001580:	e004      	b.n	800158c <DHT22_Read+0x30>
        {
            cMillis = HAL_GetTick();
 8001582:	f001 f8a1 	bl	80026c8 <HAL_GetTick>
 8001586:	4603      	mov	r3, r0
 8001588:	4a31      	ldr	r2, [pc, #196]	@ (8001650 <DHT22_Read+0xf4>)
 800158a:	6013      	str	r3, [r2, #0]
        while (!(HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 800158c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001590:	4830      	ldr	r0, [pc, #192]	@ (8001654 <DHT22_Read+0xf8>)
 8001592:	f002 f863 	bl	800365c <HAL_GPIO_ReadPin>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d106      	bne.n	80015aa <DHT22_Read+0x4e>
 800159c:	4b2b      	ldr	r3, [pc, #172]	@ (800164c <DHT22_Read+0xf0>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	1c9a      	adds	r2, r3, #2
 80015a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001650 <DHT22_Read+0xf4>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d8eb      	bhi.n	8001582 <DHT22_Read+0x26>
        }
        microDelay(40);   // wait for 40 us
 80015aa:	2028      	movs	r0, #40	@ 0x28
 80015ac:	f7ff ff32 	bl	8001414 <microDelay>
        if (!(HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)))   // if the pin is low
 80015b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015b4:	4827      	ldr	r0, [pc, #156]	@ (8001654 <DHT22_Read+0xf8>)
 80015b6:	f002 f851 	bl	800365c <HAL_GPIO_ReadPin>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d10e      	bne.n	80015de <DHT22_Read+0x82>
            b &= ~(1 << (7 - a));
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	f1c3 0307 	rsb	r3, r3, #7
 80015c6:	2201      	movs	r2, #1
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	b25b      	sxtb	r3, r3
 80015ce:	43db      	mvns	r3, r3
 80015d0:	b25a      	sxtb	r2, r3
 80015d2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80015d6:	4013      	ands	r3, r2
 80015d8:	b25b      	sxtb	r3, r3
 80015da:	71bb      	strb	r3, [r7, #6]
 80015dc:	e00b      	b.n	80015f6 <DHT22_Read+0x9a>
        else
            b |= (1 << (7 - a));
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	f1c3 0307 	rsb	r3, r3, #7
 80015e4:	2201      	movs	r2, #1
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	b25a      	sxtb	r2, r3
 80015ec:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	b25b      	sxtb	r3, r3
 80015f4:	71bb      	strb	r3, [r7, #6]
        pMillis = HAL_GetTick();
 80015f6:	f001 f867 	bl	80026c8 <HAL_GetTick>
 80015fa:	4603      	mov	r3, r0
 80015fc:	4a13      	ldr	r2, [pc, #76]	@ (800164c <DHT22_Read+0xf0>)
 80015fe:	6013      	str	r3, [r2, #0]
        cMillis = HAL_GetTick();
 8001600:	f001 f862 	bl	80026c8 <HAL_GetTick>
 8001604:	4603      	mov	r3, r0
 8001606:	4a12      	ldr	r2, [pc, #72]	@ (8001650 <DHT22_Read+0xf4>)
 8001608:	6013      	str	r3, [r2, #0]
        while ((HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 800160a:	e004      	b.n	8001616 <DHT22_Read+0xba>
        {
            cMillis = HAL_GetTick();
 800160c:	f001 f85c 	bl	80026c8 <HAL_GetTick>
 8001610:	4603      	mov	r3, r0
 8001612:	4a0f      	ldr	r2, [pc, #60]	@ (8001650 <DHT22_Read+0xf4>)
 8001614:	6013      	str	r3, [r2, #0]
        while ((HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 8001616:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800161a:	480e      	ldr	r0, [pc, #56]	@ (8001654 <DHT22_Read+0xf8>)
 800161c:	f002 f81e 	bl	800365c <HAL_GPIO_ReadPin>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d006      	beq.n	8001634 <DHT22_Read+0xd8>
 8001626:	4b09      	ldr	r3, [pc, #36]	@ (800164c <DHT22_Read+0xf0>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	1c9a      	adds	r2, r3, #2
 800162c:	4b08      	ldr	r3, [pc, #32]	@ (8001650 <DHT22_Read+0xf4>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	429a      	cmp	r2, r3
 8001632:	d8eb      	bhi.n	800160c <DHT22_Read+0xb0>
    for (a = 0; a < 8; a++)
 8001634:	79fb      	ldrb	r3, [r7, #7]
 8001636:	3301      	adds	r3, #1
 8001638:	71fb      	strb	r3, [r7, #7]
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	2b07      	cmp	r3, #7
 800163e:	d995      	bls.n	800156c <DHT22_Read+0x10>
        }
    }
    return b;
 8001640:	79bb      	ldrb	r3, [r7, #6]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	200001fc 	.word	0x200001fc
 8001650:	20000200 	.word	0x20000200
 8001654:	40010c00 	.word	0x40010c00

08001658 <DHT22_ReadData>:



// Hàm đọc cả nhiệt độ và độ ẩm từ DHT22
uint8_t DHT22_ReadData(float *temperature, float *humidity)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
    if (DHT22_Start())
 8001662:	f7ff ff03 	bl	800146c <DHT22_Start>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d070      	beq.n	800174e <DHT22_ReadData+0xf6>
    {
        RH1 = DHT22_Read(); // First 8 bits of humidity
 800166c:	f7ff ff76 	bl	800155c <DHT22_Read>
 8001670:	4603      	mov	r3, r0
 8001672:	461a      	mov	r2, r3
 8001674:	4b38      	ldr	r3, [pc, #224]	@ (8001758 <DHT22_ReadData+0x100>)
 8001676:	701a      	strb	r2, [r3, #0]
        RH2 = DHT22_Read(); // Second 8 bits of humidity
 8001678:	f7ff ff70 	bl	800155c <DHT22_Read>
 800167c:	4603      	mov	r3, r0
 800167e:	461a      	mov	r2, r3
 8001680:	4b36      	ldr	r3, [pc, #216]	@ (800175c <DHT22_ReadData+0x104>)
 8001682:	701a      	strb	r2, [r3, #0]
        TC1 = DHT22_Read(); // First 8 bits of temperature
 8001684:	f7ff ff6a 	bl	800155c <DHT22_Read>
 8001688:	4603      	mov	r3, r0
 800168a:	461a      	mov	r2, r3
 800168c:	4b34      	ldr	r3, [pc, #208]	@ (8001760 <DHT22_ReadData+0x108>)
 800168e:	701a      	strb	r2, [r3, #0]
        TC2 = DHT22_Read(); // Second 8 bits of temperature
 8001690:	f7ff ff64 	bl	800155c <DHT22_Read>
 8001694:	4603      	mov	r3, r0
 8001696:	461a      	mov	r2, r3
 8001698:	4b32      	ldr	r3, [pc, #200]	@ (8001764 <DHT22_ReadData+0x10c>)
 800169a:	701a      	strb	r2, [r3, #0]
        SUM = DHT22_Read(); // Checksum byte
 800169c:	f7ff ff5e 	bl	800155c <DHT22_Read>
 80016a0:	4603      	mov	r3, r0
 80016a2:	461a      	mov	r2, r3
 80016a4:	4b30      	ldr	r3, [pc, #192]	@ (8001768 <DHT22_ReadData+0x110>)
 80016a6:	701a      	strb	r2, [r3, #0]

        CHECK = RH1 + RH2 + TC1 + TC2;
 80016a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001758 <DHT22_ReadData+0x100>)
 80016aa:	781a      	ldrb	r2, [r3, #0]
 80016ac:	4b2b      	ldr	r3, [pc, #172]	@ (800175c <DHT22_ReadData+0x104>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	4413      	add	r3, r2
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001760 <DHT22_ReadData+0x108>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	4413      	add	r3, r2
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	4b29      	ldr	r3, [pc, #164]	@ (8001764 <DHT22_ReadData+0x10c>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	4413      	add	r3, r2
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	4b29      	ldr	r3, [pc, #164]	@ (800176c <DHT22_ReadData+0x114>)
 80016c6:	701a      	strb	r2, [r3, #0]
        if (CHECK == SUM)
 80016c8:	4b28      	ldr	r3, [pc, #160]	@ (800176c <DHT22_ReadData+0x114>)
 80016ca:	781a      	ldrb	r2, [r3, #0]
 80016cc:	4b26      	ldr	r3, [pc, #152]	@ (8001768 <DHT22_ReadData+0x110>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d13a      	bne.n	800174a <DHT22_ReadData+0xf2>
        {
            // Tính độ ẩm
            *humidity = (float)((RH1 << 8) | RH2) / 10;
 80016d4:	4b20      	ldr	r3, [pc, #128]	@ (8001758 <DHT22_ReadData+0x100>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	021b      	lsls	r3, r3, #8
 80016da:	4a20      	ldr	r2, [pc, #128]	@ (800175c <DHT22_ReadData+0x104>)
 80016dc:	7812      	ldrb	r2, [r2, #0]
 80016de:	4313      	orrs	r3, r2
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff fb05 	bl	8000cf0 <__aeabi_i2f>
 80016e6:	4603      	mov	r3, r0
 80016e8:	4921      	ldr	r1, [pc, #132]	@ (8001770 <DHT22_ReadData+0x118>)
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff fc08 	bl	8000f00 <__aeabi_fdiv>
 80016f0:	4603      	mov	r3, r0
 80016f2:	461a      	mov	r2, r3
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	601a      	str	r2, [r3, #0]

            // Tính nhiệt độ
            if (TC1 > 127) // Kiểm tra bit dấu để xác định nhiệt độ âm
 80016f8:	4b19      	ldr	r3, [pc, #100]	@ (8001760 <DHT22_ReadData+0x108>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	b25b      	sxtb	r3, r3
 80016fe:	2b00      	cmp	r3, #0
 8001700:	da0f      	bge.n	8001722 <DHT22_ReadData+0xca>
            {
                *temperature = (float)TC2 / 10 * (-1);
 8001702:	4b18      	ldr	r3, [pc, #96]	@ (8001764 <DHT22_ReadData+0x10c>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff faee 	bl	8000ce8 <__aeabi_ui2f>
 800170c:	4603      	mov	r3, r0
 800170e:	4918      	ldr	r1, [pc, #96]	@ (8001770 <DHT22_ReadData+0x118>)
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff fbf5 	bl	8000f00 <__aeabi_fdiv>
 8001716:	4603      	mov	r3, r0
 8001718:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	e011      	b.n	8001746 <DHT22_ReadData+0xee>
            }
            else
            {
                *temperature = (float)((TC1 << 8) | TC2) / 10;
 8001722:	4b0f      	ldr	r3, [pc, #60]	@ (8001760 <DHT22_ReadData+0x108>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	021b      	lsls	r3, r3, #8
 8001728:	4a0e      	ldr	r2, [pc, #56]	@ (8001764 <DHT22_ReadData+0x10c>)
 800172a:	7812      	ldrb	r2, [r2, #0]
 800172c:	4313      	orrs	r3, r2
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fade 	bl	8000cf0 <__aeabi_i2f>
 8001734:	4603      	mov	r3, r0
 8001736:	490e      	ldr	r1, [pc, #56]	@ (8001770 <DHT22_ReadData+0x118>)
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff fbe1 	bl	8000f00 <__aeabi_fdiv>
 800173e:	4603      	mov	r3, r0
 8001740:	461a      	mov	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	601a      	str	r2, [r3, #0]
            }
            return 1;  // Thành công
 8001746:	2301      	movs	r3, #1
 8001748:	e002      	b.n	8001750 <DHT22_ReadData+0xf8>
        }
        else
        {
            return 0;  // Sai checksum
 800174a:	2300      	movs	r3, #0
 800174c:	e000      	b.n	8001750 <DHT22_ReadData+0xf8>
        }
    }
    return 0;  // Không kết nối được cảm biến
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	200001f4 	.word	0x200001f4
 800175c:	200001f5 	.word	0x200001f5
 8001760:	200001f6 	.word	0x200001f6
 8001764:	200001f7 	.word	0x200001f7
 8001768:	200001f8 	.word	0x200001f8
 800176c:	200001f9 	.word	0x200001f9
 8001770:	41200000 	.word	0x41200000

08001774 <read_Button>:
uint16_t _rxIndex = 0;         // Chỉ số vị trí trong buffer
uint8_t Tx_Flag = 0;           // C�? báo hiệu sẵn sàng gửi chuỗi

DS3231_TimeTypeDef currentTime;
//char time_str[20];  // Dùng để lưu chuỗi thời gian cho LCD
void read_Button(){
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_SET) {
 8001778:	2102      	movs	r1, #2
 800177a:	4816      	ldr	r0, [pc, #88]	@ (80017d4 <read_Button+0x60>)
 800177c:	f001 ff6e 	bl	800365c <HAL_GPIO_ReadPin>
 8001780:	4603      	mov	r3, r0
 8001782:	2b01      	cmp	r3, #1
 8001784:	d121      	bne.n	80017ca <read_Button+0x56>
		 	              if (!buttonPressed) {
 8001786:	4b14      	ldr	r3, [pc, #80]	@ (80017d8 <read_Button+0x64>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d120      	bne.n	80017d0 <read_Button+0x5c>
		 	                  HAL_Delay(20); // Delay
 800178e:	2014      	movs	r0, #20
 8001790:	f000 ffa4 	bl	80026dc <HAL_Delay>
		 	                  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_SET) {
 8001794:	2102      	movs	r1, #2
 8001796:	480f      	ldr	r0, [pc, #60]	@ (80017d4 <read_Button+0x60>)
 8001798:	f001 ff60 	bl	800365c <HAL_GPIO_ReadPin>
 800179c:	4603      	mov	r3, r0
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d116      	bne.n	80017d0 <read_Button+0x5c>
		 	                      state++;
 80017a2:	4b0e      	ldr	r3, [pc, #56]	@ (80017dc <read_Button+0x68>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	3301      	adds	r3, #1
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4b0c      	ldr	r3, [pc, #48]	@ (80017dc <read_Button+0x68>)
 80017ac:	701a      	strb	r2, [r3, #0]
		 	                      if (state == 5) {
 80017ae:	4b0b      	ldr	r3, [pc, #44]	@ (80017dc <read_Button+0x68>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	2b05      	cmp	r3, #5
 80017b4:	d102      	bne.n	80017bc <read_Button+0x48>
		 	                          state = 0; //4
 80017b6:	4b09      	ldr	r3, [pc, #36]	@ (80017dc <read_Button+0x68>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	701a      	strb	r2, [r3, #0]
		 	                      }
		 	                      buttonPressed = 1;
 80017bc:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <read_Button+0x64>)
 80017be:	2201      	movs	r2, #1
 80017c0:	701a      	strb	r2, [r3, #0]
		 	                      MyLCD_Clear(&LCD1);
 80017c2:	4807      	ldr	r0, [pc, #28]	@ (80017e0 <read_Button+0x6c>)
 80017c4:	f7ff fe15 	bl	80013f2 <MyLCD_Clear>
		 	                  }
		 	              }
		 	          } else {
		 	              buttonPressed = 0; // Reset
		 	          }
}
 80017c8:	e002      	b.n	80017d0 <read_Button+0x5c>
		 	              buttonPressed = 0; // Reset
 80017ca:	4b03      	ldr	r3, [pc, #12]	@ (80017d8 <read_Button+0x64>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	701a      	strb	r2, [r3, #0]
}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40010c00 	.word	0x40010c00
 80017d8:	200003f0 	.word	0x200003f0
 80017dc:	200003b4 	.word	0x200003b4
 80017e0:	200003a8 	.word	0x200003a8

080017e4 <read_mq7mq135>:

void read_mq7mq135(float *mq7_value, float *mq135_value) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b088      	sub	sp, #32
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
    ADC_ChannelConfTypeDef sConfig = {0};
 80017ee:	f107 0308 	add.w	r3, r7, #8
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]
    uint32_t raw_adc_value = 0;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61fb      	str	r3, [r7, #28]
    const float ADC_MAX = 4095.0f; //ADC 12-bit
 80017fe:	4b2e      	ldr	r3, [pc, #184]	@ (80018b8 <read_mq7mq135+0xd4>)
 8001800:	61bb      	str	r3, [r7, #24]
    const float VREF = 3.3f;       //(3.3V)
 8001802:	4b2e      	ldr	r3, [pc, #184]	@ (80018bc <read_mq7mq135+0xd8>)
 8001804:	617b      	str	r3, [r7, #20]

    //MQ-7 (A0 - ADC1 Channel 0)
    sConfig.Channel = ADC_CHANNEL_0;
 8001806:	2300      	movs	r3, #0
 8001808:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 800180a:	2301      	movs	r3, #1
 800180c:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800180e:	2305      	movs	r3, #5
 8001810:	613b      	str	r3, [r7, #16]
    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001812:	f107 0308 	add.w	r3, r7, #8
 8001816:	4619      	mov	r1, r3
 8001818:	4829      	ldr	r0, [pc, #164]	@ (80018c0 <read_mq7mq135+0xdc>)
 800181a:	f001 fa47 	bl	8002cac <HAL_ADC_ConfigChannel>

    HAL_ADC_Start(&hadc1);
 800181e:	4828      	ldr	r0, [pc, #160]	@ (80018c0 <read_mq7mq135+0xdc>)
 8001820:	f001 f858 	bl	80028d4 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001824:	f04f 31ff 	mov.w	r1, #4294967295
 8001828:	4825      	ldr	r0, [pc, #148]	@ (80018c0 <read_mq7mq135+0xdc>)
 800182a:	f001 f92d 	bl	8002a88 <HAL_ADC_PollForConversion>
    raw_adc_value = HAL_ADC_GetValue(&hadc1);
 800182e:	4824      	ldr	r0, [pc, #144]	@ (80018c0 <read_mq7mq135+0xdc>)
 8001830:	f001 fa30 	bl	8002c94 <HAL_ADC_GetValue>
 8001834:	61f8      	str	r0, [r7, #28]
    *mq7_value = (raw_adc_value / ADC_MAX) * VREF;
 8001836:	69f8      	ldr	r0, [r7, #28]
 8001838:	f7ff fa56 	bl	8000ce8 <__aeabi_ui2f>
 800183c:	4603      	mov	r3, r0
 800183e:	69b9      	ldr	r1, [r7, #24]
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff fb5d 	bl	8000f00 <__aeabi_fdiv>
 8001846:	4603      	mov	r3, r0
 8001848:	6979      	ldr	r1, [r7, #20]
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff faa4 	bl	8000d98 <__aeabi_fmul>
 8001850:	4603      	mov	r3, r0
 8001852:	461a      	mov	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	601a      	str	r2, [r3, #0]
    HAL_ADC_Stop(&hadc1);
 8001858:	4819      	ldr	r0, [pc, #100]	@ (80018c0 <read_mq7mq135+0xdc>)
 800185a:	f001 f8e9 	bl	8002a30 <HAL_ADC_Stop>

    //MQ-135 (A1 - ADC1 Channel 1)
    sConfig.Channel = ADC_CHANNEL_1;
 800185e:	2301      	movs	r3, #1
 8001860:	60bb      	str	r3, [r7, #8]
    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001862:	f107 0308 	add.w	r3, r7, #8
 8001866:	4619      	mov	r1, r3
 8001868:	4815      	ldr	r0, [pc, #84]	@ (80018c0 <read_mq7mq135+0xdc>)
 800186a:	f001 fa1f 	bl	8002cac <HAL_ADC_ConfigChannel>

    HAL_ADC_Start(&hadc1);
 800186e:	4814      	ldr	r0, [pc, #80]	@ (80018c0 <read_mq7mq135+0xdc>)
 8001870:	f001 f830 	bl	80028d4 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001874:	f04f 31ff 	mov.w	r1, #4294967295
 8001878:	4811      	ldr	r0, [pc, #68]	@ (80018c0 <read_mq7mq135+0xdc>)
 800187a:	f001 f905 	bl	8002a88 <HAL_ADC_PollForConversion>
    raw_adc_value = HAL_ADC_GetValue(&hadc1);
 800187e:	4810      	ldr	r0, [pc, #64]	@ (80018c0 <read_mq7mq135+0xdc>)
 8001880:	f001 fa08 	bl	8002c94 <HAL_ADC_GetValue>
 8001884:	61f8      	str	r0, [r7, #28]
    *mq135_value = (raw_adc_value / ADC_MAX) * VREF;
 8001886:	69f8      	ldr	r0, [r7, #28]
 8001888:	f7ff fa2e 	bl	8000ce8 <__aeabi_ui2f>
 800188c:	4603      	mov	r3, r0
 800188e:	69b9      	ldr	r1, [r7, #24]
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff fb35 	bl	8000f00 <__aeabi_fdiv>
 8001896:	4603      	mov	r3, r0
 8001898:	6979      	ldr	r1, [r7, #20]
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff fa7c 	bl	8000d98 <__aeabi_fmul>
 80018a0:	4603      	mov	r3, r0
 80018a2:	461a      	mov	r2, r3
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	601a      	str	r2, [r3, #0]
    HAL_ADC_Stop(&hadc1);
 80018a8:	4805      	ldr	r0, [pc, #20]	@ (80018c0 <read_mq7mq135+0xdc>)
 80018aa:	f001 f8c1 	bl	8002a30 <HAL_ADC_Stop>
}
 80018ae:	bf00      	nop
 80018b0:	3720      	adds	r7, #32
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	457ff000 	.word	0x457ff000
 80018bc:	40533333 	.word	0x40533333
 80018c0:	20000204 	.word	0x20000204

080018c4 <lcd_read_sensor>:

void lcd_read_sensor(){
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af02      	add	r7, sp, #8
     if (state == 0) {
 80018ca:	4b2c      	ldr	r3, [pc, #176]	@ (800197c <lcd_read_sensor+0xb8>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d10b      	bne.n	80018ea <lcd_read_sensor+0x26>
         sprintf(temp_str, "Temp: %.2f", temperature);
 80018d2:	4b2b      	ldr	r3, [pc, #172]	@ (8001980 <lcd_read_sensor+0xbc>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7fe fdb0 	bl	800043c <__aeabi_f2d>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	4928      	ldr	r1, [pc, #160]	@ (8001984 <lcd_read_sensor+0xc0>)
 80018e2:	4829      	ldr	r0, [pc, #164]	@ (8001988 <lcd_read_sensor+0xc4>)
 80018e4:	f005 fd4e 	bl	8007384 <siprintf>
   	 DS3231_GetTime(&hi2c1, &currentTime);
   	// Format thời gian theo chuỗi "HH:MM:SS"
   	// Lấy thời gian từ DS3231 và format lại theo chuỗi "HH:MM:SS"
   	sprintf(temp_str, "Time: %02d:%02d:%02d", currentTime.hour, currentTime.min, currentTime.sec);
     }
}
 80018e8:	e045      	b.n	8001976 <lcd_read_sensor+0xb2>
     } else if (state == 1) {
 80018ea:	4b24      	ldr	r3, [pc, #144]	@ (800197c <lcd_read_sensor+0xb8>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d10b      	bne.n	800190a <lcd_read_sensor+0x46>
         sprintf(temp_str, "Humi: %.2f", humidity);
 80018f2:	4b26      	ldr	r3, [pc, #152]	@ (800198c <lcd_read_sensor+0xc8>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7fe fda0 	bl	800043c <__aeabi_f2d>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4923      	ldr	r1, [pc, #140]	@ (8001990 <lcd_read_sensor+0xcc>)
 8001902:	4821      	ldr	r0, [pc, #132]	@ (8001988 <lcd_read_sensor+0xc4>)
 8001904:	f005 fd3e 	bl	8007384 <siprintf>
}
 8001908:	e035      	b.n	8001976 <lcd_read_sensor+0xb2>
     } else if (state == 2) {
 800190a:	4b1c      	ldr	r3, [pc, #112]	@ (800197c <lcd_read_sensor+0xb8>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b02      	cmp	r3, #2
 8001910:	d10b      	bne.n	800192a <lcd_read_sensor+0x66>
   	  sprintf(temp_str, "Mq-7: %.2f", mq7_value);
 8001912:	4b20      	ldr	r3, [pc, #128]	@ (8001994 <lcd_read_sensor+0xd0>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f7fe fd90 	bl	800043c <__aeabi_f2d>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	491d      	ldr	r1, [pc, #116]	@ (8001998 <lcd_read_sensor+0xd4>)
 8001922:	4819      	ldr	r0, [pc, #100]	@ (8001988 <lcd_read_sensor+0xc4>)
 8001924:	f005 fd2e 	bl	8007384 <siprintf>
}
 8001928:	e025      	b.n	8001976 <lcd_read_sensor+0xb2>
     } else if (state == 3){
 800192a:	4b14      	ldr	r3, [pc, #80]	@ (800197c <lcd_read_sensor+0xb8>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b03      	cmp	r3, #3
 8001930:	d10b      	bne.n	800194a <lcd_read_sensor+0x86>
   	  sprintf(temp_str, "Mq-135: %.2f", mq135_value);
 8001932:	4b1a      	ldr	r3, [pc, #104]	@ (800199c <lcd_read_sensor+0xd8>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	f7fe fd80 	bl	800043c <__aeabi_f2d>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4917      	ldr	r1, [pc, #92]	@ (80019a0 <lcd_read_sensor+0xdc>)
 8001942:	4811      	ldr	r0, [pc, #68]	@ (8001988 <lcd_read_sensor+0xc4>)
 8001944:	f005 fd1e 	bl	8007384 <siprintf>
}
 8001948:	e015      	b.n	8001976 <lcd_read_sensor+0xb2>
     } else if (state == 4){
 800194a:	4b0c      	ldr	r3, [pc, #48]	@ (800197c <lcd_read_sensor+0xb8>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b04      	cmp	r3, #4
 8001950:	d111      	bne.n	8001976 <lcd_read_sensor+0xb2>
   	 DS3231_GetTime(&hi2c1, &currentTime);
 8001952:	4914      	ldr	r1, [pc, #80]	@ (80019a4 <lcd_read_sensor+0xe0>)
 8001954:	4814      	ldr	r0, [pc, #80]	@ (80019a8 <lcd_read_sensor+0xe4>)
 8001956:	f7ff fba5 	bl	80010a4 <DS3231_GetTime>
   	sprintf(temp_str, "Time: %02d:%02d:%02d", currentTime.hour, currentTime.min, currentTime.sec);
 800195a:	4b12      	ldr	r3, [pc, #72]	@ (80019a4 <lcd_read_sensor+0xe0>)
 800195c:	789b      	ldrb	r3, [r3, #2]
 800195e:	461a      	mov	r2, r3
 8001960:	4b10      	ldr	r3, [pc, #64]	@ (80019a4 <lcd_read_sensor+0xe0>)
 8001962:	785b      	ldrb	r3, [r3, #1]
 8001964:	4619      	mov	r1, r3
 8001966:	4b0f      	ldr	r3, [pc, #60]	@ (80019a4 <lcd_read_sensor+0xe0>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	460b      	mov	r3, r1
 800196e:	490f      	ldr	r1, [pc, #60]	@ (80019ac <lcd_read_sensor+0xe8>)
 8001970:	4805      	ldr	r0, [pc, #20]	@ (8001988 <lcd_read_sensor+0xc4>)
 8001972:	f005 fd07 	bl	8007384 <siprintf>
}
 8001976:	bf00      	nop
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	200003b4 	.word	0x200003b4
 8001980:	200003e0 	.word	0x200003e0
 8001984:	0800abf8 	.word	0x0800abf8
 8001988:	200003b8 	.word	0x200003b8
 800198c:	200003e4 	.word	0x200003e4
 8001990:	0800ac04 	.word	0x0800ac04
 8001994:	200003e8 	.word	0x200003e8
 8001998:	0800ac10 	.word	0x0800ac10
 800199c:	200003ec 	.word	0x200003ec
 80019a0:	0800ac1c 	.word	0x0800ac1c
 80019a4:	2000045c 	.word	0x2000045c
 80019a8:	20000234 	.word	0x20000234
 80019ac:	0800ac2c 	.word	0x0800ac2c

080019b0 <uart_read_sensor>:

void uart_read_sensor(){
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
	if (Tx_Flag == 1) {
 80019b4:	4b38      	ldr	r3, [pc, #224]	@ (8001a98 <uart_read_sensor+0xe8>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d16b      	bne.n	8001a94 <uart_read_sensor+0xe4>
		  // Kiểm tra chuỗi nhận được và phản hồi tương ứng
		  if (strcmp((char *)u8_RxBuff, "0") == 0) {
 80019bc:	4937      	ldr	r1, [pc, #220]	@ (8001a9c <uart_read_sensor+0xec>)
 80019be:	4838      	ldr	r0, [pc, #224]	@ (8001aa0 <uart_read_sensor+0xf0>)
 80019c0:	f7fe fbc6 	bl	8000150 <strcmp>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d10b      	bne.n	80019e2 <uart_read_sensor+0x32>
			  sprintf(temp_uart, "Temp: %.2f\r\n", temperature); // Phản hồi state 0
 80019ca:	4b36      	ldr	r3, [pc, #216]	@ (8001aa4 <uart_read_sensor+0xf4>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7fe fd34 	bl	800043c <__aeabi_f2d>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4933      	ldr	r1, [pc, #204]	@ (8001aa8 <uart_read_sensor+0xf8>)
 80019da:	4834      	ldr	r0, [pc, #208]	@ (8001aac <uart_read_sensor+0xfc>)
 80019dc:	f005 fcd2 	bl	8007384 <siprintf>
 80019e0:	e04b      	b.n	8001a7a <uart_read_sensor+0xca>
		  } else if (strcmp((char *)u8_RxBuff, "1") == 0) {
 80019e2:	4933      	ldr	r1, [pc, #204]	@ (8001ab0 <uart_read_sensor+0x100>)
 80019e4:	482e      	ldr	r0, [pc, #184]	@ (8001aa0 <uart_read_sensor+0xf0>)
 80019e6:	f7fe fbb3 	bl	8000150 <strcmp>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d10b      	bne.n	8001a08 <uart_read_sensor+0x58>
			  sprintf(temp_uart, "Humi: %.2f\r\n", humidity); // Phản hồi state 1
 80019f0:	4b30      	ldr	r3, [pc, #192]	@ (8001ab4 <uart_read_sensor+0x104>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7fe fd21 	bl	800043c <__aeabi_f2d>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	492e      	ldr	r1, [pc, #184]	@ (8001ab8 <uart_read_sensor+0x108>)
 8001a00:	482a      	ldr	r0, [pc, #168]	@ (8001aac <uart_read_sensor+0xfc>)
 8001a02:	f005 fcbf 	bl	8007384 <siprintf>
 8001a06:	e038      	b.n	8001a7a <uart_read_sensor+0xca>
		  } else if (strcmp((char *)u8_RxBuff, "2") == 0) {
 8001a08:	492c      	ldr	r1, [pc, #176]	@ (8001abc <uart_read_sensor+0x10c>)
 8001a0a:	4825      	ldr	r0, [pc, #148]	@ (8001aa0 <uart_read_sensor+0xf0>)
 8001a0c:	f7fe fba0 	bl	8000150 <strcmp>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10b      	bne.n	8001a2e <uart_read_sensor+0x7e>
			  sprintf(temp_uart, "Mq-7: %.2f\r\n", mq7_value); // Phản hồi state 2
 8001a16:	4b2a      	ldr	r3, [pc, #168]	@ (8001ac0 <uart_read_sensor+0x110>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7fe fd0e 	bl	800043c <__aeabi_f2d>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4927      	ldr	r1, [pc, #156]	@ (8001ac4 <uart_read_sensor+0x114>)
 8001a26:	4821      	ldr	r0, [pc, #132]	@ (8001aac <uart_read_sensor+0xfc>)
 8001a28:	f005 fcac 	bl	8007384 <siprintf>
 8001a2c:	e025      	b.n	8001a7a <uart_read_sensor+0xca>
		  } else if (strcmp((char *)u8_RxBuff, "3") == 0) {
 8001a2e:	4926      	ldr	r1, [pc, #152]	@ (8001ac8 <uart_read_sensor+0x118>)
 8001a30:	481b      	ldr	r0, [pc, #108]	@ (8001aa0 <uart_read_sensor+0xf0>)
 8001a32:	f7fe fb8d 	bl	8000150 <strcmp>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d10b      	bne.n	8001a54 <uart_read_sensor+0xa4>
			  sprintf(temp_uart, "Mq-135: %.2f\r\n", mq135_value); // Phản hồi state 3
 8001a3c:	4b23      	ldr	r3, [pc, #140]	@ (8001acc <uart_read_sensor+0x11c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7fe fcfb 	bl	800043c <__aeabi_f2d>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	4921      	ldr	r1, [pc, #132]	@ (8001ad0 <uart_read_sensor+0x120>)
 8001a4c:	4817      	ldr	r0, [pc, #92]	@ (8001aac <uart_read_sensor+0xfc>)
 8001a4e:	f005 fc99 	bl	8007384 <siprintf>
 8001a52:	e012      	b.n	8001a7a <uart_read_sensor+0xca>
		  } else if (strcmp((char *)u8_RxBuff, "4") == 0) {
 8001a54:	491f      	ldr	r1, [pc, #124]	@ (8001ad4 <uart_read_sensor+0x124>)
 8001a56:	4812      	ldr	r0, [pc, #72]	@ (8001aa0 <uart_read_sensor+0xf0>)
 8001a58:	f7fe fb7a 	bl	8000150 <strcmp>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d107      	bne.n	8001a72 <uart_read_sensor+0xc2>
			  sprintf(temp_uart, "State: %d\r\n", state); // Phản hồi cho state 4 hoặc thông tin khác
 8001a62:	4b1d      	ldr	r3, [pc, #116]	@ (8001ad8 <uart_read_sensor+0x128>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	461a      	mov	r2, r3
 8001a68:	491c      	ldr	r1, [pc, #112]	@ (8001adc <uart_read_sensor+0x12c>)
 8001a6a:	4810      	ldr	r0, [pc, #64]	@ (8001aac <uart_read_sensor+0xfc>)
 8001a6c:	f005 fc8a 	bl	8007384 <siprintf>
 8001a70:	e003      	b.n	8001a7a <uart_read_sensor+0xca>
		  } else {
			  sprintf(temp_uart, "Invalid Command\r\n"); // Phản hồi khi lệnh không hợp lệ
 8001a72:	491b      	ldr	r1, [pc, #108]	@ (8001ae0 <uart_read_sensor+0x130>)
 8001a74:	480d      	ldr	r0, [pc, #52]	@ (8001aac <uart_read_sensor+0xfc>)
 8001a76:	f005 fc85 	bl	8007384 <siprintf>
		  }
		  // Gửi chuỗi phản hồi qua UART không đồng bộ (sử dụng ngắt)
		  HAL_UART_Transmit_IT(&huart2, (uint8_t *)temp_uart, strlen(temp_uart));
 8001a7a:	480c      	ldr	r0, [pc, #48]	@ (8001aac <uart_read_sensor+0xfc>)
 8001a7c:	f7fe fb72 	bl	8000164 <strlen>
 8001a80:	4603      	mov	r3, r0
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	461a      	mov	r2, r3
 8001a86:	4909      	ldr	r1, [pc, #36]	@ (8001aac <uart_read_sensor+0xfc>)
 8001a88:	4816      	ldr	r0, [pc, #88]	@ (8001ae4 <uart_read_sensor+0x134>)
 8001a8a:	f003 ff88 	bl	800599e <HAL_UART_Transmit_IT>
		  Tx_Flag = 0;
 8001a8e:	4b02      	ldr	r3, [pc, #8]	@ (8001a98 <uart_read_sensor+0xe8>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	701a      	strb	r2, [r3, #0]
	  }

}
 8001a94:	bf00      	nop
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	2000045a 	.word	0x2000045a
 8001a9c:	0800ac44 	.word	0x0800ac44
 8001aa0:	200003f4 	.word	0x200003f4
 8001aa4:	200003e0 	.word	0x200003e0
 8001aa8:	0800ac48 	.word	0x0800ac48
 8001aac:	200003cc 	.word	0x200003cc
 8001ab0:	0800ac58 	.word	0x0800ac58
 8001ab4:	200003e4 	.word	0x200003e4
 8001ab8:	0800ac5c 	.word	0x0800ac5c
 8001abc:	0800ac6c 	.word	0x0800ac6c
 8001ac0:	200003e8 	.word	0x200003e8
 8001ac4:	0800ac70 	.word	0x0800ac70
 8001ac8:	0800ac80 	.word	0x0800ac80
 8001acc:	200003ec 	.word	0x200003ec
 8001ad0:	0800ac84 	.word	0x0800ac84
 8001ad4:	0800ac94 	.word	0x0800ac94
 8001ad8:	200003b4 	.word	0x200003b4
 8001adc:	0800ac98 	.word	0x0800ac98
 8001ae0:	0800aca4 	.word	0x0800aca4
 8001ae4:	20000318 	.word	0x20000318

08001ae8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) { // Kiểm tra nếu ngắt đến từ USART1
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a13      	ldr	r2, [pc, #76]	@ (8001b44 <HAL_UART_RxCpltCallback+0x5c>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d120      	bne.n	8001b3c <HAL_UART_RxCpltCallback+0x54>
        if (u8_RxData != 13) { // Nếu không phải ký tự '\r'
 8001afa:	4b13      	ldr	r3, [pc, #76]	@ (8001b48 <HAL_UART_RxCpltCallback+0x60>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	2b0d      	cmp	r3, #13
 8001b00:	d00b      	beq.n	8001b1a <HAL_UART_RxCpltCallback+0x32>
            u8_RxBuff[_rxIndex++] = u8_RxData; // Thêm ký tự vào buffer
 8001b02:	4b12      	ldr	r3, [pc, #72]	@ (8001b4c <HAL_UART_RxCpltCallback+0x64>)
 8001b04:	881b      	ldrh	r3, [r3, #0]
 8001b06:	1c5a      	adds	r2, r3, #1
 8001b08:	b291      	uxth	r1, r2
 8001b0a:	4a10      	ldr	r2, [pc, #64]	@ (8001b4c <HAL_UART_RxCpltCallback+0x64>)
 8001b0c:	8011      	strh	r1, [r2, #0]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	4b0d      	ldr	r3, [pc, #52]	@ (8001b48 <HAL_UART_RxCpltCallback+0x60>)
 8001b12:	7819      	ldrb	r1, [r3, #0]
 8001b14:	4b0e      	ldr	r3, [pc, #56]	@ (8001b50 <HAL_UART_RxCpltCallback+0x68>)
 8001b16:	5499      	strb	r1, [r3, r2]
 8001b18:	e00b      	b.n	8001b32 <HAL_UART_RxCpltCallback+0x4a>
        } else { // Nếu nhận được ký tự '\r'
            u8_RxBuff[_rxIndex] = '\0'; // Kết thúc chuỗi
 8001b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b4c <HAL_UART_RxCpltCallback+0x64>)
 8001b1c:	881b      	ldrh	r3, [r3, #0]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	4b0b      	ldr	r3, [pc, #44]	@ (8001b50 <HAL_UART_RxCpltCallback+0x68>)
 8001b22:	2100      	movs	r1, #0
 8001b24:	5499      	strb	r1, [r3, r2]
            _rxIndex = 0; // Đặt lại chỉ số buffer
 8001b26:	4b09      	ldr	r3, [pc, #36]	@ (8001b4c <HAL_UART_RxCpltCallback+0x64>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	801a      	strh	r2, [r3, #0]
            Tx_Flag = 1; // Đặt cờ để báo hiệu sẵn sàng gửi
 8001b2c:	4b09      	ldr	r3, [pc, #36]	@ (8001b54 <HAL_UART_RxCpltCallback+0x6c>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	701a      	strb	r2, [r3, #0]
        }
        // Tiếp tục nhận ký tự tiếp theo
        HAL_UART_Receive_IT(&huart2, &u8_RxData, 1);
 8001b32:	2201      	movs	r2, #1
 8001b34:	4904      	ldr	r1, [pc, #16]	@ (8001b48 <HAL_UART_RxCpltCallback+0x60>)
 8001b36:	4808      	ldr	r0, [pc, #32]	@ (8001b58 <HAL_UART_RxCpltCallback+0x70>)
 8001b38:	f003 ff66 	bl	8005a08 <HAL_UART_Receive_IT>
    }
}
 8001b3c:	bf00      	nop
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40004400 	.word	0x40004400
 8001b48:	200003f1 	.word	0x200003f1
 8001b4c:	20000458 	.word	0x20000458
 8001b50:	200003f4 	.word	0x200003f4
 8001b54:	2000045a 	.word	0x2000045a
 8001b58:	20000318 	.word	0x20000318

08001b5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b5c:	b590      	push	{r4, r7, lr}
 8001b5e:	b089      	sub	sp, #36	@ 0x24
 8001b60:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b62:	f000 fd59 	bl	8002618 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b66:	f000 f879 	bl	8001c5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b6a:	f000 fa0d 	bl	8001f88 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001b6e:	f000 f90f 	bl	8001d90 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001b72:	f000 f93b 	bl	8001dec <MX_TIM1_Init>
  MX_ADC1_Init();
 8001b76:	f000 f8cd 	bl	8001d14 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001b7a:	f000 f987 	bl	8001e8c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001b7e:	f000 f9af 	bl	8001ee0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001b82:	f000 f9d7 	bl	8001f34 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &u8_RxData, 1);
 8001b86:	2201      	movs	r2, #1
 8001b88:	4928      	ldr	r1, [pc, #160]	@ (8001c2c <main+0xd0>)
 8001b8a:	4829      	ldr	r0, [pc, #164]	@ (8001c30 <main+0xd4>)
 8001b8c:	f003 ff3c 	bl	8005a08 <HAL_UART_Receive_IT>
  char init_message[] = "hello world\r\n";
 8001b90:	4b28      	ldr	r3, [pc, #160]	@ (8001c34 <main+0xd8>)
 8001b92:	f107 0408 	add.w	r4, r7, #8
 8001b96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b98:	c407      	stmia	r4!, {r0, r1, r2}
 8001b9a:	8023      	strh	r3, [r4, #0]
  HAL_UART_Transmit(&huart2, (uint8_t*)init_message, strlen(init_message), HAL_MAX_DELAY);
 8001b9c:	f107 0308 	add.w	r3, r7, #8
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7fe fadf 	bl	8000164 <strlen>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	f107 0108 	add.w	r1, r7, #8
 8001bae:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb2:	481f      	ldr	r0, [pc, #124]	@ (8001c30 <main+0xd4>)
 8001bb4:	f003 fe68 	bl	8005888 <HAL_UART_Transmit>
  //---------LCD---------//
  MyLCD_Init(&LCD1, &hi2c1, 0x4e, 16, 2);
 8001bb8:	2302      	movs	r3, #2
 8001bba:	9300      	str	r3, [sp, #0]
 8001bbc:	2310      	movs	r3, #16
 8001bbe:	224e      	movs	r2, #78	@ 0x4e
 8001bc0:	491d      	ldr	r1, [pc, #116]	@ (8001c38 <main+0xdc>)
 8001bc2:	481e      	ldr	r0, [pc, #120]	@ (8001c3c <main+0xe0>)
 8001bc4:	f7ff fb54 	bl	8001270 <MyLCD_Init>
  MyLCD_SetCursor(&LCD1, 0, 0);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	2100      	movs	r1, #0
 8001bcc:	481b      	ldr	r0, [pc, #108]	@ (8001c3c <main+0xe0>)
 8001bce:	f7ff fba3 	bl	8001318 <MyLCD_SetCursor>
  MyLCD_WriteString(&LCD1, "Test Sensor");
 8001bd2:	491b      	ldr	r1, [pc, #108]	@ (8001c40 <main+0xe4>)
 8001bd4:	4819      	ldr	r0, [pc, #100]	@ (8001c3c <main+0xe0>)
 8001bd6:	f7ff fbf5 	bl	80013c4 <MyLCD_WriteString>
  HAL_Delay(2000);
 8001bda:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001bde:	f000 fd7d 	bl	80026dc <HAL_Delay>
  // Initialize the DHT22 sensor with the timer
  DHT22_Init(&htim1);
 8001be2:	4818      	ldr	r0, [pc, #96]	@ (8001c44 <main+0xe8>)
 8001be4:	f7ff fc30 	bl	8001448 <DHT22_Init>
  //DS3231
  //DS3231_Init(&hi2c1);
  DS3231_TimeTypeDef currentTime;
  DS3231_GetTime(&hi2c1, &currentTime);
 8001be8:	463b      	mov	r3, r7
 8001bea:	4619      	mov	r1, r3
 8001bec:	4812      	ldr	r0, [pc, #72]	@ (8001c38 <main+0xdc>)
 8001bee:	f7ff fa59 	bl	80010a4 <DS3231_GetTime>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //Read Button
	  read_Button();
 8001bf2:	f7ff fdbf 	bl	8001774 <read_Button>
	  //DHT22
	  DHT22_ReadData(&temperature, &humidity);
 8001bf6:	4914      	ldr	r1, [pc, #80]	@ (8001c48 <main+0xec>)
 8001bf8:	4814      	ldr	r0, [pc, #80]	@ (8001c4c <main+0xf0>)
 8001bfa:	f7ff fd2d 	bl	8001658 <DHT22_ReadData>
	  //MQ7-MQ135
	  read_mq7mq135(&mq7_value, &mq135_value);
 8001bfe:	4914      	ldr	r1, [pc, #80]	@ (8001c50 <main+0xf4>)
 8001c00:	4814      	ldr	r0, [pc, #80]	@ (8001c54 <main+0xf8>)
 8001c02:	f7ff fdef 	bl	80017e4 <read_mq7mq135>
	  //lcd read
	  lcd_read_sensor();
 8001c06:	f7ff fe5d 	bl	80018c4 <lcd_read_sensor>
	  //uar read
	  uart_read_sensor();
 8001c0a:	f7ff fed1 	bl	80019b0 <uart_read_sensor>

	  MyLCD_SetCursor(&LCD1, 0, 0);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2100      	movs	r1, #0
 8001c12:	480a      	ldr	r0, [pc, #40]	@ (8001c3c <main+0xe0>)
 8001c14:	f7ff fb80 	bl	8001318 <MyLCD_SetCursor>
	  MyLCD_WriteString(&LCD1, temp_str);
 8001c18:	490f      	ldr	r1, [pc, #60]	@ (8001c58 <main+0xfc>)
 8001c1a:	4808      	ldr	r0, [pc, #32]	@ (8001c3c <main+0xe0>)
 8001c1c:	f7ff fbd2 	bl	80013c4 <MyLCD_WriteString>
	  HAL_Delay(100);
 8001c20:	2064      	movs	r0, #100	@ 0x64
 8001c22:	f000 fd5b 	bl	80026dc <HAL_Delay>
	  read_Button();
 8001c26:	bf00      	nop
 8001c28:	e7e3      	b.n	8001bf2 <main+0x96>
 8001c2a:	bf00      	nop
 8001c2c:	200003f1 	.word	0x200003f1
 8001c30:	20000318 	.word	0x20000318
 8001c34:	0800acc4 	.word	0x0800acc4
 8001c38:	20000234 	.word	0x20000234
 8001c3c:	200003a8 	.word	0x200003a8
 8001c40:	0800acb8 	.word	0x0800acb8
 8001c44:	20000288 	.word	0x20000288
 8001c48:	200003e4 	.word	0x200003e4
 8001c4c:	200003e0 	.word	0x200003e0
 8001c50:	200003ec 	.word	0x200003ec
 8001c54:	200003e8 	.word	0x200003e8
 8001c58:	200003b8 	.word	0x200003b8

08001c5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b094      	sub	sp, #80	@ 0x50
 8001c60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c62:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c66:	2228      	movs	r2, #40	@ 0x28
 8001c68:	2100      	movs	r1, #0
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f005 fbed 	bl	800744a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c80:	1d3b      	adds	r3, r7, #4
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	605a      	str	r2, [r3, #4]
 8001c88:	609a      	str	r2, [r3, #8]
 8001c8a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c90:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001c96:	2300      	movs	r3, #0
 8001c98:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ca2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ca6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001ca8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001cac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f002 fd58 	bl	8004768 <HAL_RCC_OscConfig>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001cbe:	f000 f9dd 	bl	800207c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cc2:	230f      	movs	r3, #15
 8001cc4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001cd2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001cd8:	f107 0314 	add.w	r3, r7, #20
 8001cdc:	2102      	movs	r1, #2
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f002 ffc4 	bl	8004c6c <HAL_RCC_ClockConfig>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001cea:	f000 f9c7 	bl	800207c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001cf2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001cf6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cf8:	1d3b      	adds	r3, r7, #4
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f003 f944 	bl	8004f88 <HAL_RCCEx_PeriphCLKConfig>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001d06:	f000 f9b9 	bl	800207c <Error_Handler>
  }
}
 8001d0a:	bf00      	nop
 8001d0c:	3750      	adds	r7, #80	@ 0x50
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
	...

08001d14 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d1a:	1d3b      	adds	r3, r7, #4
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001d24:	4b18      	ldr	r3, [pc, #96]	@ (8001d88 <MX_ADC1_Init+0x74>)
 8001d26:	4a19      	ldr	r2, [pc, #100]	@ (8001d8c <MX_ADC1_Init+0x78>)
 8001d28:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d2a:	4b17      	ldr	r3, [pc, #92]	@ (8001d88 <MX_ADC1_Init+0x74>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001d30:	4b15      	ldr	r3, [pc, #84]	@ (8001d88 <MX_ADC1_Init+0x74>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d36:	4b14      	ldr	r3, [pc, #80]	@ (8001d88 <MX_ADC1_Init+0x74>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d3c:	4b12      	ldr	r3, [pc, #72]	@ (8001d88 <MX_ADC1_Init+0x74>)
 8001d3e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001d42:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d44:	4b10      	ldr	r3, [pc, #64]	@ (8001d88 <MX_ADC1_Init+0x74>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001d4a:	4b0f      	ldr	r3, [pc, #60]	@ (8001d88 <MX_ADC1_Init+0x74>)
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d50:	480d      	ldr	r0, [pc, #52]	@ (8001d88 <MX_ADC1_Init+0x74>)
 8001d52:	f000 fce7 	bl	8002724 <HAL_ADC_Init>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001d5c:	f000 f98e 	bl	800207c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001d60:	2300      	movs	r3, #0
 8001d62:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d64:	2301      	movs	r3, #1
 8001d66:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d6c:	1d3b      	adds	r3, r7, #4
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4805      	ldr	r0, [pc, #20]	@ (8001d88 <MX_ADC1_Init+0x74>)
 8001d72:	f000 ff9b 	bl	8002cac <HAL_ADC_ConfigChannel>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001d7c:	f000 f97e 	bl	800207c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d80:	bf00      	nop
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	20000204 	.word	0x20000204
 8001d8c:	40012400 	.word	0x40012400

08001d90 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d94:	4b12      	ldr	r3, [pc, #72]	@ (8001de0 <MX_I2C1_Init+0x50>)
 8001d96:	4a13      	ldr	r2, [pc, #76]	@ (8001de4 <MX_I2C1_Init+0x54>)
 8001d98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001d9a:	4b11      	ldr	r3, [pc, #68]	@ (8001de0 <MX_I2C1_Init+0x50>)
 8001d9c:	4a12      	ldr	r2, [pc, #72]	@ (8001de8 <MX_I2C1_Init+0x58>)
 8001d9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001da0:	4b0f      	ldr	r3, [pc, #60]	@ (8001de0 <MX_I2C1_Init+0x50>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001da6:	4b0e      	ldr	r3, [pc, #56]	@ (8001de0 <MX_I2C1_Init+0x50>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dac:	4b0c      	ldr	r3, [pc, #48]	@ (8001de0 <MX_I2C1_Init+0x50>)
 8001dae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001db2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001db4:	4b0a      	ldr	r3, [pc, #40]	@ (8001de0 <MX_I2C1_Init+0x50>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001dba:	4b09      	ldr	r3, [pc, #36]	@ (8001de0 <MX_I2C1_Init+0x50>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dc0:	4b07      	ldr	r3, [pc, #28]	@ (8001de0 <MX_I2C1_Init+0x50>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dc6:	4b06      	ldr	r3, [pc, #24]	@ (8001de0 <MX_I2C1_Init+0x50>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001dcc:	4804      	ldr	r0, [pc, #16]	@ (8001de0 <MX_I2C1_Init+0x50>)
 8001dce:	f001 fc75 	bl	80036bc <HAL_I2C_Init>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001dd8:	f000 f950 	bl	800207c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ddc:	bf00      	nop
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20000234 	.word	0x20000234
 8001de4:	40005400 	.word	0x40005400
 8001de8:	00061a80 	.word	0x00061a80

08001dec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001df2:	f107 0308 	add.w	r3, r7, #8
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	605a      	str	r2, [r3, #4]
 8001dfc:	609a      	str	r2, [r3, #8]
 8001dfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e00:	463b      	mov	r3, r7
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e08:	4b1e      	ldr	r3, [pc, #120]	@ (8001e84 <MX_TIM1_Init+0x98>)
 8001e0a:	4a1f      	ldr	r2, [pc, #124]	@ (8001e88 <MX_TIM1_Init+0x9c>)
 8001e0c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001e0e:	4b1d      	ldr	r3, [pc, #116]	@ (8001e84 <MX_TIM1_Init+0x98>)
 8001e10:	2247      	movs	r2, #71	@ 0x47
 8001e12:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e14:	4b1b      	ldr	r3, [pc, #108]	@ (8001e84 <MX_TIM1_Init+0x98>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001e1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001e84 <MX_TIM1_Init+0x98>)
 8001e1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e20:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e22:	4b18      	ldr	r3, [pc, #96]	@ (8001e84 <MX_TIM1_Init+0x98>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e28:	4b16      	ldr	r3, [pc, #88]	@ (8001e84 <MX_TIM1_Init+0x98>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e2e:	4b15      	ldr	r3, [pc, #84]	@ (8001e84 <MX_TIM1_Init+0x98>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e34:	4813      	ldr	r0, [pc, #76]	@ (8001e84 <MX_TIM1_Init+0x98>)
 8001e36:	f003 fa13 	bl	8005260 <HAL_TIM_Base_Init>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001e40:	f000 f91c 	bl	800207c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e4a:	f107 0308 	add.w	r3, r7, #8
 8001e4e:	4619      	mov	r1, r3
 8001e50:	480c      	ldr	r0, [pc, #48]	@ (8001e84 <MX_TIM1_Init+0x98>)
 8001e52:	f003 fa9f 	bl	8005394 <HAL_TIM_ConfigClockSource>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001e5c:	f000 f90e 	bl	800207c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e60:	2300      	movs	r3, #0
 8001e62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e64:	2300      	movs	r3, #0
 8001e66:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e68:	463b      	mov	r3, r7
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4805      	ldr	r0, [pc, #20]	@ (8001e84 <MX_TIM1_Init+0x98>)
 8001e6e:	f003 fc5d 	bl	800572c <HAL_TIMEx_MasterConfigSynchronization>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001e78:	f000 f900 	bl	800207c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001e7c:	bf00      	nop
 8001e7e:	3718      	adds	r7, #24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20000288 	.word	0x20000288
 8001e88:	40012c00 	.word	0x40012c00

08001e8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e90:	4b11      	ldr	r3, [pc, #68]	@ (8001ed8 <MX_USART1_UART_Init+0x4c>)
 8001e92:	4a12      	ldr	r2, [pc, #72]	@ (8001edc <MX_USART1_UART_Init+0x50>)
 8001e94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e96:	4b10      	ldr	r3, [pc, #64]	@ (8001ed8 <MX_USART1_UART_Init+0x4c>)
 8001e98:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed8 <MX_USART1_UART_Init+0x4c>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed8 <MX_USART1_UART_Init+0x4c>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed8 <MX_USART1_UART_Init+0x4c>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001eb0:	4b09      	ldr	r3, [pc, #36]	@ (8001ed8 <MX_USART1_UART_Init+0x4c>)
 8001eb2:	220c      	movs	r2, #12
 8001eb4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eb6:	4b08      	ldr	r3, [pc, #32]	@ (8001ed8 <MX_USART1_UART_Init+0x4c>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ebc:	4b06      	ldr	r3, [pc, #24]	@ (8001ed8 <MX_USART1_UART_Init+0x4c>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ec2:	4805      	ldr	r0, [pc, #20]	@ (8001ed8 <MX_USART1_UART_Init+0x4c>)
 8001ec4:	f003 fc90 	bl	80057e8 <HAL_UART_Init>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ece:	f000 f8d5 	bl	800207c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	200002d0 	.word	0x200002d0
 8001edc:	40013800 	.word	0x40013800

08001ee0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ee4:	4b11      	ldr	r3, [pc, #68]	@ (8001f2c <MX_USART2_UART_Init+0x4c>)
 8001ee6:	4a12      	ldr	r2, [pc, #72]	@ (8001f30 <MX_USART2_UART_Init+0x50>)
 8001ee8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001eea:	4b10      	ldr	r3, [pc, #64]	@ (8001f2c <MX_USART2_UART_Init+0x4c>)
 8001eec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ef0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8001f2c <MX_USART2_UART_Init+0x4c>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8001f2c <MX_USART2_UART_Init+0x4c>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001efe:	4b0b      	ldr	r3, [pc, #44]	@ (8001f2c <MX_USART2_UART_Init+0x4c>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f04:	4b09      	ldr	r3, [pc, #36]	@ (8001f2c <MX_USART2_UART_Init+0x4c>)
 8001f06:	220c      	movs	r2, #12
 8001f08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f0a:	4b08      	ldr	r3, [pc, #32]	@ (8001f2c <MX_USART2_UART_Init+0x4c>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f10:	4b06      	ldr	r3, [pc, #24]	@ (8001f2c <MX_USART2_UART_Init+0x4c>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f16:	4805      	ldr	r0, [pc, #20]	@ (8001f2c <MX_USART2_UART_Init+0x4c>)
 8001f18:	f003 fc66 	bl	80057e8 <HAL_UART_Init>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f22:	f000 f8ab 	bl	800207c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20000318 	.word	0x20000318
 8001f30:	40004400 	.word	0x40004400

08001f34 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f38:	4b11      	ldr	r3, [pc, #68]	@ (8001f80 <MX_USART3_UART_Init+0x4c>)
 8001f3a:	4a12      	ldr	r2, [pc, #72]	@ (8001f84 <MX_USART3_UART_Init+0x50>)
 8001f3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f3e:	4b10      	ldr	r3, [pc, #64]	@ (8001f80 <MX_USART3_UART_Init+0x4c>)
 8001f40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f46:	4b0e      	ldr	r3, [pc, #56]	@ (8001f80 <MX_USART3_UART_Init+0x4c>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f80 <MX_USART3_UART_Init+0x4c>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f52:	4b0b      	ldr	r3, [pc, #44]	@ (8001f80 <MX_USART3_UART_Init+0x4c>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f58:	4b09      	ldr	r3, [pc, #36]	@ (8001f80 <MX_USART3_UART_Init+0x4c>)
 8001f5a:	220c      	movs	r2, #12
 8001f5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f5e:	4b08      	ldr	r3, [pc, #32]	@ (8001f80 <MX_USART3_UART_Init+0x4c>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f64:	4b06      	ldr	r3, [pc, #24]	@ (8001f80 <MX_USART3_UART_Init+0x4c>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f6a:	4805      	ldr	r0, [pc, #20]	@ (8001f80 <MX_USART3_UART_Init+0x4c>)
 8001f6c:	f003 fc3c 	bl	80057e8 <HAL_UART_Init>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001f76:	f000 f881 	bl	800207c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000360 	.word	0x20000360
 8001f84:	40004800 	.word	0x40004800

08001f88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b088      	sub	sp, #32
 8001f8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8e:	f107 0310 	add.w	r3, r7, #16
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	605a      	str	r2, [r3, #4]
 8001f98:	609a      	str	r2, [r3, #8]
 8001f9a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f9c:	4b34      	ldr	r3, [pc, #208]	@ (8002070 <MX_GPIO_Init+0xe8>)
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	4a33      	ldr	r2, [pc, #204]	@ (8002070 <MX_GPIO_Init+0xe8>)
 8001fa2:	f043 0310 	orr.w	r3, r3, #16
 8001fa6:	6193      	str	r3, [r2, #24]
 8001fa8:	4b31      	ldr	r3, [pc, #196]	@ (8002070 <MX_GPIO_Init+0xe8>)
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	f003 0310 	and.w	r3, r3, #16
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fb4:	4b2e      	ldr	r3, [pc, #184]	@ (8002070 <MX_GPIO_Init+0xe8>)
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	4a2d      	ldr	r2, [pc, #180]	@ (8002070 <MX_GPIO_Init+0xe8>)
 8001fba:	f043 0320 	orr.w	r3, r3, #32
 8001fbe:	6193      	str	r3, [r2, #24]
 8001fc0:	4b2b      	ldr	r3, [pc, #172]	@ (8002070 <MX_GPIO_Init+0xe8>)
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	f003 0320 	and.w	r3, r3, #32
 8001fc8:	60bb      	str	r3, [r7, #8]
 8001fca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fcc:	4b28      	ldr	r3, [pc, #160]	@ (8002070 <MX_GPIO_Init+0xe8>)
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	4a27      	ldr	r2, [pc, #156]	@ (8002070 <MX_GPIO_Init+0xe8>)
 8001fd2:	f043 0304 	orr.w	r3, r3, #4
 8001fd6:	6193      	str	r3, [r2, #24]
 8001fd8:	4b25      	ldr	r3, [pc, #148]	@ (8002070 <MX_GPIO_Init+0xe8>)
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	607b      	str	r3, [r7, #4]
 8001fe2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe4:	4b22      	ldr	r3, [pc, #136]	@ (8002070 <MX_GPIO_Init+0xe8>)
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	4a21      	ldr	r2, [pc, #132]	@ (8002070 <MX_GPIO_Init+0xe8>)
 8001fea:	f043 0308 	orr.w	r3, r3, #8
 8001fee:	6193      	str	r3, [r2, #24]
 8001ff0:	4b1f      	ldr	r3, [pc, #124]	@ (8002070 <MX_GPIO_Init+0xe8>)
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	f003 0308 	and.w	r3, r3, #8
 8001ff8:	603b      	str	r3, [r7, #0]
 8001ffa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002002:	481c      	ldr	r0, [pc, #112]	@ (8002074 <MX_GPIO_Init+0xec>)
 8002004:	f001 fb41 	bl	800368a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8002008:	2200      	movs	r2, #0
 800200a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800200e:	481a      	ldr	r0, [pc, #104]	@ (8002078 <MX_GPIO_Init+0xf0>)
 8002010:	f001 fb3b 	bl	800368a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002014:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002018:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800201a:	2301      	movs	r3, #1
 800201c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201e:	2300      	movs	r3, #0
 8002020:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002022:	2302      	movs	r3, #2
 8002024:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002026:	f107 0310 	add.w	r3, r7, #16
 800202a:	4619      	mov	r1, r3
 800202c:	4811      	ldr	r0, [pc, #68]	@ (8002074 <MX_GPIO_Init+0xec>)
 800202e:	f001 f991 	bl	8003354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002032:	2302      	movs	r3, #2
 8002034:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002036:	2300      	movs	r3, #0
 8002038:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800203e:	f107 0310 	add.w	r3, r7, #16
 8002042:	4619      	mov	r1, r3
 8002044:	480c      	ldr	r0, [pc, #48]	@ (8002078 <MX_GPIO_Init+0xf0>)
 8002046:	f001 f985 	bl	8003354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800204a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800204e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002050:	2301      	movs	r3, #1
 8002052:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002058:	2302      	movs	r3, #2
 800205a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800205c:	f107 0310 	add.w	r3, r7, #16
 8002060:	4619      	mov	r1, r3
 8002062:	4805      	ldr	r0, [pc, #20]	@ (8002078 <MX_GPIO_Init+0xf0>)
 8002064:	f001 f976 	bl	8003354 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002068:	bf00      	nop
 800206a:	3720      	adds	r7, #32
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40021000 	.word	0x40021000
 8002074:	40011000 	.word	0x40011000
 8002078:	40010c00 	.word	0x40010c00

0800207c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002080:	b672      	cpsid	i
}
 8002082:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002084:	bf00      	nop
 8002086:	e7fd      	b.n	8002084 <Error_Handler+0x8>

08002088 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800208e:	4b15      	ldr	r3, [pc, #84]	@ (80020e4 <HAL_MspInit+0x5c>)
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	4a14      	ldr	r2, [pc, #80]	@ (80020e4 <HAL_MspInit+0x5c>)
 8002094:	f043 0301 	orr.w	r3, r3, #1
 8002098:	6193      	str	r3, [r2, #24]
 800209a:	4b12      	ldr	r3, [pc, #72]	@ (80020e4 <HAL_MspInit+0x5c>)
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	60bb      	str	r3, [r7, #8]
 80020a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020a6:	4b0f      	ldr	r3, [pc, #60]	@ (80020e4 <HAL_MspInit+0x5c>)
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	4a0e      	ldr	r2, [pc, #56]	@ (80020e4 <HAL_MspInit+0x5c>)
 80020ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020b0:	61d3      	str	r3, [r2, #28]
 80020b2:	4b0c      	ldr	r3, [pc, #48]	@ (80020e4 <HAL_MspInit+0x5c>)
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ba:	607b      	str	r3, [r7, #4]
 80020bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80020be:	4b0a      	ldr	r3, [pc, #40]	@ (80020e8 <HAL_MspInit+0x60>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	4a04      	ldr	r2, [pc, #16]	@ (80020e8 <HAL_MspInit+0x60>)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020da:	bf00      	nop
 80020dc:	3714      	adds	r7, #20
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr
 80020e4:	40021000 	.word	0x40021000
 80020e8:	40010000 	.word	0x40010000

080020ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b088      	sub	sp, #32
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f4:	f107 0310 	add.w	r3, r7, #16
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	609a      	str	r2, [r3, #8]
 8002100:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a14      	ldr	r2, [pc, #80]	@ (8002158 <HAL_ADC_MspInit+0x6c>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d121      	bne.n	8002150 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800210c:	4b13      	ldr	r3, [pc, #76]	@ (800215c <HAL_ADC_MspInit+0x70>)
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	4a12      	ldr	r2, [pc, #72]	@ (800215c <HAL_ADC_MspInit+0x70>)
 8002112:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002116:	6193      	str	r3, [r2, #24]
 8002118:	4b10      	ldr	r3, [pc, #64]	@ (800215c <HAL_ADC_MspInit+0x70>)
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002124:	4b0d      	ldr	r3, [pc, #52]	@ (800215c <HAL_ADC_MspInit+0x70>)
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	4a0c      	ldr	r2, [pc, #48]	@ (800215c <HAL_ADC_MspInit+0x70>)
 800212a:	f043 0304 	orr.w	r3, r3, #4
 800212e:	6193      	str	r3, [r2, #24]
 8002130:	4b0a      	ldr	r3, [pc, #40]	@ (800215c <HAL_ADC_MspInit+0x70>)
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	f003 0304 	and.w	r3, r3, #4
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800213c:	2303      	movs	r3, #3
 800213e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002140:	2303      	movs	r3, #3
 8002142:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002144:	f107 0310 	add.w	r3, r7, #16
 8002148:	4619      	mov	r1, r3
 800214a:	4805      	ldr	r0, [pc, #20]	@ (8002160 <HAL_ADC_MspInit+0x74>)
 800214c:	f001 f902 	bl	8003354 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002150:	bf00      	nop
 8002152:	3720      	adds	r7, #32
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40012400 	.word	0x40012400
 800215c:	40021000 	.word	0x40021000
 8002160:	40010800 	.word	0x40010800

08002164 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b088      	sub	sp, #32
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216c:	f107 0310 	add.w	r3, r7, #16
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a15      	ldr	r2, [pc, #84]	@ (80021d4 <HAL_I2C_MspInit+0x70>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d123      	bne.n	80021cc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002184:	4b14      	ldr	r3, [pc, #80]	@ (80021d8 <HAL_I2C_MspInit+0x74>)
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	4a13      	ldr	r2, [pc, #76]	@ (80021d8 <HAL_I2C_MspInit+0x74>)
 800218a:	f043 0308 	orr.w	r3, r3, #8
 800218e:	6193      	str	r3, [r2, #24]
 8002190:	4b11      	ldr	r3, [pc, #68]	@ (80021d8 <HAL_I2C_MspInit+0x74>)
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	f003 0308 	and.w	r3, r3, #8
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800219c:	23c0      	movs	r3, #192	@ 0xc0
 800219e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021a0:	2312      	movs	r3, #18
 80021a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021a4:	2303      	movs	r3, #3
 80021a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a8:	f107 0310 	add.w	r3, r7, #16
 80021ac:	4619      	mov	r1, r3
 80021ae:	480b      	ldr	r0, [pc, #44]	@ (80021dc <HAL_I2C_MspInit+0x78>)
 80021b0:	f001 f8d0 	bl	8003354 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021b4:	4b08      	ldr	r3, [pc, #32]	@ (80021d8 <HAL_I2C_MspInit+0x74>)
 80021b6:	69db      	ldr	r3, [r3, #28]
 80021b8:	4a07      	ldr	r2, [pc, #28]	@ (80021d8 <HAL_I2C_MspInit+0x74>)
 80021ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80021be:	61d3      	str	r3, [r2, #28]
 80021c0:	4b05      	ldr	r3, [pc, #20]	@ (80021d8 <HAL_I2C_MspInit+0x74>)
 80021c2:	69db      	ldr	r3, [r3, #28]
 80021c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80021cc:	bf00      	nop
 80021ce:	3720      	adds	r7, #32
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40005400 	.word	0x40005400
 80021d8:	40021000 	.word	0x40021000
 80021dc:	40010c00 	.word	0x40010c00

080021e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a09      	ldr	r2, [pc, #36]	@ (8002214 <HAL_TIM_Base_MspInit+0x34>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d10b      	bne.n	800220a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021f2:	4b09      	ldr	r3, [pc, #36]	@ (8002218 <HAL_TIM_Base_MspInit+0x38>)
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	4a08      	ldr	r2, [pc, #32]	@ (8002218 <HAL_TIM_Base_MspInit+0x38>)
 80021f8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80021fc:	6193      	str	r3, [r2, #24]
 80021fe:	4b06      	ldr	r3, [pc, #24]	@ (8002218 <HAL_TIM_Base_MspInit+0x38>)
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800220a:	bf00      	nop
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr
 8002214:	40012c00 	.word	0x40012c00
 8002218:	40021000 	.word	0x40021000

0800221c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b08c      	sub	sp, #48	@ 0x30
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002224:	f107 0320 	add.w	r3, r7, #32
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a5b      	ldr	r2, [pc, #364]	@ (80023a4 <HAL_UART_MspInit+0x188>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d13a      	bne.n	80022b2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800223c:	4b5a      	ldr	r3, [pc, #360]	@ (80023a8 <HAL_UART_MspInit+0x18c>)
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	4a59      	ldr	r2, [pc, #356]	@ (80023a8 <HAL_UART_MspInit+0x18c>)
 8002242:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002246:	6193      	str	r3, [r2, #24]
 8002248:	4b57      	ldr	r3, [pc, #348]	@ (80023a8 <HAL_UART_MspInit+0x18c>)
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002250:	61fb      	str	r3, [r7, #28]
 8002252:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002254:	4b54      	ldr	r3, [pc, #336]	@ (80023a8 <HAL_UART_MspInit+0x18c>)
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	4a53      	ldr	r2, [pc, #332]	@ (80023a8 <HAL_UART_MspInit+0x18c>)
 800225a:	f043 0304 	orr.w	r3, r3, #4
 800225e:	6193      	str	r3, [r2, #24]
 8002260:	4b51      	ldr	r3, [pc, #324]	@ (80023a8 <HAL_UART_MspInit+0x18c>)
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	61bb      	str	r3, [r7, #24]
 800226a:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800226c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002272:	2302      	movs	r3, #2
 8002274:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002276:	2303      	movs	r3, #3
 8002278:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800227a:	f107 0320 	add.w	r3, r7, #32
 800227e:	4619      	mov	r1, r3
 8002280:	484a      	ldr	r0, [pc, #296]	@ (80023ac <HAL_UART_MspInit+0x190>)
 8002282:	f001 f867 	bl	8003354 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002286:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800228a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800228c:	2300      	movs	r3, #0
 800228e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002294:	f107 0320 	add.w	r3, r7, #32
 8002298:	4619      	mov	r1, r3
 800229a:	4844      	ldr	r0, [pc, #272]	@ (80023ac <HAL_UART_MspInit+0x190>)
 800229c:	f001 f85a 	bl	8003354 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80022a0:	2200      	movs	r2, #0
 80022a2:	2100      	movs	r1, #0
 80022a4:	2025      	movs	r0, #37	@ 0x25
 80022a6:	f000 ff6c 	bl	8003182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022aa:	2025      	movs	r0, #37	@ 0x25
 80022ac:	f000 ff85 	bl	80031ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80022b0:	e074      	b.n	800239c <HAL_UART_MspInit+0x180>
  else if(huart->Instance==USART2)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a3e      	ldr	r2, [pc, #248]	@ (80023b0 <HAL_UART_MspInit+0x194>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d138      	bne.n	800232e <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 80022bc:	4b3a      	ldr	r3, [pc, #232]	@ (80023a8 <HAL_UART_MspInit+0x18c>)
 80022be:	69db      	ldr	r3, [r3, #28]
 80022c0:	4a39      	ldr	r2, [pc, #228]	@ (80023a8 <HAL_UART_MspInit+0x18c>)
 80022c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022c6:	61d3      	str	r3, [r2, #28]
 80022c8:	4b37      	ldr	r3, [pc, #220]	@ (80023a8 <HAL_UART_MspInit+0x18c>)
 80022ca:	69db      	ldr	r3, [r3, #28]
 80022cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022d0:	617b      	str	r3, [r7, #20]
 80022d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d4:	4b34      	ldr	r3, [pc, #208]	@ (80023a8 <HAL_UART_MspInit+0x18c>)
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	4a33      	ldr	r2, [pc, #204]	@ (80023a8 <HAL_UART_MspInit+0x18c>)
 80022da:	f043 0304 	orr.w	r3, r3, #4
 80022de:	6193      	str	r3, [r2, #24]
 80022e0:	4b31      	ldr	r3, [pc, #196]	@ (80023a8 <HAL_UART_MspInit+0x18c>)
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	613b      	str	r3, [r7, #16]
 80022ea:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80022ec:	2304      	movs	r3, #4
 80022ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f0:	2302      	movs	r3, #2
 80022f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022f4:	2303      	movs	r3, #3
 80022f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f8:	f107 0320 	add.w	r3, r7, #32
 80022fc:	4619      	mov	r1, r3
 80022fe:	482b      	ldr	r0, [pc, #172]	@ (80023ac <HAL_UART_MspInit+0x190>)
 8002300:	f001 f828 	bl	8003354 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002304:	2308      	movs	r3, #8
 8002306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002308:	2300      	movs	r3, #0
 800230a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230c:	2300      	movs	r3, #0
 800230e:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002310:	f107 0320 	add.w	r3, r7, #32
 8002314:	4619      	mov	r1, r3
 8002316:	4825      	ldr	r0, [pc, #148]	@ (80023ac <HAL_UART_MspInit+0x190>)
 8002318:	f001 f81c 	bl	8003354 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800231c:	2200      	movs	r2, #0
 800231e:	2100      	movs	r1, #0
 8002320:	2026      	movs	r0, #38	@ 0x26
 8002322:	f000 ff2e 	bl	8003182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002326:	2026      	movs	r0, #38	@ 0x26
 8002328:	f000 ff47 	bl	80031ba <HAL_NVIC_EnableIRQ>
}
 800232c:	e036      	b.n	800239c <HAL_UART_MspInit+0x180>
  else if(huart->Instance==USART3)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a20      	ldr	r2, [pc, #128]	@ (80023b4 <HAL_UART_MspInit+0x198>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d131      	bne.n	800239c <HAL_UART_MspInit+0x180>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002338:	4b1b      	ldr	r3, [pc, #108]	@ (80023a8 <HAL_UART_MspInit+0x18c>)
 800233a:	69db      	ldr	r3, [r3, #28]
 800233c:	4a1a      	ldr	r2, [pc, #104]	@ (80023a8 <HAL_UART_MspInit+0x18c>)
 800233e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002342:	61d3      	str	r3, [r2, #28]
 8002344:	4b18      	ldr	r3, [pc, #96]	@ (80023a8 <HAL_UART_MspInit+0x18c>)
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800234c:	60fb      	str	r3, [r7, #12]
 800234e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002350:	4b15      	ldr	r3, [pc, #84]	@ (80023a8 <HAL_UART_MspInit+0x18c>)
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	4a14      	ldr	r2, [pc, #80]	@ (80023a8 <HAL_UART_MspInit+0x18c>)
 8002356:	f043 0308 	orr.w	r3, r3, #8
 800235a:	6193      	str	r3, [r2, #24]
 800235c:	4b12      	ldr	r3, [pc, #72]	@ (80023a8 <HAL_UART_MspInit+0x18c>)
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	f003 0308 	and.w	r3, r3, #8
 8002364:	60bb      	str	r3, [r7, #8]
 8002366:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002368:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800236c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236e:	2302      	movs	r3, #2
 8002370:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002372:	2303      	movs	r3, #3
 8002374:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002376:	f107 0320 	add.w	r3, r7, #32
 800237a:	4619      	mov	r1, r3
 800237c:	480e      	ldr	r0, [pc, #56]	@ (80023b8 <HAL_UART_MspInit+0x19c>)
 800237e:	f000 ffe9 	bl	8003354 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002382:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002386:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002388:	2300      	movs	r3, #0
 800238a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238c:	2300      	movs	r3, #0
 800238e:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002390:	f107 0320 	add.w	r3, r7, #32
 8002394:	4619      	mov	r1, r3
 8002396:	4808      	ldr	r0, [pc, #32]	@ (80023b8 <HAL_UART_MspInit+0x19c>)
 8002398:	f000 ffdc 	bl	8003354 <HAL_GPIO_Init>
}
 800239c:	bf00      	nop
 800239e:	3730      	adds	r7, #48	@ 0x30
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40013800 	.word	0x40013800
 80023a8:	40021000 	.word	0x40021000
 80023ac:	40010800 	.word	0x40010800
 80023b0:	40004400 	.word	0x40004400
 80023b4:	40004800 	.word	0x40004800
 80023b8:	40010c00 	.word	0x40010c00

080023bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023c0:	bf00      	nop
 80023c2:	e7fd      	b.n	80023c0 <NMI_Handler+0x4>

080023c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023c8:	bf00      	nop
 80023ca:	e7fd      	b.n	80023c8 <HardFault_Handler+0x4>

080023cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023d0:	bf00      	nop
 80023d2:	e7fd      	b.n	80023d0 <MemManage_Handler+0x4>

080023d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023d8:	bf00      	nop
 80023da:	e7fd      	b.n	80023d8 <BusFault_Handler+0x4>

080023dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023e0:	bf00      	nop
 80023e2:	e7fd      	b.n	80023e0 <UsageFault_Handler+0x4>

080023e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023e8:	bf00      	nop
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr

080023f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023f4:	bf00      	nop
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bc80      	pop	{r7}
 80023fa:	4770      	bx	lr

080023fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002400:	bf00      	nop
 8002402:	46bd      	mov	sp, r7
 8002404:	bc80      	pop	{r7}
 8002406:	4770      	bx	lr

08002408 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800240c:	f000 f94a 	bl	80026a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002410:	bf00      	nop
 8002412:	bd80      	pop	{r7, pc}

08002414 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002418:	4802      	ldr	r0, [pc, #8]	@ (8002424 <USART1_IRQHandler+0x10>)
 800241a:	f003 fb1b 	bl	8005a54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800241e:	bf00      	nop
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	200002d0 	.word	0x200002d0

08002428 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800242c:	4802      	ldr	r0, [pc, #8]	@ (8002438 <USART2_IRQHandler+0x10>)
 800242e:	f003 fb11 	bl	8005a54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	20000318 	.word	0x20000318

0800243c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  return 1;
 8002440:	2301      	movs	r3, #1
}
 8002442:	4618      	mov	r0, r3
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr

0800244a <_kill>:

int _kill(int pid, int sig)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b082      	sub	sp, #8
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
 8002452:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002454:	f005 f84c 	bl	80074f0 <__errno>
 8002458:	4603      	mov	r3, r0
 800245a:	2216      	movs	r2, #22
 800245c:	601a      	str	r2, [r3, #0]
  return -1;
 800245e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002462:	4618      	mov	r0, r3
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <_exit>:

void _exit (int status)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b082      	sub	sp, #8
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002472:	f04f 31ff 	mov.w	r1, #4294967295
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7ff ffe7 	bl	800244a <_kill>
  while (1) {}    /* Make sure we hang here */
 800247c:	bf00      	nop
 800247e:	e7fd      	b.n	800247c <_exit+0x12>

08002480 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800248c:	2300      	movs	r3, #0
 800248e:	617b      	str	r3, [r7, #20]
 8002490:	e00a      	b.n	80024a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002492:	f3af 8000 	nop.w
 8002496:	4601      	mov	r1, r0
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	1c5a      	adds	r2, r3, #1
 800249c:	60ba      	str	r2, [r7, #8]
 800249e:	b2ca      	uxtb	r2, r1
 80024a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	3301      	adds	r3, #1
 80024a6:	617b      	str	r3, [r7, #20]
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	dbf0      	blt.n	8002492 <_read+0x12>
  }

  return len;
 80024b0:	687b      	ldr	r3, [r7, #4]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3718      	adds	r7, #24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b086      	sub	sp, #24
 80024be:	af00      	add	r7, sp, #0
 80024c0:	60f8      	str	r0, [r7, #12]
 80024c2:	60b9      	str	r1, [r7, #8]
 80024c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024c6:	2300      	movs	r3, #0
 80024c8:	617b      	str	r3, [r7, #20]
 80024ca:	e009      	b.n	80024e0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	1c5a      	adds	r2, r3, #1
 80024d0:	60ba      	str	r2, [r7, #8]
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	3301      	adds	r3, #1
 80024de:	617b      	str	r3, [r7, #20]
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	dbf1      	blt.n	80024cc <_write+0x12>
  }
  return len;
 80024e8:	687b      	ldr	r3, [r7, #4]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <_close>:

int _close(int file)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024fe:	4618      	mov	r0, r3
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	bc80      	pop	{r7}
 8002506:	4770      	bx	lr

08002508 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002518:	605a      	str	r2, [r3, #4]
  return 0;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr

08002526 <_isatty>:

int _isatty(int file)
{
 8002526:	b480      	push	{r7}
 8002528:	b083      	sub	sp, #12
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800252e:	2301      	movs	r3, #1
}
 8002530:	4618      	mov	r0, r3
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	bc80      	pop	{r7}
 8002538:	4770      	bx	lr

0800253a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800253a:	b480      	push	{r7}
 800253c:	b085      	sub	sp, #20
 800253e:	af00      	add	r7, sp, #0
 8002540:	60f8      	str	r0, [r7, #12]
 8002542:	60b9      	str	r1, [r7, #8]
 8002544:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3714      	adds	r7, #20
 800254c:	46bd      	mov	sp, r7
 800254e:	bc80      	pop	{r7}
 8002550:	4770      	bx	lr
	...

08002554 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800255c:	4a14      	ldr	r2, [pc, #80]	@ (80025b0 <_sbrk+0x5c>)
 800255e:	4b15      	ldr	r3, [pc, #84]	@ (80025b4 <_sbrk+0x60>)
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002568:	4b13      	ldr	r3, [pc, #76]	@ (80025b8 <_sbrk+0x64>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d102      	bne.n	8002576 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002570:	4b11      	ldr	r3, [pc, #68]	@ (80025b8 <_sbrk+0x64>)
 8002572:	4a12      	ldr	r2, [pc, #72]	@ (80025bc <_sbrk+0x68>)
 8002574:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002576:	4b10      	ldr	r3, [pc, #64]	@ (80025b8 <_sbrk+0x64>)
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4413      	add	r3, r2
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	429a      	cmp	r2, r3
 8002582:	d207      	bcs.n	8002594 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002584:	f004 ffb4 	bl	80074f0 <__errno>
 8002588:	4603      	mov	r3, r0
 800258a:	220c      	movs	r2, #12
 800258c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800258e:	f04f 33ff 	mov.w	r3, #4294967295
 8002592:	e009      	b.n	80025a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002594:	4b08      	ldr	r3, [pc, #32]	@ (80025b8 <_sbrk+0x64>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800259a:	4b07      	ldr	r3, [pc, #28]	@ (80025b8 <_sbrk+0x64>)
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4413      	add	r3, r2
 80025a2:	4a05      	ldr	r2, [pc, #20]	@ (80025b8 <_sbrk+0x64>)
 80025a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025a6:	68fb      	ldr	r3, [r7, #12]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	20005000 	.word	0x20005000
 80025b4:	00000400 	.word	0x00000400
 80025b8:	20000464 	.word	0x20000464
 80025bc:	200005b8 	.word	0x200005b8

080025c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025c4:	bf00      	nop
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bc80      	pop	{r7}
 80025ca:	4770      	bx	lr

080025cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80025cc:	f7ff fff8 	bl	80025c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025d0:	480b      	ldr	r0, [pc, #44]	@ (8002600 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80025d2:	490c      	ldr	r1, [pc, #48]	@ (8002604 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80025d4:	4a0c      	ldr	r2, [pc, #48]	@ (8002608 <LoopFillZerobss+0x16>)
  movs r3, #0
 80025d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025d8:	e002      	b.n	80025e0 <LoopCopyDataInit>

080025da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025de:	3304      	adds	r3, #4

080025e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025e4:	d3f9      	bcc.n	80025da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025e6:	4a09      	ldr	r2, [pc, #36]	@ (800260c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80025e8:	4c09      	ldr	r4, [pc, #36]	@ (8002610 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025ec:	e001      	b.n	80025f2 <LoopFillZerobss>

080025ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025f0:	3204      	adds	r2, #4

080025f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025f4:	d3fb      	bcc.n	80025ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025f6:	f004 ff81 	bl	80074fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025fa:	f7ff faaf 	bl	8001b5c <main>
  bx lr
 80025fe:	4770      	bx	lr
  ldr r0, =_sdata
 8002600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002604:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002608:	0800b150 	.word	0x0800b150
  ldr r2, =_sbss
 800260c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002610:	200005b8 	.word	0x200005b8

08002614 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002614:	e7fe      	b.n	8002614 <ADC1_2_IRQHandler>
	...

08002618 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800261c:	4b08      	ldr	r3, [pc, #32]	@ (8002640 <HAL_Init+0x28>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a07      	ldr	r2, [pc, #28]	@ (8002640 <HAL_Init+0x28>)
 8002622:	f043 0310 	orr.w	r3, r3, #16
 8002626:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002628:	2003      	movs	r0, #3
 800262a:	f000 fd9f 	bl	800316c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800262e:	200f      	movs	r0, #15
 8002630:	f000 f808 	bl	8002644 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002634:	f7ff fd28 	bl	8002088 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40022000 	.word	0x40022000

08002644 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800264c:	4b12      	ldr	r3, [pc, #72]	@ (8002698 <HAL_InitTick+0x54>)
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	4b12      	ldr	r3, [pc, #72]	@ (800269c <HAL_InitTick+0x58>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	4619      	mov	r1, r3
 8002656:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800265a:	fbb3 f3f1 	udiv	r3, r3, r1
 800265e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002662:	4618      	mov	r0, r3
 8002664:	f000 fdb7 	bl	80031d6 <HAL_SYSTICK_Config>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e00e      	b.n	8002690 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b0f      	cmp	r3, #15
 8002676:	d80a      	bhi.n	800268e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002678:	2200      	movs	r2, #0
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	f04f 30ff 	mov.w	r0, #4294967295
 8002680:	f000 fd7f 	bl	8003182 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002684:	4a06      	ldr	r2, [pc, #24]	@ (80026a0 <HAL_InitTick+0x5c>)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800268a:	2300      	movs	r3, #0
 800268c:	e000      	b.n	8002690 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
}
 8002690:	4618      	mov	r0, r3
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	20000000 	.word	0x20000000
 800269c:	20000008 	.word	0x20000008
 80026a0:	20000004 	.word	0x20000004

080026a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026a8:	4b05      	ldr	r3, [pc, #20]	@ (80026c0 <HAL_IncTick+0x1c>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	461a      	mov	r2, r3
 80026ae:	4b05      	ldr	r3, [pc, #20]	@ (80026c4 <HAL_IncTick+0x20>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4413      	add	r3, r2
 80026b4:	4a03      	ldr	r2, [pc, #12]	@ (80026c4 <HAL_IncTick+0x20>)
 80026b6:	6013      	str	r3, [r2, #0]
}
 80026b8:	bf00      	nop
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr
 80026c0:	20000008 	.word	0x20000008
 80026c4:	20000468 	.word	0x20000468

080026c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  return uwTick;
 80026cc:	4b02      	ldr	r3, [pc, #8]	@ (80026d8 <HAL_GetTick+0x10>)
 80026ce:	681b      	ldr	r3, [r3, #0]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr
 80026d8:	20000468 	.word	0x20000468

080026dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026e4:	f7ff fff0 	bl	80026c8 <HAL_GetTick>
 80026e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f4:	d005      	beq.n	8002702 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002720 <HAL_Delay+0x44>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	461a      	mov	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	4413      	add	r3, r2
 8002700:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002702:	bf00      	nop
 8002704:	f7ff ffe0 	bl	80026c8 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	429a      	cmp	r2, r3
 8002712:	d8f7      	bhi.n	8002704 <HAL_Delay+0x28>
  {
  }
}
 8002714:	bf00      	nop
 8002716:	bf00      	nop
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	20000008 	.word	0x20000008

08002724 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800272c:	2300      	movs	r3, #0
 800272e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002730:	2300      	movs	r3, #0
 8002732:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002734:	2300      	movs	r3, #0
 8002736:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002738:	2300      	movs	r3, #0
 800273a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e0be      	b.n	80028c4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002750:	2b00      	cmp	r3, #0
 8002752:	d109      	bne.n	8002768 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7ff fcc2 	bl	80020ec <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 fbf1 	bl	8002f50 <ADC_ConversionStop_Disable>
 800276e:	4603      	mov	r3, r0
 8002770:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002776:	f003 0310 	and.w	r3, r3, #16
 800277a:	2b00      	cmp	r3, #0
 800277c:	f040 8099 	bne.w	80028b2 <HAL_ADC_Init+0x18e>
 8002780:	7dfb      	ldrb	r3, [r7, #23]
 8002782:	2b00      	cmp	r3, #0
 8002784:	f040 8095 	bne.w	80028b2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800278c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002790:	f023 0302 	bic.w	r3, r3, #2
 8002794:	f043 0202 	orr.w	r2, r3, #2
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80027a4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	7b1b      	ldrb	r3, [r3, #12]
 80027aa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80027ac:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027bc:	d003      	beq.n	80027c6 <HAL_ADC_Init+0xa2>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d102      	bne.n	80027cc <HAL_ADC_Init+0xa8>
 80027c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027ca:	e000      	b.n	80027ce <HAL_ADC_Init+0xaa>
 80027cc:	2300      	movs	r3, #0
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	7d1b      	ldrb	r3, [r3, #20]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d119      	bne.n	8002810 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	7b1b      	ldrb	r3, [r3, #12]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d109      	bne.n	80027f8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	3b01      	subs	r3, #1
 80027ea:	035a      	lsls	r2, r3, #13
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80027f4:	613b      	str	r3, [r7, #16]
 80027f6:	e00b      	b.n	8002810 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027fc:	f043 0220 	orr.w	r2, r3, #32
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002808:	f043 0201 	orr.w	r2, r3, #1
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	430a      	orrs	r2, r1
 8002822:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689a      	ldr	r2, [r3, #8]
 800282a:	4b28      	ldr	r3, [pc, #160]	@ (80028cc <HAL_ADC_Init+0x1a8>)
 800282c:	4013      	ands	r3, r2
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	6812      	ldr	r2, [r2, #0]
 8002832:	68b9      	ldr	r1, [r7, #8]
 8002834:	430b      	orrs	r3, r1
 8002836:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002840:	d003      	beq.n	800284a <HAL_ADC_Init+0x126>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d104      	bne.n	8002854 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	3b01      	subs	r3, #1
 8002850:	051b      	lsls	r3, r3, #20
 8002852:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800285a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	430a      	orrs	r2, r1
 8002866:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	689a      	ldr	r2, [r3, #8]
 800286e:	4b18      	ldr	r3, [pc, #96]	@ (80028d0 <HAL_ADC_Init+0x1ac>)
 8002870:	4013      	ands	r3, r2
 8002872:	68ba      	ldr	r2, [r7, #8]
 8002874:	429a      	cmp	r2, r3
 8002876:	d10b      	bne.n	8002890 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002882:	f023 0303 	bic.w	r3, r3, #3
 8002886:	f043 0201 	orr.w	r2, r3, #1
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800288e:	e018      	b.n	80028c2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002894:	f023 0312 	bic.w	r3, r3, #18
 8002898:	f043 0210 	orr.w	r2, r3, #16
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a4:	f043 0201 	orr.w	r2, r3, #1
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80028b0:	e007      	b.n	80028c2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b6:	f043 0210 	orr.w	r2, r3, #16
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80028c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3718      	adds	r7, #24
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	ffe1f7fd 	.word	0xffe1f7fd
 80028d0:	ff1f0efe 	.word	0xff1f0efe

080028d4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028dc:	2300      	movs	r3, #0
 80028de:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d101      	bne.n	80028ee <HAL_ADC_Start+0x1a>
 80028ea:	2302      	movs	r3, #2
 80028ec:	e098      	b.n	8002a20 <HAL_ADC_Start+0x14c>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 fad0 	bl	8002e9c <ADC_Enable>
 80028fc:	4603      	mov	r3, r0
 80028fe:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002900:	7bfb      	ldrb	r3, [r7, #15]
 8002902:	2b00      	cmp	r3, #0
 8002904:	f040 8087 	bne.w	8002a16 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800290c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002910:	f023 0301 	bic.w	r3, r3, #1
 8002914:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a41      	ldr	r2, [pc, #260]	@ (8002a28 <HAL_ADC_Start+0x154>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d105      	bne.n	8002932 <HAL_ADC_Start+0x5e>
 8002926:	4b41      	ldr	r3, [pc, #260]	@ (8002a2c <HAL_ADC_Start+0x158>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d115      	bne.n	800295e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002936:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002948:	2b00      	cmp	r3, #0
 800294a:	d026      	beq.n	800299a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002950:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002954:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800295c:	e01d      	b.n	800299a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002962:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a2f      	ldr	r2, [pc, #188]	@ (8002a2c <HAL_ADC_Start+0x158>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d004      	beq.n	800297e <HAL_ADC_Start+0xaa>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a2b      	ldr	r2, [pc, #172]	@ (8002a28 <HAL_ADC_Start+0x154>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d10d      	bne.n	800299a <HAL_ADC_Start+0xc6>
 800297e:	4b2b      	ldr	r3, [pc, #172]	@ (8002a2c <HAL_ADC_Start+0x158>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002986:	2b00      	cmp	r3, #0
 8002988:	d007      	beq.n	800299a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800298e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002992:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800299e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d006      	beq.n	80029b4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029aa:	f023 0206 	bic.w	r2, r3, #6
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80029b2:	e002      	b.n	80029ba <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f06f 0202 	mvn.w	r2, #2
 80029ca:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80029d6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80029da:	d113      	bne.n	8002a04 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80029e0:	4a11      	ldr	r2, [pc, #68]	@ (8002a28 <HAL_ADC_Start+0x154>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d105      	bne.n	80029f2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80029e6:	4b11      	ldr	r3, [pc, #68]	@ (8002a2c <HAL_ADC_Start+0x158>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d108      	bne.n	8002a04 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002a00:	609a      	str	r2, [r3, #8]
 8002a02:	e00c      	b.n	8002a1e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689a      	ldr	r2, [r3, #8]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	e003      	b.n	8002a1e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40012800 	.word	0x40012800
 8002a2c:	40012400 	.word	0x40012400

08002a30 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d101      	bne.n	8002a4a <HAL_ADC_Stop+0x1a>
 8002a46:	2302      	movs	r3, #2
 8002a48:	e01a      	b.n	8002a80 <HAL_ADC_Stop+0x50>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 fa7c 	bl	8002f50 <ADC_ConversionStop_Disable>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002a5c:	7bfb      	ldrb	r3, [r7, #15]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d109      	bne.n	8002a76 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a66:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002a6a:	f023 0301 	bic.w	r3, r3, #1
 8002a6e:	f043 0201 	orr.w	r2, r3, #1
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002a88:	b590      	push	{r4, r7, lr}
 8002a8a:	b087      	sub	sp, #28
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002a9e:	f7ff fe13 	bl	80026c8 <HAL_GetTick>
 8002aa2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00b      	beq.n	8002aca <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab6:	f043 0220 	orr.w	r2, r3, #32
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e0d3      	b.n	8002c72 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d131      	bne.n	8002b3c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ade:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d12a      	bne.n	8002b3c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002ae6:	e021      	b.n	8002b2c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aee:	d01d      	beq.n	8002b2c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d007      	beq.n	8002b06 <HAL_ADC_PollForConversion+0x7e>
 8002af6:	f7ff fde7 	bl	80026c8 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d212      	bcs.n	8002b2c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10b      	bne.n	8002b2c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b18:	f043 0204 	orr.w	r2, r3, #4
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e0a2      	b.n	8002c72 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0d6      	beq.n	8002ae8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002b3a:	e070      	b.n	8002c1e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002b3c:	4b4f      	ldr	r3, [pc, #316]	@ (8002c7c <HAL_ADC_PollForConversion+0x1f4>)
 8002b3e:	681c      	ldr	r4, [r3, #0]
 8002b40:	2002      	movs	r0, #2
 8002b42:	f002 fad7 	bl	80050f4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002b46:	4603      	mov	r3, r0
 8002b48:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6919      	ldr	r1, [r3, #16]
 8002b52:	4b4b      	ldr	r3, [pc, #300]	@ (8002c80 <HAL_ADC_PollForConversion+0x1f8>)
 8002b54:	400b      	ands	r3, r1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d118      	bne.n	8002b8c <HAL_ADC_PollForConversion+0x104>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68d9      	ldr	r1, [r3, #12]
 8002b60:	4b48      	ldr	r3, [pc, #288]	@ (8002c84 <HAL_ADC_PollForConversion+0x1fc>)
 8002b62:	400b      	ands	r3, r1
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d111      	bne.n	8002b8c <HAL_ADC_PollForConversion+0x104>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6919      	ldr	r1, [r3, #16]
 8002b6e:	4b46      	ldr	r3, [pc, #280]	@ (8002c88 <HAL_ADC_PollForConversion+0x200>)
 8002b70:	400b      	ands	r3, r1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d108      	bne.n	8002b88 <HAL_ADC_PollForConversion+0x100>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68d9      	ldr	r1, [r3, #12]
 8002b7c:	4b43      	ldr	r3, [pc, #268]	@ (8002c8c <HAL_ADC_PollForConversion+0x204>)
 8002b7e:	400b      	ands	r3, r1
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d101      	bne.n	8002b88 <HAL_ADC_PollForConversion+0x100>
 8002b84:	2314      	movs	r3, #20
 8002b86:	e020      	b.n	8002bca <HAL_ADC_PollForConversion+0x142>
 8002b88:	2329      	movs	r3, #41	@ 0x29
 8002b8a:	e01e      	b.n	8002bca <HAL_ADC_PollForConversion+0x142>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6919      	ldr	r1, [r3, #16]
 8002b92:	4b3d      	ldr	r3, [pc, #244]	@ (8002c88 <HAL_ADC_PollForConversion+0x200>)
 8002b94:	400b      	ands	r3, r1
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d106      	bne.n	8002ba8 <HAL_ADC_PollForConversion+0x120>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68d9      	ldr	r1, [r3, #12]
 8002ba0:	4b3a      	ldr	r3, [pc, #232]	@ (8002c8c <HAL_ADC_PollForConversion+0x204>)
 8002ba2:	400b      	ands	r3, r1
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00d      	beq.n	8002bc4 <HAL_ADC_PollForConversion+0x13c>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6919      	ldr	r1, [r3, #16]
 8002bae:	4b38      	ldr	r3, [pc, #224]	@ (8002c90 <HAL_ADC_PollForConversion+0x208>)
 8002bb0:	400b      	ands	r3, r1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d108      	bne.n	8002bc8 <HAL_ADC_PollForConversion+0x140>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68d9      	ldr	r1, [r3, #12]
 8002bbc:	4b34      	ldr	r3, [pc, #208]	@ (8002c90 <HAL_ADC_PollForConversion+0x208>)
 8002bbe:	400b      	ands	r3, r1
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d101      	bne.n	8002bc8 <HAL_ADC_PollForConversion+0x140>
 8002bc4:	2354      	movs	r3, #84	@ 0x54
 8002bc6:	e000      	b.n	8002bca <HAL_ADC_PollForConversion+0x142>
 8002bc8:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002bca:	fb02 f303 	mul.w	r3, r2, r3
 8002bce:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002bd0:	e021      	b.n	8002c16 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd8:	d01a      	beq.n	8002c10 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d007      	beq.n	8002bf0 <HAL_ADC_PollForConversion+0x168>
 8002be0:	f7ff fd72 	bl	80026c8 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d20f      	bcs.n	8002c10 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d90b      	bls.n	8002c10 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bfc:	f043 0204 	orr.w	r2, r3, #4
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e030      	b.n	8002c72 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	3301      	adds	r3, #1
 8002c14:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d8d9      	bhi.n	8002bd2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f06f 0212 	mvn.w	r2, #18
 8002c26:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c2c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002c3e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002c42:	d115      	bne.n	8002c70 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d111      	bne.n	8002c70 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d105      	bne.n	8002c70 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c68:	f043 0201 	orr.w	r2, r3, #1
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	371c      	adds	r7, #28
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd90      	pop	{r4, r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20000000 	.word	0x20000000
 8002c80:	24924924 	.word	0x24924924
 8002c84:	00924924 	.word	0x00924924
 8002c88:	12492492 	.word	0x12492492
 8002c8c:	00492492 	.word	0x00492492
 8002c90:	00249249 	.word	0x00249249

08002c94 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr

08002cac <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d101      	bne.n	8002ccc <HAL_ADC_ConfigChannel+0x20>
 8002cc8:	2302      	movs	r3, #2
 8002cca:	e0dc      	b.n	8002e86 <HAL_ADC_ConfigChannel+0x1da>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	2b06      	cmp	r3, #6
 8002cda:	d81c      	bhi.n	8002d16 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	3b05      	subs	r3, #5
 8002cee:	221f      	movs	r2, #31
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	4019      	ands	r1, r3
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	6818      	ldr	r0, [r3, #0]
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	4613      	mov	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	3b05      	subs	r3, #5
 8002d08:	fa00 f203 	lsl.w	r2, r0, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	430a      	orrs	r2, r1
 8002d12:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d14:	e03c      	b.n	8002d90 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	2b0c      	cmp	r3, #12
 8002d1c:	d81c      	bhi.n	8002d58 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4413      	add	r3, r2
 8002d2e:	3b23      	subs	r3, #35	@ 0x23
 8002d30:	221f      	movs	r2, #31
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	43db      	mvns	r3, r3
 8002d38:	4019      	ands	r1, r3
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	6818      	ldr	r0, [r3, #0]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685a      	ldr	r2, [r3, #4]
 8002d42:	4613      	mov	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4413      	add	r3, r2
 8002d48:	3b23      	subs	r3, #35	@ 0x23
 8002d4a:	fa00 f203 	lsl.w	r2, r0, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	430a      	orrs	r2, r1
 8002d54:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d56:	e01b      	b.n	8002d90 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	4613      	mov	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	4413      	add	r3, r2
 8002d68:	3b41      	subs	r3, #65	@ 0x41
 8002d6a:	221f      	movs	r2, #31
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	43db      	mvns	r3, r3
 8002d72:	4019      	ands	r1, r3
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	6818      	ldr	r0, [r3, #0]
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	3b41      	subs	r3, #65	@ 0x41
 8002d84:	fa00 f203 	lsl.w	r2, r0, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2b09      	cmp	r3, #9
 8002d96:	d91c      	bls.n	8002dd2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68d9      	ldr	r1, [r3, #12]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	4613      	mov	r3, r2
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	4413      	add	r3, r2
 8002da8:	3b1e      	subs	r3, #30
 8002daa:	2207      	movs	r2, #7
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	43db      	mvns	r3, r3
 8002db2:	4019      	ands	r1, r3
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	6898      	ldr	r0, [r3, #8]
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	4413      	add	r3, r2
 8002dc2:	3b1e      	subs	r3, #30
 8002dc4:	fa00 f203 	lsl.w	r2, r0, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	60da      	str	r2, [r3, #12]
 8002dd0:	e019      	b.n	8002e06 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	6919      	ldr	r1, [r3, #16]
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	4413      	add	r3, r2
 8002de2:	2207      	movs	r2, #7
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	43db      	mvns	r3, r3
 8002dea:	4019      	ands	r1, r3
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	6898      	ldr	r0, [r3, #8]
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	4613      	mov	r3, r2
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	4413      	add	r3, r2
 8002dfa:	fa00 f203 	lsl.w	r2, r0, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2b10      	cmp	r3, #16
 8002e0c:	d003      	beq.n	8002e16 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002e12:	2b11      	cmp	r3, #17
 8002e14:	d132      	bne.n	8002e7c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a1d      	ldr	r2, [pc, #116]	@ (8002e90 <HAL_ADC_ConfigChannel+0x1e4>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d125      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d126      	bne.n	8002e7c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002e3c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2b10      	cmp	r3, #16
 8002e44:	d11a      	bne.n	8002e7c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e46:	4b13      	ldr	r3, [pc, #76]	@ (8002e94 <HAL_ADC_ConfigChannel+0x1e8>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a13      	ldr	r2, [pc, #76]	@ (8002e98 <HAL_ADC_ConfigChannel+0x1ec>)
 8002e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e50:	0c9a      	lsrs	r2, r3, #18
 8002e52:	4613      	mov	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	4413      	add	r3, r2
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e5c:	e002      	b.n	8002e64 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	3b01      	subs	r3, #1
 8002e62:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1f9      	bne.n	8002e5e <HAL_ADC_ConfigChannel+0x1b2>
 8002e6a:	e007      	b.n	8002e7c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e70:	f043 0220 	orr.w	r2, r3, #32
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3714      	adds	r7, #20
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bc80      	pop	{r7}
 8002e8e:	4770      	bx	lr
 8002e90:	40012400 	.word	0x40012400
 8002e94:	20000000 	.word	0x20000000
 8002e98:	431bde83 	.word	0x431bde83

08002e9c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d040      	beq.n	8002f3c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f042 0201 	orr.w	r2, r2, #1
 8002ec8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002eca:	4b1f      	ldr	r3, [pc, #124]	@ (8002f48 <ADC_Enable+0xac>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a1f      	ldr	r2, [pc, #124]	@ (8002f4c <ADC_Enable+0xb0>)
 8002ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed4:	0c9b      	lsrs	r3, r3, #18
 8002ed6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002ed8:	e002      	b.n	8002ee0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	3b01      	subs	r3, #1
 8002ede:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1f9      	bne.n	8002eda <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ee6:	f7ff fbef 	bl	80026c8 <HAL_GetTick>
 8002eea:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002eec:	e01f      	b.n	8002f2e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002eee:	f7ff fbeb 	bl	80026c8 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d918      	bls.n	8002f2e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d011      	beq.n	8002f2e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f0e:	f043 0210 	orr.w	r2, r3, #16
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f1a:	f043 0201 	orr.w	r2, r3, #1
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e007      	b.n	8002f3e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d1d8      	bne.n	8002eee <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	20000000 	.word	0x20000000
 8002f4c:	431bde83 	.word	0x431bde83

08002f50 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d12e      	bne.n	8002fc8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 0201 	bic.w	r2, r2, #1
 8002f78:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f7a:	f7ff fba5 	bl	80026c8 <HAL_GetTick>
 8002f7e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002f80:	e01b      	b.n	8002fba <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f82:	f7ff fba1 	bl	80026c8 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d914      	bls.n	8002fba <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d10d      	bne.n	8002fba <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fa2:	f043 0210 	orr.w	r2, r3, #16
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fae:	f043 0201 	orr.w	r2, r3, #1
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e007      	b.n	8002fca <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d0dc      	beq.n	8002f82 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
	...

08002fd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8003018 <__NVIC_SetPriorityGrouping+0x44>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fea:	68ba      	ldr	r2, [r7, #8]
 8002fec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ffc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003000:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003006:	4a04      	ldr	r2, [pc, #16]	@ (8003018 <__NVIC_SetPriorityGrouping+0x44>)
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	60d3      	str	r3, [r2, #12]
}
 800300c:	bf00      	nop
 800300e:	3714      	adds	r7, #20
 8003010:	46bd      	mov	sp, r7
 8003012:	bc80      	pop	{r7}
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	e000ed00 	.word	0xe000ed00

0800301c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003020:	4b04      	ldr	r3, [pc, #16]	@ (8003034 <__NVIC_GetPriorityGrouping+0x18>)
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	0a1b      	lsrs	r3, r3, #8
 8003026:	f003 0307 	and.w	r3, r3, #7
}
 800302a:	4618      	mov	r0, r3
 800302c:	46bd      	mov	sp, r7
 800302e:	bc80      	pop	{r7}
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	e000ed00 	.word	0xe000ed00

08003038 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	4603      	mov	r3, r0
 8003040:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003046:	2b00      	cmp	r3, #0
 8003048:	db0b      	blt.n	8003062 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800304a:	79fb      	ldrb	r3, [r7, #7]
 800304c:	f003 021f 	and.w	r2, r3, #31
 8003050:	4906      	ldr	r1, [pc, #24]	@ (800306c <__NVIC_EnableIRQ+0x34>)
 8003052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003056:	095b      	lsrs	r3, r3, #5
 8003058:	2001      	movs	r0, #1
 800305a:	fa00 f202 	lsl.w	r2, r0, r2
 800305e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003062:	bf00      	nop
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	bc80      	pop	{r7}
 800306a:	4770      	bx	lr
 800306c:	e000e100 	.word	0xe000e100

08003070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	4603      	mov	r3, r0
 8003078:	6039      	str	r1, [r7, #0]
 800307a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800307c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003080:	2b00      	cmp	r3, #0
 8003082:	db0a      	blt.n	800309a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	b2da      	uxtb	r2, r3
 8003088:	490c      	ldr	r1, [pc, #48]	@ (80030bc <__NVIC_SetPriority+0x4c>)
 800308a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800308e:	0112      	lsls	r2, r2, #4
 8003090:	b2d2      	uxtb	r2, r2
 8003092:	440b      	add	r3, r1
 8003094:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003098:	e00a      	b.n	80030b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	b2da      	uxtb	r2, r3
 800309e:	4908      	ldr	r1, [pc, #32]	@ (80030c0 <__NVIC_SetPriority+0x50>)
 80030a0:	79fb      	ldrb	r3, [r7, #7]
 80030a2:	f003 030f 	and.w	r3, r3, #15
 80030a6:	3b04      	subs	r3, #4
 80030a8:	0112      	lsls	r2, r2, #4
 80030aa:	b2d2      	uxtb	r2, r2
 80030ac:	440b      	add	r3, r1
 80030ae:	761a      	strb	r2, [r3, #24]
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bc80      	pop	{r7}
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	e000e100 	.word	0xe000e100
 80030c0:	e000ed00 	.word	0xe000ed00

080030c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b089      	sub	sp, #36	@ 0x24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f003 0307 	and.w	r3, r3, #7
 80030d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	f1c3 0307 	rsb	r3, r3, #7
 80030de:	2b04      	cmp	r3, #4
 80030e0:	bf28      	it	cs
 80030e2:	2304      	movcs	r3, #4
 80030e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	3304      	adds	r3, #4
 80030ea:	2b06      	cmp	r3, #6
 80030ec:	d902      	bls.n	80030f4 <NVIC_EncodePriority+0x30>
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	3b03      	subs	r3, #3
 80030f2:	e000      	b.n	80030f6 <NVIC_EncodePriority+0x32>
 80030f4:	2300      	movs	r3, #0
 80030f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030f8:	f04f 32ff 	mov.w	r2, #4294967295
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	43da      	mvns	r2, r3
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	401a      	ands	r2, r3
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800310c:	f04f 31ff 	mov.w	r1, #4294967295
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	fa01 f303 	lsl.w	r3, r1, r3
 8003116:	43d9      	mvns	r1, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800311c:	4313      	orrs	r3, r2
         );
}
 800311e:	4618      	mov	r0, r3
 8003120:	3724      	adds	r7, #36	@ 0x24
 8003122:	46bd      	mov	sp, r7
 8003124:	bc80      	pop	{r7}
 8003126:	4770      	bx	lr

08003128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3b01      	subs	r3, #1
 8003134:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003138:	d301      	bcc.n	800313e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800313a:	2301      	movs	r3, #1
 800313c:	e00f      	b.n	800315e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800313e:	4a0a      	ldr	r2, [pc, #40]	@ (8003168 <SysTick_Config+0x40>)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	3b01      	subs	r3, #1
 8003144:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003146:	210f      	movs	r1, #15
 8003148:	f04f 30ff 	mov.w	r0, #4294967295
 800314c:	f7ff ff90 	bl	8003070 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003150:	4b05      	ldr	r3, [pc, #20]	@ (8003168 <SysTick_Config+0x40>)
 8003152:	2200      	movs	r2, #0
 8003154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003156:	4b04      	ldr	r3, [pc, #16]	@ (8003168 <SysTick_Config+0x40>)
 8003158:	2207      	movs	r2, #7
 800315a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	e000e010 	.word	0xe000e010

0800316c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7ff ff2d 	bl	8002fd4 <__NVIC_SetPriorityGrouping>
}
 800317a:	bf00      	nop
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003182:	b580      	push	{r7, lr}
 8003184:	b086      	sub	sp, #24
 8003186:	af00      	add	r7, sp, #0
 8003188:	4603      	mov	r3, r0
 800318a:	60b9      	str	r1, [r7, #8]
 800318c:	607a      	str	r2, [r7, #4]
 800318e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003190:	2300      	movs	r3, #0
 8003192:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003194:	f7ff ff42 	bl	800301c <__NVIC_GetPriorityGrouping>
 8003198:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	68b9      	ldr	r1, [r7, #8]
 800319e:	6978      	ldr	r0, [r7, #20]
 80031a0:	f7ff ff90 	bl	80030c4 <NVIC_EncodePriority>
 80031a4:	4602      	mov	r2, r0
 80031a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031aa:	4611      	mov	r1, r2
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff ff5f 	bl	8003070 <__NVIC_SetPriority>
}
 80031b2:	bf00      	nop
 80031b4:	3718      	adds	r7, #24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b082      	sub	sp, #8
 80031be:	af00      	add	r7, sp, #0
 80031c0:	4603      	mov	r3, r0
 80031c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff ff35 	bl	8003038 <__NVIC_EnableIRQ>
}
 80031ce:	bf00      	nop
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b082      	sub	sp, #8
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7ff ffa2 	bl	8003128 <SysTick_Config>
 80031e4:	4603      	mov	r3, r0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b085      	sub	sp, #20
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031f6:	2300      	movs	r3, #0
 80031f8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d008      	beq.n	8003218 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2204      	movs	r2, #4
 800320a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e020      	b.n	800325a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 020e 	bic.w	r2, r2, #14
 8003226:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f022 0201 	bic.w	r2, r2, #1
 8003236:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003240:	2101      	movs	r1, #1
 8003242:	fa01 f202 	lsl.w	r2, r1, r2
 8003246:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003258:	7bfb      	ldrb	r3, [r7, #15]
}
 800325a:	4618      	mov	r0, r3
 800325c:	3714      	adds	r7, #20
 800325e:	46bd      	mov	sp, r7
 8003260:	bc80      	pop	{r7}
 8003262:	4770      	bx	lr

08003264 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800326c:	2300      	movs	r3, #0
 800326e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d005      	beq.n	8003288 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2204      	movs	r2, #4
 8003280:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	73fb      	strb	r3, [r7, #15]
 8003286:	e051      	b.n	800332c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 020e 	bic.w	r2, r2, #14
 8003296:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 0201 	bic.w	r2, r2, #1
 80032a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a22      	ldr	r2, [pc, #136]	@ (8003338 <HAL_DMA_Abort_IT+0xd4>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d029      	beq.n	8003306 <HAL_DMA_Abort_IT+0xa2>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a21      	ldr	r2, [pc, #132]	@ (800333c <HAL_DMA_Abort_IT+0xd8>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d022      	beq.n	8003302 <HAL_DMA_Abort_IT+0x9e>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a1f      	ldr	r2, [pc, #124]	@ (8003340 <HAL_DMA_Abort_IT+0xdc>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d01a      	beq.n	80032fc <HAL_DMA_Abort_IT+0x98>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a1e      	ldr	r2, [pc, #120]	@ (8003344 <HAL_DMA_Abort_IT+0xe0>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d012      	beq.n	80032f6 <HAL_DMA_Abort_IT+0x92>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a1c      	ldr	r2, [pc, #112]	@ (8003348 <HAL_DMA_Abort_IT+0xe4>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d00a      	beq.n	80032f0 <HAL_DMA_Abort_IT+0x8c>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a1b      	ldr	r2, [pc, #108]	@ (800334c <HAL_DMA_Abort_IT+0xe8>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d102      	bne.n	80032ea <HAL_DMA_Abort_IT+0x86>
 80032e4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80032e8:	e00e      	b.n	8003308 <HAL_DMA_Abort_IT+0xa4>
 80032ea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80032ee:	e00b      	b.n	8003308 <HAL_DMA_Abort_IT+0xa4>
 80032f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80032f4:	e008      	b.n	8003308 <HAL_DMA_Abort_IT+0xa4>
 80032f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032fa:	e005      	b.n	8003308 <HAL_DMA_Abort_IT+0xa4>
 80032fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003300:	e002      	b.n	8003308 <HAL_DMA_Abort_IT+0xa4>
 8003302:	2310      	movs	r3, #16
 8003304:	e000      	b.n	8003308 <HAL_DMA_Abort_IT+0xa4>
 8003306:	2301      	movs	r3, #1
 8003308:	4a11      	ldr	r2, [pc, #68]	@ (8003350 <HAL_DMA_Abort_IT+0xec>)
 800330a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003320:	2b00      	cmp	r3, #0
 8003322:	d003      	beq.n	800332c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	4798      	blx	r3
    } 
  }
  return status;
 800332c:	7bfb      	ldrb	r3, [r7, #15]
}
 800332e:	4618      	mov	r0, r3
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	40020008 	.word	0x40020008
 800333c:	4002001c 	.word	0x4002001c
 8003340:	40020030 	.word	0x40020030
 8003344:	40020044 	.word	0x40020044
 8003348:	40020058 	.word	0x40020058
 800334c:	4002006c 	.word	0x4002006c
 8003350:	40020000 	.word	0x40020000

08003354 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003354:	b480      	push	{r7}
 8003356:	b08b      	sub	sp, #44	@ 0x2c
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800335e:	2300      	movs	r3, #0
 8003360:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003362:	2300      	movs	r3, #0
 8003364:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003366:	e169      	b.n	800363c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003368:	2201      	movs	r2, #1
 800336a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	69fa      	ldr	r2, [r7, #28]
 8003378:	4013      	ands	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	429a      	cmp	r2, r3
 8003382:	f040 8158 	bne.w	8003636 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	4a9a      	ldr	r2, [pc, #616]	@ (80035f4 <HAL_GPIO_Init+0x2a0>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d05e      	beq.n	800344e <HAL_GPIO_Init+0xfa>
 8003390:	4a98      	ldr	r2, [pc, #608]	@ (80035f4 <HAL_GPIO_Init+0x2a0>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d875      	bhi.n	8003482 <HAL_GPIO_Init+0x12e>
 8003396:	4a98      	ldr	r2, [pc, #608]	@ (80035f8 <HAL_GPIO_Init+0x2a4>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d058      	beq.n	800344e <HAL_GPIO_Init+0xfa>
 800339c:	4a96      	ldr	r2, [pc, #600]	@ (80035f8 <HAL_GPIO_Init+0x2a4>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d86f      	bhi.n	8003482 <HAL_GPIO_Init+0x12e>
 80033a2:	4a96      	ldr	r2, [pc, #600]	@ (80035fc <HAL_GPIO_Init+0x2a8>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d052      	beq.n	800344e <HAL_GPIO_Init+0xfa>
 80033a8:	4a94      	ldr	r2, [pc, #592]	@ (80035fc <HAL_GPIO_Init+0x2a8>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d869      	bhi.n	8003482 <HAL_GPIO_Init+0x12e>
 80033ae:	4a94      	ldr	r2, [pc, #592]	@ (8003600 <HAL_GPIO_Init+0x2ac>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d04c      	beq.n	800344e <HAL_GPIO_Init+0xfa>
 80033b4:	4a92      	ldr	r2, [pc, #584]	@ (8003600 <HAL_GPIO_Init+0x2ac>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d863      	bhi.n	8003482 <HAL_GPIO_Init+0x12e>
 80033ba:	4a92      	ldr	r2, [pc, #584]	@ (8003604 <HAL_GPIO_Init+0x2b0>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d046      	beq.n	800344e <HAL_GPIO_Init+0xfa>
 80033c0:	4a90      	ldr	r2, [pc, #576]	@ (8003604 <HAL_GPIO_Init+0x2b0>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d85d      	bhi.n	8003482 <HAL_GPIO_Init+0x12e>
 80033c6:	2b12      	cmp	r3, #18
 80033c8:	d82a      	bhi.n	8003420 <HAL_GPIO_Init+0xcc>
 80033ca:	2b12      	cmp	r3, #18
 80033cc:	d859      	bhi.n	8003482 <HAL_GPIO_Init+0x12e>
 80033ce:	a201      	add	r2, pc, #4	@ (adr r2, 80033d4 <HAL_GPIO_Init+0x80>)
 80033d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d4:	0800344f 	.word	0x0800344f
 80033d8:	08003429 	.word	0x08003429
 80033dc:	0800343b 	.word	0x0800343b
 80033e0:	0800347d 	.word	0x0800347d
 80033e4:	08003483 	.word	0x08003483
 80033e8:	08003483 	.word	0x08003483
 80033ec:	08003483 	.word	0x08003483
 80033f0:	08003483 	.word	0x08003483
 80033f4:	08003483 	.word	0x08003483
 80033f8:	08003483 	.word	0x08003483
 80033fc:	08003483 	.word	0x08003483
 8003400:	08003483 	.word	0x08003483
 8003404:	08003483 	.word	0x08003483
 8003408:	08003483 	.word	0x08003483
 800340c:	08003483 	.word	0x08003483
 8003410:	08003483 	.word	0x08003483
 8003414:	08003483 	.word	0x08003483
 8003418:	08003431 	.word	0x08003431
 800341c:	08003445 	.word	0x08003445
 8003420:	4a79      	ldr	r2, [pc, #484]	@ (8003608 <HAL_GPIO_Init+0x2b4>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d013      	beq.n	800344e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003426:	e02c      	b.n	8003482 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	623b      	str	r3, [r7, #32]
          break;
 800342e:	e029      	b.n	8003484 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	3304      	adds	r3, #4
 8003436:	623b      	str	r3, [r7, #32]
          break;
 8003438:	e024      	b.n	8003484 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	3308      	adds	r3, #8
 8003440:	623b      	str	r3, [r7, #32]
          break;
 8003442:	e01f      	b.n	8003484 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	330c      	adds	r3, #12
 800344a:	623b      	str	r3, [r7, #32]
          break;
 800344c:	e01a      	b.n	8003484 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d102      	bne.n	800345c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003456:	2304      	movs	r3, #4
 8003458:	623b      	str	r3, [r7, #32]
          break;
 800345a:	e013      	b.n	8003484 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d105      	bne.n	8003470 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003464:	2308      	movs	r3, #8
 8003466:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	69fa      	ldr	r2, [r7, #28]
 800346c:	611a      	str	r2, [r3, #16]
          break;
 800346e:	e009      	b.n	8003484 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003470:	2308      	movs	r3, #8
 8003472:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	69fa      	ldr	r2, [r7, #28]
 8003478:	615a      	str	r2, [r3, #20]
          break;
 800347a:	e003      	b.n	8003484 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800347c:	2300      	movs	r3, #0
 800347e:	623b      	str	r3, [r7, #32]
          break;
 8003480:	e000      	b.n	8003484 <HAL_GPIO_Init+0x130>
          break;
 8003482:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	2bff      	cmp	r3, #255	@ 0xff
 8003488:	d801      	bhi.n	800348e <HAL_GPIO_Init+0x13a>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	e001      	b.n	8003492 <HAL_GPIO_Init+0x13e>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	3304      	adds	r3, #4
 8003492:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	2bff      	cmp	r3, #255	@ 0xff
 8003498:	d802      	bhi.n	80034a0 <HAL_GPIO_Init+0x14c>
 800349a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	e002      	b.n	80034a6 <HAL_GPIO_Init+0x152>
 80034a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a2:	3b08      	subs	r3, #8
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	210f      	movs	r1, #15
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	fa01 f303 	lsl.w	r3, r1, r3
 80034b4:	43db      	mvns	r3, r3
 80034b6:	401a      	ands	r2, r3
 80034b8:	6a39      	ldr	r1, [r7, #32]
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	fa01 f303 	lsl.w	r3, r1, r3
 80034c0:	431a      	orrs	r2, r3
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f000 80b1 	beq.w	8003636 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80034d4:	4b4d      	ldr	r3, [pc, #308]	@ (800360c <HAL_GPIO_Init+0x2b8>)
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	4a4c      	ldr	r2, [pc, #304]	@ (800360c <HAL_GPIO_Init+0x2b8>)
 80034da:	f043 0301 	orr.w	r3, r3, #1
 80034de:	6193      	str	r3, [r2, #24]
 80034e0:	4b4a      	ldr	r3, [pc, #296]	@ (800360c <HAL_GPIO_Init+0x2b8>)
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	60bb      	str	r3, [r7, #8]
 80034ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80034ec:	4a48      	ldr	r2, [pc, #288]	@ (8003610 <HAL_GPIO_Init+0x2bc>)
 80034ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f0:	089b      	lsrs	r3, r3, #2
 80034f2:	3302      	adds	r3, #2
 80034f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80034fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034fc:	f003 0303 	and.w	r3, r3, #3
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	220f      	movs	r2, #15
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	43db      	mvns	r3, r3
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	4013      	ands	r3, r2
 800350e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a40      	ldr	r2, [pc, #256]	@ (8003614 <HAL_GPIO_Init+0x2c0>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d013      	beq.n	8003540 <HAL_GPIO_Init+0x1ec>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a3f      	ldr	r2, [pc, #252]	@ (8003618 <HAL_GPIO_Init+0x2c4>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d00d      	beq.n	800353c <HAL_GPIO_Init+0x1e8>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a3e      	ldr	r2, [pc, #248]	@ (800361c <HAL_GPIO_Init+0x2c8>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d007      	beq.n	8003538 <HAL_GPIO_Init+0x1e4>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a3d      	ldr	r2, [pc, #244]	@ (8003620 <HAL_GPIO_Init+0x2cc>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d101      	bne.n	8003534 <HAL_GPIO_Init+0x1e0>
 8003530:	2303      	movs	r3, #3
 8003532:	e006      	b.n	8003542 <HAL_GPIO_Init+0x1ee>
 8003534:	2304      	movs	r3, #4
 8003536:	e004      	b.n	8003542 <HAL_GPIO_Init+0x1ee>
 8003538:	2302      	movs	r3, #2
 800353a:	e002      	b.n	8003542 <HAL_GPIO_Init+0x1ee>
 800353c:	2301      	movs	r3, #1
 800353e:	e000      	b.n	8003542 <HAL_GPIO_Init+0x1ee>
 8003540:	2300      	movs	r3, #0
 8003542:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003544:	f002 0203 	and.w	r2, r2, #3
 8003548:	0092      	lsls	r2, r2, #2
 800354a:	4093      	lsls	r3, r2
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	4313      	orrs	r3, r2
 8003550:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003552:	492f      	ldr	r1, [pc, #188]	@ (8003610 <HAL_GPIO_Init+0x2bc>)
 8003554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003556:	089b      	lsrs	r3, r3, #2
 8003558:	3302      	adds	r3, #2
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d006      	beq.n	800357a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800356c:	4b2d      	ldr	r3, [pc, #180]	@ (8003624 <HAL_GPIO_Init+0x2d0>)
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	492c      	ldr	r1, [pc, #176]	@ (8003624 <HAL_GPIO_Init+0x2d0>)
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	4313      	orrs	r3, r2
 8003576:	608b      	str	r3, [r1, #8]
 8003578:	e006      	b.n	8003588 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800357a:	4b2a      	ldr	r3, [pc, #168]	@ (8003624 <HAL_GPIO_Init+0x2d0>)
 800357c:	689a      	ldr	r2, [r3, #8]
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	43db      	mvns	r3, r3
 8003582:	4928      	ldr	r1, [pc, #160]	@ (8003624 <HAL_GPIO_Init+0x2d0>)
 8003584:	4013      	ands	r3, r2
 8003586:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d006      	beq.n	80035a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003594:	4b23      	ldr	r3, [pc, #140]	@ (8003624 <HAL_GPIO_Init+0x2d0>)
 8003596:	68da      	ldr	r2, [r3, #12]
 8003598:	4922      	ldr	r1, [pc, #136]	@ (8003624 <HAL_GPIO_Init+0x2d0>)
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	4313      	orrs	r3, r2
 800359e:	60cb      	str	r3, [r1, #12]
 80035a0:	e006      	b.n	80035b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80035a2:	4b20      	ldr	r3, [pc, #128]	@ (8003624 <HAL_GPIO_Init+0x2d0>)
 80035a4:	68da      	ldr	r2, [r3, #12]
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	43db      	mvns	r3, r3
 80035aa:	491e      	ldr	r1, [pc, #120]	@ (8003624 <HAL_GPIO_Init+0x2d0>)
 80035ac:	4013      	ands	r3, r2
 80035ae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d006      	beq.n	80035ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80035bc:	4b19      	ldr	r3, [pc, #100]	@ (8003624 <HAL_GPIO_Init+0x2d0>)
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	4918      	ldr	r1, [pc, #96]	@ (8003624 <HAL_GPIO_Init+0x2d0>)
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	604b      	str	r3, [r1, #4]
 80035c8:	e006      	b.n	80035d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80035ca:	4b16      	ldr	r3, [pc, #88]	@ (8003624 <HAL_GPIO_Init+0x2d0>)
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	43db      	mvns	r3, r3
 80035d2:	4914      	ldr	r1, [pc, #80]	@ (8003624 <HAL_GPIO_Init+0x2d0>)
 80035d4:	4013      	ands	r3, r2
 80035d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d021      	beq.n	8003628 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80035e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003624 <HAL_GPIO_Init+0x2d0>)
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	490e      	ldr	r1, [pc, #56]	@ (8003624 <HAL_GPIO_Init+0x2d0>)
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	600b      	str	r3, [r1, #0]
 80035f0:	e021      	b.n	8003636 <HAL_GPIO_Init+0x2e2>
 80035f2:	bf00      	nop
 80035f4:	10320000 	.word	0x10320000
 80035f8:	10310000 	.word	0x10310000
 80035fc:	10220000 	.word	0x10220000
 8003600:	10210000 	.word	0x10210000
 8003604:	10120000 	.word	0x10120000
 8003608:	10110000 	.word	0x10110000
 800360c:	40021000 	.word	0x40021000
 8003610:	40010000 	.word	0x40010000
 8003614:	40010800 	.word	0x40010800
 8003618:	40010c00 	.word	0x40010c00
 800361c:	40011000 	.word	0x40011000
 8003620:	40011400 	.word	0x40011400
 8003624:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003628:	4b0b      	ldr	r3, [pc, #44]	@ (8003658 <HAL_GPIO_Init+0x304>)
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	43db      	mvns	r3, r3
 8003630:	4909      	ldr	r1, [pc, #36]	@ (8003658 <HAL_GPIO_Init+0x304>)
 8003632:	4013      	ands	r3, r2
 8003634:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003638:	3301      	adds	r3, #1
 800363a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003642:	fa22 f303 	lsr.w	r3, r2, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	f47f ae8e 	bne.w	8003368 <HAL_GPIO_Init+0x14>
  }
}
 800364c:	bf00      	nop
 800364e:	bf00      	nop
 8003650:	372c      	adds	r7, #44	@ 0x2c
 8003652:	46bd      	mov	sp, r7
 8003654:	bc80      	pop	{r7}
 8003656:	4770      	bx	lr
 8003658:	40010400 	.word	0x40010400

0800365c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	460b      	mov	r3, r1
 8003666:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	887b      	ldrh	r3, [r7, #2]
 800366e:	4013      	ands	r3, r2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d002      	beq.n	800367a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003674:	2301      	movs	r3, #1
 8003676:	73fb      	strb	r3, [r7, #15]
 8003678:	e001      	b.n	800367e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800367a:	2300      	movs	r3, #0
 800367c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800367e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003680:	4618      	mov	r0, r3
 8003682:	3714      	adds	r7, #20
 8003684:	46bd      	mov	sp, r7
 8003686:	bc80      	pop	{r7}
 8003688:	4770      	bx	lr

0800368a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800368a:	b480      	push	{r7}
 800368c:	b083      	sub	sp, #12
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
 8003692:	460b      	mov	r3, r1
 8003694:	807b      	strh	r3, [r7, #2]
 8003696:	4613      	mov	r3, r2
 8003698:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800369a:	787b      	ldrb	r3, [r7, #1]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d003      	beq.n	80036a8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036a0:	887a      	ldrh	r2, [r7, #2]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80036a6:	e003      	b.n	80036b0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80036a8:	887b      	ldrh	r3, [r7, #2]
 80036aa:	041a      	lsls	r2, r3, #16
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	611a      	str	r2, [r3, #16]
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bc80      	pop	{r7}
 80036b8:	4770      	bx	lr
	...

080036bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e12b      	b.n	8003926 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d106      	bne.n	80036e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7fe fd3e 	bl	8002164 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2224      	movs	r2, #36	@ 0x24
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f022 0201 	bic.w	r2, r2, #1
 80036fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800370e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800371e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003720:	f001 fbec 	bl	8004efc <HAL_RCC_GetPCLK1Freq>
 8003724:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	4a81      	ldr	r2, [pc, #516]	@ (8003930 <HAL_I2C_Init+0x274>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d807      	bhi.n	8003740 <HAL_I2C_Init+0x84>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	4a80      	ldr	r2, [pc, #512]	@ (8003934 <HAL_I2C_Init+0x278>)
 8003734:	4293      	cmp	r3, r2
 8003736:	bf94      	ite	ls
 8003738:	2301      	movls	r3, #1
 800373a:	2300      	movhi	r3, #0
 800373c:	b2db      	uxtb	r3, r3
 800373e:	e006      	b.n	800374e <HAL_I2C_Init+0x92>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	4a7d      	ldr	r2, [pc, #500]	@ (8003938 <HAL_I2C_Init+0x27c>)
 8003744:	4293      	cmp	r3, r2
 8003746:	bf94      	ite	ls
 8003748:	2301      	movls	r3, #1
 800374a:	2300      	movhi	r3, #0
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e0e7      	b.n	8003926 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	4a78      	ldr	r2, [pc, #480]	@ (800393c <HAL_I2C_Init+0x280>)
 800375a:	fba2 2303 	umull	r2, r3, r2, r3
 800375e:	0c9b      	lsrs	r3, r3, #18
 8003760:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68ba      	ldr	r2, [r7, #8]
 8003772:	430a      	orrs	r2, r1
 8003774:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	4a6a      	ldr	r2, [pc, #424]	@ (8003930 <HAL_I2C_Init+0x274>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d802      	bhi.n	8003790 <HAL_I2C_Init+0xd4>
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	3301      	adds	r3, #1
 800378e:	e009      	b.n	80037a4 <HAL_I2C_Init+0xe8>
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003796:	fb02 f303 	mul.w	r3, r2, r3
 800379a:	4a69      	ldr	r2, [pc, #420]	@ (8003940 <HAL_I2C_Init+0x284>)
 800379c:	fba2 2303 	umull	r2, r3, r2, r3
 80037a0:	099b      	lsrs	r3, r3, #6
 80037a2:	3301      	adds	r3, #1
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	6812      	ldr	r2, [r2, #0]
 80037a8:	430b      	orrs	r3, r1
 80037aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80037b6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	495c      	ldr	r1, [pc, #368]	@ (8003930 <HAL_I2C_Init+0x274>)
 80037c0:	428b      	cmp	r3, r1
 80037c2:	d819      	bhi.n	80037f8 <HAL_I2C_Init+0x13c>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	1e59      	subs	r1, r3, #1
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80037d2:	1c59      	adds	r1, r3, #1
 80037d4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80037d8:	400b      	ands	r3, r1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00a      	beq.n	80037f4 <HAL_I2C_Init+0x138>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	1e59      	subs	r1, r3, #1
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	005b      	lsls	r3, r3, #1
 80037e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80037ec:	3301      	adds	r3, #1
 80037ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037f2:	e051      	b.n	8003898 <HAL_I2C_Init+0x1dc>
 80037f4:	2304      	movs	r3, #4
 80037f6:	e04f      	b.n	8003898 <HAL_I2C_Init+0x1dc>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d111      	bne.n	8003824 <HAL_I2C_Init+0x168>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	1e58      	subs	r0, r3, #1
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6859      	ldr	r1, [r3, #4]
 8003808:	460b      	mov	r3, r1
 800380a:	005b      	lsls	r3, r3, #1
 800380c:	440b      	add	r3, r1
 800380e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003812:	3301      	adds	r3, #1
 8003814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003818:	2b00      	cmp	r3, #0
 800381a:	bf0c      	ite	eq
 800381c:	2301      	moveq	r3, #1
 800381e:	2300      	movne	r3, #0
 8003820:	b2db      	uxtb	r3, r3
 8003822:	e012      	b.n	800384a <HAL_I2C_Init+0x18e>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	1e58      	subs	r0, r3, #1
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6859      	ldr	r1, [r3, #4]
 800382c:	460b      	mov	r3, r1
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	440b      	add	r3, r1
 8003832:	0099      	lsls	r1, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	fbb0 f3f3 	udiv	r3, r0, r3
 800383a:	3301      	adds	r3, #1
 800383c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003840:	2b00      	cmp	r3, #0
 8003842:	bf0c      	ite	eq
 8003844:	2301      	moveq	r3, #1
 8003846:	2300      	movne	r3, #0
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <HAL_I2C_Init+0x196>
 800384e:	2301      	movs	r3, #1
 8003850:	e022      	b.n	8003898 <HAL_I2C_Init+0x1dc>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10e      	bne.n	8003878 <HAL_I2C_Init+0x1bc>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	1e58      	subs	r0, r3, #1
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6859      	ldr	r1, [r3, #4]
 8003862:	460b      	mov	r3, r1
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	440b      	add	r3, r1
 8003868:	fbb0 f3f3 	udiv	r3, r0, r3
 800386c:	3301      	adds	r3, #1
 800386e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003872:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003876:	e00f      	b.n	8003898 <HAL_I2C_Init+0x1dc>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	1e58      	subs	r0, r3, #1
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6859      	ldr	r1, [r3, #4]
 8003880:	460b      	mov	r3, r1
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	440b      	add	r3, r1
 8003886:	0099      	lsls	r1, r3, #2
 8003888:	440b      	add	r3, r1
 800388a:	fbb0 f3f3 	udiv	r3, r0, r3
 800388e:	3301      	adds	r3, #1
 8003890:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003894:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003898:	6879      	ldr	r1, [r7, #4]
 800389a:	6809      	ldr	r1, [r1, #0]
 800389c:	4313      	orrs	r3, r2
 800389e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69da      	ldr	r2, [r3, #28]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	431a      	orrs	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	430a      	orrs	r2, r1
 80038ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80038c6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6911      	ldr	r1, [r2, #16]
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	68d2      	ldr	r2, [r2, #12]
 80038d2:	4311      	orrs	r1, r2
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	6812      	ldr	r2, [r2, #0]
 80038d8:	430b      	orrs	r3, r1
 80038da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	695a      	ldr	r2, [r3, #20]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	430a      	orrs	r2, r1
 80038f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f042 0201 	orr.w	r2, r2, #1
 8003906:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2220      	movs	r2, #32
 8003912:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	000186a0 	.word	0x000186a0
 8003934:	001e847f 	.word	0x001e847f
 8003938:	003d08ff 	.word	0x003d08ff
 800393c:	431bde83 	.word	0x431bde83
 8003940:	10624dd3 	.word	0x10624dd3

08003944 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b088      	sub	sp, #32
 8003948:	af02      	add	r7, sp, #8
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	607a      	str	r2, [r7, #4]
 800394e:	461a      	mov	r2, r3
 8003950:	460b      	mov	r3, r1
 8003952:	817b      	strh	r3, [r7, #10]
 8003954:	4613      	mov	r3, r2
 8003956:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003958:	f7fe feb6 	bl	80026c8 <HAL_GetTick>
 800395c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b20      	cmp	r3, #32
 8003968:	f040 80e0 	bne.w	8003b2c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	2319      	movs	r3, #25
 8003972:	2201      	movs	r2, #1
 8003974:	4970      	ldr	r1, [pc, #448]	@ (8003b38 <HAL_I2C_Master_Transmit+0x1f4>)
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	f000 fcc0 	bl	80042fc <I2C_WaitOnFlagUntilTimeout>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003982:	2302      	movs	r3, #2
 8003984:	e0d3      	b.n	8003b2e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800398c:	2b01      	cmp	r3, #1
 800398e:	d101      	bne.n	8003994 <HAL_I2C_Master_Transmit+0x50>
 8003990:	2302      	movs	r3, #2
 8003992:	e0cc      	b.n	8003b2e <HAL_I2C_Master_Transmit+0x1ea>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d007      	beq.n	80039ba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f042 0201 	orr.w	r2, r2, #1
 80039b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2221      	movs	r2, #33	@ 0x21
 80039ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2210      	movs	r2, #16
 80039d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	893a      	ldrh	r2, [r7, #8]
 80039ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	4a50      	ldr	r2, [pc, #320]	@ (8003b3c <HAL_I2C_Master_Transmit+0x1f8>)
 80039fa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80039fc:	8979      	ldrh	r1, [r7, #10]
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	6a3a      	ldr	r2, [r7, #32]
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f000 fb10 	bl	8004028 <I2C_MasterRequestWrite>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e08d      	b.n	8003b2e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a12:	2300      	movs	r3, #0
 8003a14:	613b      	str	r3, [r7, #16]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	613b      	str	r3, [r7, #16]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	613b      	str	r3, [r7, #16]
 8003a26:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003a28:	e066      	b.n	8003af8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	6a39      	ldr	r1, [r7, #32]
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f000 fd7e 	bl	8004530 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00d      	beq.n	8003a56 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a3e:	2b04      	cmp	r3, #4
 8003a40:	d107      	bne.n	8003a52 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a50:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e06b      	b.n	8003b2e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5a:	781a      	ldrb	r2, [r3, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a66:	1c5a      	adds	r2, r3, #1
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	3b01      	subs	r3, #1
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	2b04      	cmp	r3, #4
 8003a92:	d11b      	bne.n	8003acc <HAL_I2C_Master_Transmit+0x188>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d017      	beq.n	8003acc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa0:	781a      	ldrb	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aac:	1c5a      	adds	r2, r3, #1
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	6a39      	ldr	r1, [r7, #32]
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f000 fd75 	bl	80045c0 <I2C_WaitOnBTFFlagUntilTimeout>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00d      	beq.n	8003af8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae0:	2b04      	cmp	r3, #4
 8003ae2:	d107      	bne.n	8003af4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003af2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e01a      	b.n	8003b2e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d194      	bne.n	8003a2a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2220      	movs	r2, #32
 8003b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	e000      	b.n	8003b2e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003b2c:	2302      	movs	r3, #2
  }
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3718      	adds	r7, #24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	00100002 	.word	0x00100002
 8003b3c:	ffff0000 	.word	0xffff0000

08003b40 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b08c      	sub	sp, #48	@ 0x30
 8003b44:	af02      	add	r7, sp, #8
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	4608      	mov	r0, r1
 8003b4a:	4611      	mov	r1, r2
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	4603      	mov	r3, r0
 8003b50:	817b      	strh	r3, [r7, #10]
 8003b52:	460b      	mov	r3, r1
 8003b54:	813b      	strh	r3, [r7, #8]
 8003b56:	4613      	mov	r3, r2
 8003b58:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b5e:	f7fe fdb3 	bl	80026c8 <HAL_GetTick>
 8003b62:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b20      	cmp	r3, #32
 8003b6e:	f040 8250 	bne.w	8004012 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	2319      	movs	r3, #25
 8003b78:	2201      	movs	r2, #1
 8003b7a:	4982      	ldr	r1, [pc, #520]	@ (8003d84 <HAL_I2C_Mem_Read+0x244>)
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 fbbd 	bl	80042fc <I2C_WaitOnFlagUntilTimeout>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003b88:	2302      	movs	r3, #2
 8003b8a:	e243      	b.n	8004014 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d101      	bne.n	8003b9a <HAL_I2C_Mem_Read+0x5a>
 8003b96:	2302      	movs	r3, #2
 8003b98:	e23c      	b.n	8004014 <HAL_I2C_Mem_Read+0x4d4>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d007      	beq.n	8003bc0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f042 0201 	orr.w	r2, r2, #1
 8003bbe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2222      	movs	r2, #34	@ 0x22
 8003bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2240      	movs	r2, #64	@ 0x40
 8003bdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003bf0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	4a62      	ldr	r2, [pc, #392]	@ (8003d88 <HAL_I2C_Mem_Read+0x248>)
 8003c00:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c02:	88f8      	ldrh	r0, [r7, #6]
 8003c04:	893a      	ldrh	r2, [r7, #8]
 8003c06:	8979      	ldrh	r1, [r7, #10]
 8003c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0a:	9301      	str	r3, [sp, #4]
 8003c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c0e:	9300      	str	r3, [sp, #0]
 8003c10:	4603      	mov	r3, r0
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 fa8a 	bl	800412c <I2C_RequestMemoryRead>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e1f8      	b.n	8004014 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d113      	bne.n	8003c52 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	61fb      	str	r3, [r7, #28]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	61fb      	str	r3, [r7, #28]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	61fb      	str	r3, [r7, #28]
 8003c3e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c4e:	601a      	str	r2, [r3, #0]
 8003c50:	e1cc      	b.n	8003fec <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d11e      	bne.n	8003c98 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c68:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c6a:	b672      	cpsid	i
}
 8003c6c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c6e:	2300      	movs	r3, #0
 8003c70:	61bb      	str	r3, [r7, #24]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	61bb      	str	r3, [r7, #24]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	61bb      	str	r3, [r7, #24]
 8003c82:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c92:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003c94:	b662      	cpsie	i
}
 8003c96:	e035      	b.n	8003d04 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d11e      	bne.n	8003cde <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003cb0:	b672      	cpsid	i
}
 8003cb2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	617b      	str	r3, [r7, #20]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	617b      	str	r3, [r7, #20]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	617b      	str	r3, [r7, #20]
 8003cc8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cd8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003cda:	b662      	cpsie	i
}
 8003cdc:	e012      	b.n	8003d04 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003cec:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cee:	2300      	movs	r3, #0
 8003cf0:	613b      	str	r3, [r7, #16]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	613b      	str	r3, [r7, #16]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	613b      	str	r3, [r7, #16]
 8003d02:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003d04:	e172      	b.n	8003fec <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d0a:	2b03      	cmp	r3, #3
 8003d0c:	f200 811f 	bhi.w	8003f4e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d123      	bne.n	8003d60 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d1a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003d1c:	68f8      	ldr	r0, [r7, #12]
 8003d1e:	f000 fc97 	bl	8004650 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e173      	b.n	8004014 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	691a      	ldr	r2, [r3, #16]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d36:	b2d2      	uxtb	r2, r2
 8003d38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3e:	1c5a      	adds	r2, r3, #1
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	3b01      	subs	r3, #1
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d5e:	e145      	b.n	8003fec <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d152      	bne.n	8003e0e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6a:	9300      	str	r3, [sp, #0]
 8003d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d6e:	2200      	movs	r2, #0
 8003d70:	4906      	ldr	r1, [pc, #24]	@ (8003d8c <HAL_I2C_Mem_Read+0x24c>)
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f000 fac2 	bl	80042fc <I2C_WaitOnFlagUntilTimeout>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d008      	beq.n	8003d90 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e148      	b.n	8004014 <HAL_I2C_Mem_Read+0x4d4>
 8003d82:	bf00      	nop
 8003d84:	00100002 	.word	0x00100002
 8003d88:	ffff0000 	.word	0xffff0000
 8003d8c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003d90:	b672      	cpsid	i
}
 8003d92:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003da2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	691a      	ldr	r2, [r3, #16]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dae:	b2d2      	uxtb	r2, r2
 8003db0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db6:	1c5a      	adds	r2, r3, #1
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003dd6:	b662      	cpsie	i
}
 8003dd8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	691a      	ldr	r2, [r3, #16]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de4:	b2d2      	uxtb	r2, r2
 8003de6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dec:	1c5a      	adds	r2, r3, #1
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003df6:	3b01      	subs	r3, #1
 8003df8:	b29a      	uxth	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	3b01      	subs	r3, #1
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e0c:	e0ee      	b.n	8003fec <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e14:	2200      	movs	r2, #0
 8003e16:	4981      	ldr	r1, [pc, #516]	@ (800401c <HAL_I2C_Mem_Read+0x4dc>)
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f000 fa6f 	bl	80042fc <I2C_WaitOnFlagUntilTimeout>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d001      	beq.n	8003e28 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e0f5      	b.n	8004014 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e36:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e38:	b672      	cpsid	i
}
 8003e3a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	691a      	ldr	r2, [r3, #16]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e46:	b2d2      	uxtb	r2, r2
 8003e48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4e:	1c5a      	adds	r2, r3, #1
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	3b01      	subs	r3, #1
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003e6e:	4b6c      	ldr	r3, [pc, #432]	@ (8004020 <HAL_I2C_Mem_Read+0x4e0>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	08db      	lsrs	r3, r3, #3
 8003e74:	4a6b      	ldr	r2, [pc, #428]	@ (8004024 <HAL_I2C_Mem_Read+0x4e4>)
 8003e76:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7a:	0a1a      	lsrs	r2, r3, #8
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4413      	add	r3, r2
 8003e82:	00da      	lsls	r2, r3, #3
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003e88:	6a3b      	ldr	r3, [r7, #32]
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003e8e:	6a3b      	ldr	r3, [r7, #32]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d118      	bne.n	8003ec6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eae:	f043 0220 	orr.w	r2, r3, #32
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003eb6:	b662      	cpsie	i
}
 8003eb8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e0a6      	b.n	8004014 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b04      	cmp	r3, #4
 8003ed2:	d1d9      	bne.n	8003e88 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ee2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	691a      	ldr	r2, [r3, #16]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eee:	b2d2      	uxtb	r2, r2
 8003ef0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef6:	1c5a      	adds	r2, r3, #1
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f00:	3b01      	subs	r3, #1
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003f16:	b662      	cpsie	i
}
 8003f18:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	691a      	ldr	r2, [r3, #16]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f24:	b2d2      	uxtb	r2, r2
 8003f26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2c:	1c5a      	adds	r2, r3, #1
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f36:	3b01      	subs	r3, #1
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	3b01      	subs	r3, #1
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f4c:	e04e      	b.n	8003fec <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f50:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f000 fb7c 	bl	8004650 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e058      	b.n	8004014 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	691a      	ldr	r2, [r3, #16]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6c:	b2d2      	uxtb	r2, r2
 8003f6e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f74:	1c5a      	adds	r2, r3, #1
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	f003 0304 	and.w	r3, r3, #4
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	d124      	bne.n	8003fec <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fa6:	2b03      	cmp	r3, #3
 8003fa8:	d107      	bne.n	8003fba <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fb8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	691a      	ldr	r2, [r3, #16]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc4:	b2d2      	uxtb	r2, r2
 8003fc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fcc:	1c5a      	adds	r2, r3, #1
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f47f ae88 	bne.w	8003d06 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2220      	movs	r2, #32
 8003ffa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800400e:	2300      	movs	r3, #0
 8004010:	e000      	b.n	8004014 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8004012:	2302      	movs	r3, #2
  }
}
 8004014:	4618      	mov	r0, r3
 8004016:	3728      	adds	r7, #40	@ 0x28
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	00010004 	.word	0x00010004
 8004020:	20000000 	.word	0x20000000
 8004024:	14f8b589 	.word	0x14f8b589

08004028 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b088      	sub	sp, #32
 800402c:	af02      	add	r7, sp, #8
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	607a      	str	r2, [r7, #4]
 8004032:	603b      	str	r3, [r7, #0]
 8004034:	460b      	mov	r3, r1
 8004036:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800403c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	2b08      	cmp	r3, #8
 8004042:	d006      	beq.n	8004052 <I2C_MasterRequestWrite+0x2a>
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d003      	beq.n	8004052 <I2C_MasterRequestWrite+0x2a>
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004050:	d108      	bne.n	8004064 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004060:	601a      	str	r2, [r3, #0]
 8004062:	e00b      	b.n	800407c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004068:	2b12      	cmp	r3, #18
 800406a:	d107      	bne.n	800407c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800407a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f000 f937 	bl	80042fc <I2C_WaitOnFlagUntilTimeout>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00d      	beq.n	80040b0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800409e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040a2:	d103      	bne.n	80040ac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e035      	b.n	800411c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040b8:	d108      	bne.n	80040cc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040ba:	897b      	ldrh	r3, [r7, #10]
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	461a      	mov	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80040c8:	611a      	str	r2, [r3, #16]
 80040ca:	e01b      	b.n	8004104 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80040cc:	897b      	ldrh	r3, [r7, #10]
 80040ce:	11db      	asrs	r3, r3, #7
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	f003 0306 	and.w	r3, r3, #6
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	f063 030f 	orn	r3, r3, #15
 80040dc:	b2da      	uxtb	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	490e      	ldr	r1, [pc, #56]	@ (8004124 <I2C_MasterRequestWrite+0xfc>)
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f000 f980 	bl	80043f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e010      	b.n	800411c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80040fa:	897b      	ldrh	r3, [r7, #10]
 80040fc:	b2da      	uxtb	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	4907      	ldr	r1, [pc, #28]	@ (8004128 <I2C_MasterRequestWrite+0x100>)
 800410a:	68f8      	ldr	r0, [r7, #12]
 800410c:	f000 f970 	bl	80043f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e000      	b.n	800411c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3718      	adds	r7, #24
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	00010008 	.word	0x00010008
 8004128:	00010002 	.word	0x00010002

0800412c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b088      	sub	sp, #32
 8004130:	af02      	add	r7, sp, #8
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	4608      	mov	r0, r1
 8004136:	4611      	mov	r1, r2
 8004138:	461a      	mov	r2, r3
 800413a:	4603      	mov	r3, r0
 800413c:	817b      	strh	r3, [r7, #10]
 800413e:	460b      	mov	r3, r1
 8004140:	813b      	strh	r3, [r7, #8]
 8004142:	4613      	mov	r3, r2
 8004144:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004154:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004164:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004168:	9300      	str	r3, [sp, #0]
 800416a:	6a3b      	ldr	r3, [r7, #32]
 800416c:	2200      	movs	r2, #0
 800416e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f000 f8c2 	bl	80042fc <I2C_WaitOnFlagUntilTimeout>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00d      	beq.n	800419a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004188:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800418c:	d103      	bne.n	8004196 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004194:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e0aa      	b.n	80042f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800419a:	897b      	ldrh	r3, [r7, #10]
 800419c:	b2db      	uxtb	r3, r3
 800419e:	461a      	mov	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80041a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ac:	6a3a      	ldr	r2, [r7, #32]
 80041ae:	4952      	ldr	r1, [pc, #328]	@ (80042f8 <I2C_RequestMemoryRead+0x1cc>)
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f000 f91d 	bl	80043f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d001      	beq.n	80041c0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e097      	b.n	80042f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041c0:	2300      	movs	r3, #0
 80041c2:	617b      	str	r3, [r7, #20]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	617b      	str	r3, [r7, #20]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	617b      	str	r3, [r7, #20]
 80041d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041d8:	6a39      	ldr	r1, [r7, #32]
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f000 f9a8 	bl	8004530 <I2C_WaitOnTXEFlagUntilTimeout>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00d      	beq.n	8004202 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ea:	2b04      	cmp	r3, #4
 80041ec:	d107      	bne.n	80041fe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e076      	b.n	80042f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004202:	88fb      	ldrh	r3, [r7, #6]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d105      	bne.n	8004214 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004208:	893b      	ldrh	r3, [r7, #8]
 800420a:	b2da      	uxtb	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	611a      	str	r2, [r3, #16]
 8004212:	e021      	b.n	8004258 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004214:	893b      	ldrh	r3, [r7, #8]
 8004216:	0a1b      	lsrs	r3, r3, #8
 8004218:	b29b      	uxth	r3, r3
 800421a:	b2da      	uxtb	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004222:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004224:	6a39      	ldr	r1, [r7, #32]
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f000 f982 	bl	8004530 <I2C_WaitOnTXEFlagUntilTimeout>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00d      	beq.n	800424e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004236:	2b04      	cmp	r3, #4
 8004238:	d107      	bne.n	800424a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004248:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e050      	b.n	80042f0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800424e:	893b      	ldrh	r3, [r7, #8]
 8004250:	b2da      	uxtb	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004258:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800425a:	6a39      	ldr	r1, [r7, #32]
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	f000 f967 	bl	8004530 <I2C_WaitOnTXEFlagUntilTimeout>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00d      	beq.n	8004284 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426c:	2b04      	cmp	r3, #4
 800426e:	d107      	bne.n	8004280 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800427e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e035      	b.n	80042f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004292:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	6a3b      	ldr	r3, [r7, #32]
 800429a:	2200      	movs	r2, #0
 800429c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f000 f82b 	bl	80042fc <I2C_WaitOnFlagUntilTimeout>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00d      	beq.n	80042c8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042ba:	d103      	bne.n	80042c4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042c2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e013      	b.n	80042f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80042c8:	897b      	ldrh	r3, [r7, #10]
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	f043 0301 	orr.w	r3, r3, #1
 80042d0:	b2da      	uxtb	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042da:	6a3a      	ldr	r2, [r7, #32]
 80042dc:	4906      	ldr	r1, [pc, #24]	@ (80042f8 <I2C_RequestMemoryRead+0x1cc>)
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f000 f886 	bl	80043f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e000      	b.n	80042f0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3718      	adds	r7, #24
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	00010002 	.word	0x00010002

080042fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	603b      	str	r3, [r7, #0]
 8004308:	4613      	mov	r3, r2
 800430a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800430c:	e048      	b.n	80043a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004314:	d044      	beq.n	80043a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004316:	f7fe f9d7 	bl	80026c8 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	429a      	cmp	r2, r3
 8004324:	d302      	bcc.n	800432c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d139      	bne.n	80043a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	0c1b      	lsrs	r3, r3, #16
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b01      	cmp	r3, #1
 8004334:	d10d      	bne.n	8004352 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	695b      	ldr	r3, [r3, #20]
 800433c:	43da      	mvns	r2, r3
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	4013      	ands	r3, r2
 8004342:	b29b      	uxth	r3, r3
 8004344:	2b00      	cmp	r3, #0
 8004346:	bf0c      	ite	eq
 8004348:	2301      	moveq	r3, #1
 800434a:	2300      	movne	r3, #0
 800434c:	b2db      	uxtb	r3, r3
 800434e:	461a      	mov	r2, r3
 8004350:	e00c      	b.n	800436c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	43da      	mvns	r2, r3
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	4013      	ands	r3, r2
 800435e:	b29b      	uxth	r3, r3
 8004360:	2b00      	cmp	r3, #0
 8004362:	bf0c      	ite	eq
 8004364:	2301      	moveq	r3, #1
 8004366:	2300      	movne	r3, #0
 8004368:	b2db      	uxtb	r3, r3
 800436a:	461a      	mov	r2, r3
 800436c:	79fb      	ldrb	r3, [r7, #7]
 800436e:	429a      	cmp	r2, r3
 8004370:	d116      	bne.n	80043a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2220      	movs	r2, #32
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438c:	f043 0220 	orr.w	r2, r3, #32
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e023      	b.n	80043e8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	0c1b      	lsrs	r3, r3, #16
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d10d      	bne.n	80043c6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	43da      	mvns	r2, r3
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	4013      	ands	r3, r2
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	bf0c      	ite	eq
 80043bc:	2301      	moveq	r3, #1
 80043be:	2300      	movne	r3, #0
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	461a      	mov	r2, r3
 80043c4:	e00c      	b.n	80043e0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	43da      	mvns	r2, r3
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	4013      	ands	r3, r2
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	bf0c      	ite	eq
 80043d8:	2301      	moveq	r3, #1
 80043da:	2300      	movne	r3, #0
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	461a      	mov	r2, r3
 80043e0:	79fb      	ldrb	r3, [r7, #7]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d093      	beq.n	800430e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]
 80043fc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043fe:	e071      	b.n	80044e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800440a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800440e:	d123      	bne.n	8004458 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800441e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004428:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2220      	movs	r2, #32
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004444:	f043 0204 	orr.w	r2, r3, #4
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e067      	b.n	8004528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445e:	d041      	beq.n	80044e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004460:	f7fe f932 	bl	80026c8 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	429a      	cmp	r2, r3
 800446e:	d302      	bcc.n	8004476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d136      	bne.n	80044e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	0c1b      	lsrs	r3, r3, #16
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b01      	cmp	r3, #1
 800447e:	d10c      	bne.n	800449a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	43da      	mvns	r2, r3
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	4013      	ands	r3, r2
 800448c:	b29b      	uxth	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	bf14      	ite	ne
 8004492:	2301      	movne	r3, #1
 8004494:	2300      	moveq	r3, #0
 8004496:	b2db      	uxtb	r3, r3
 8004498:	e00b      	b.n	80044b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	43da      	mvns	r2, r3
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	4013      	ands	r3, r2
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	bf14      	ite	ne
 80044ac:	2301      	movne	r3, #1
 80044ae:	2300      	moveq	r3, #0
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d016      	beq.n	80044e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2220      	movs	r2, #32
 80044c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d0:	f043 0220 	orr.w	r2, r3, #32
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e021      	b.n	8004528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	0c1b      	lsrs	r3, r3, #16
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d10c      	bne.n	8004508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	43da      	mvns	r2, r3
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	4013      	ands	r3, r2
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	bf14      	ite	ne
 8004500:	2301      	movne	r3, #1
 8004502:	2300      	moveq	r3, #0
 8004504:	b2db      	uxtb	r3, r3
 8004506:	e00b      	b.n	8004520 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	43da      	mvns	r2, r3
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	4013      	ands	r3, r2
 8004514:	b29b      	uxth	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	bf14      	ite	ne
 800451a:	2301      	movne	r3, #1
 800451c:	2300      	moveq	r3, #0
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b00      	cmp	r3, #0
 8004522:	f47f af6d 	bne.w	8004400 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800453c:	e034      	b.n	80045a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	f000 f8e3 	bl	800470a <I2C_IsAcknowledgeFailed>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d001      	beq.n	800454e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e034      	b.n	80045b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004554:	d028      	beq.n	80045a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004556:	f7fe f8b7 	bl	80026c8 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	68ba      	ldr	r2, [r7, #8]
 8004562:	429a      	cmp	r2, r3
 8004564:	d302      	bcc.n	800456c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d11d      	bne.n	80045a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004576:	2b80      	cmp	r3, #128	@ 0x80
 8004578:	d016      	beq.n	80045a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2220      	movs	r2, #32
 8004584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004594:	f043 0220 	orr.w	r2, r3, #32
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e007      	b.n	80045b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045b2:	2b80      	cmp	r3, #128	@ 0x80
 80045b4:	d1c3      	bne.n	800453e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045cc:	e034      	b.n	8004638 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f000 f89b 	bl	800470a <I2C_IsAcknowledgeFailed>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e034      	b.n	8004648 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e4:	d028      	beq.n	8004638 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045e6:	f7fe f86f 	bl	80026c8 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	68ba      	ldr	r2, [r7, #8]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d302      	bcc.n	80045fc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d11d      	bne.n	8004638 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	f003 0304 	and.w	r3, r3, #4
 8004606:	2b04      	cmp	r3, #4
 8004608:	d016      	beq.n	8004638 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2220      	movs	r2, #32
 8004614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004624:	f043 0220 	orr.w	r2, r3, #32
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e007      	b.n	8004648 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	f003 0304 	and.w	r3, r3, #4
 8004642:	2b04      	cmp	r3, #4
 8004644:	d1c3      	bne.n	80045ce <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800465c:	e049      	b.n	80046f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	f003 0310 	and.w	r3, r3, #16
 8004668:	2b10      	cmp	r3, #16
 800466a:	d119      	bne.n	80046a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f06f 0210 	mvn.w	r2, #16
 8004674:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2220      	movs	r2, #32
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e030      	b.n	8004702 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046a0:	f7fe f812 	bl	80026c8 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	68ba      	ldr	r2, [r7, #8]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d302      	bcc.n	80046b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d11d      	bne.n	80046f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	695b      	ldr	r3, [r3, #20]
 80046bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046c0:	2b40      	cmp	r3, #64	@ 0x40
 80046c2:	d016      	beq.n	80046f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2220      	movs	r2, #32
 80046ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046de:	f043 0220 	orr.w	r2, r3, #32
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e007      	b.n	8004702 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046fc:	2b40      	cmp	r3, #64	@ 0x40
 80046fe:	d1ae      	bne.n	800465e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3710      	adds	r7, #16
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800470a:	b480      	push	{r7}
 800470c:	b083      	sub	sp, #12
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800471c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004720:	d11b      	bne.n	800475a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800472a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2220      	movs	r2, #32
 8004736:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004746:	f043 0204 	orr.w	r2, r3, #4
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e000      	b.n	800475c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	bc80      	pop	{r7}
 8004764:	4770      	bx	lr
	...

08004768 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e272      	b.n	8004c60 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b00      	cmp	r3, #0
 8004784:	f000 8087 	beq.w	8004896 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004788:	4b92      	ldr	r3, [pc, #584]	@ (80049d4 <HAL_RCC_OscConfig+0x26c>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f003 030c 	and.w	r3, r3, #12
 8004790:	2b04      	cmp	r3, #4
 8004792:	d00c      	beq.n	80047ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004794:	4b8f      	ldr	r3, [pc, #572]	@ (80049d4 <HAL_RCC_OscConfig+0x26c>)
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f003 030c 	and.w	r3, r3, #12
 800479c:	2b08      	cmp	r3, #8
 800479e:	d112      	bne.n	80047c6 <HAL_RCC_OscConfig+0x5e>
 80047a0:	4b8c      	ldr	r3, [pc, #560]	@ (80049d4 <HAL_RCC_OscConfig+0x26c>)
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047ac:	d10b      	bne.n	80047c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047ae:	4b89      	ldr	r3, [pc, #548]	@ (80049d4 <HAL_RCC_OscConfig+0x26c>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d06c      	beq.n	8004894 <HAL_RCC_OscConfig+0x12c>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d168      	bne.n	8004894 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e24c      	b.n	8004c60 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047ce:	d106      	bne.n	80047de <HAL_RCC_OscConfig+0x76>
 80047d0:	4b80      	ldr	r3, [pc, #512]	@ (80049d4 <HAL_RCC_OscConfig+0x26c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a7f      	ldr	r2, [pc, #508]	@ (80049d4 <HAL_RCC_OscConfig+0x26c>)
 80047d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047da:	6013      	str	r3, [r2, #0]
 80047dc:	e02e      	b.n	800483c <HAL_RCC_OscConfig+0xd4>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10c      	bne.n	8004800 <HAL_RCC_OscConfig+0x98>
 80047e6:	4b7b      	ldr	r3, [pc, #492]	@ (80049d4 <HAL_RCC_OscConfig+0x26c>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a7a      	ldr	r2, [pc, #488]	@ (80049d4 <HAL_RCC_OscConfig+0x26c>)
 80047ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047f0:	6013      	str	r3, [r2, #0]
 80047f2:	4b78      	ldr	r3, [pc, #480]	@ (80049d4 <HAL_RCC_OscConfig+0x26c>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a77      	ldr	r2, [pc, #476]	@ (80049d4 <HAL_RCC_OscConfig+0x26c>)
 80047f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047fc:	6013      	str	r3, [r2, #0]
 80047fe:	e01d      	b.n	800483c <HAL_RCC_OscConfig+0xd4>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004808:	d10c      	bne.n	8004824 <HAL_RCC_OscConfig+0xbc>
 800480a:	4b72      	ldr	r3, [pc, #456]	@ (80049d4 <HAL_RCC_OscConfig+0x26c>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a71      	ldr	r2, [pc, #452]	@ (80049d4 <HAL_RCC_OscConfig+0x26c>)
 8004810:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004814:	6013      	str	r3, [r2, #0]
 8004816:	4b6f      	ldr	r3, [pc, #444]	@ (80049d4 <HAL_RCC_OscConfig+0x26c>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a6e      	ldr	r2, [pc, #440]	@ (80049d4 <HAL_RCC_OscConfig+0x26c>)
 800481c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004820:	6013      	str	r3, [r2, #0]
 8004822:	e00b      	b.n	800483c <HAL_RCC_OscConfig+0xd4>
 8004824:	4b6b      	ldr	r3, [pc, #428]	@ (80049d4 <HAL_RCC_OscConfig+0x26c>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a6a      	ldr	r2, [pc, #424]	@ (80049d4 <HAL_RCC_OscConfig+0x26c>)
 800482a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800482e:	6013      	str	r3, [r2, #0]
 8004830:	4b68      	ldr	r3, [pc, #416]	@ (80049d4 <HAL_RCC_OscConfig+0x26c>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a67      	ldr	r2, [pc, #412]	@ (80049d4 <HAL_RCC_OscConfig+0x26c>)
 8004836:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800483a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d013      	beq.n	800486c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004844:	f7fd ff40 	bl	80026c8 <HAL_GetTick>
 8004848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800484a:	e008      	b.n	800485e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800484c:	f7fd ff3c 	bl	80026c8 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b64      	cmp	r3, #100	@ 0x64
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e200      	b.n	8004c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800485e:	4b5d      	ldr	r3, [pc, #372]	@ (80049d4 <HAL_RCC_OscConfig+0x26c>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d0f0      	beq.n	800484c <HAL_RCC_OscConfig+0xe4>
 800486a:	e014      	b.n	8004896 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800486c:	f7fd ff2c 	bl	80026c8 <HAL_GetTick>
 8004870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004872:	e008      	b.n	8004886 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004874:	f7fd ff28 	bl	80026c8 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b64      	cmp	r3, #100	@ 0x64
 8004880:	d901      	bls.n	8004886 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e1ec      	b.n	8004c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004886:	4b53      	ldr	r3, [pc, #332]	@ (80049d4 <HAL_RCC_OscConfig+0x26c>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1f0      	bne.n	8004874 <HAL_RCC_OscConfig+0x10c>
 8004892:	e000      	b.n	8004896 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004894:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d063      	beq.n	800496a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80048a2:	4b4c      	ldr	r3, [pc, #304]	@ (80049d4 <HAL_RCC_OscConfig+0x26c>)
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f003 030c 	and.w	r3, r3, #12
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00b      	beq.n	80048c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80048ae:	4b49      	ldr	r3, [pc, #292]	@ (80049d4 <HAL_RCC_OscConfig+0x26c>)
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f003 030c 	and.w	r3, r3, #12
 80048b6:	2b08      	cmp	r3, #8
 80048b8:	d11c      	bne.n	80048f4 <HAL_RCC_OscConfig+0x18c>
 80048ba:	4b46      	ldr	r3, [pc, #280]	@ (80049d4 <HAL_RCC_OscConfig+0x26c>)
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d116      	bne.n	80048f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048c6:	4b43      	ldr	r3, [pc, #268]	@ (80049d4 <HAL_RCC_OscConfig+0x26c>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d005      	beq.n	80048de <HAL_RCC_OscConfig+0x176>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d001      	beq.n	80048de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e1c0      	b.n	8004c60 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048de:	4b3d      	ldr	r3, [pc, #244]	@ (80049d4 <HAL_RCC_OscConfig+0x26c>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	00db      	lsls	r3, r3, #3
 80048ec:	4939      	ldr	r1, [pc, #228]	@ (80049d4 <HAL_RCC_OscConfig+0x26c>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048f2:	e03a      	b.n	800496a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d020      	beq.n	800493e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048fc:	4b36      	ldr	r3, [pc, #216]	@ (80049d8 <HAL_RCC_OscConfig+0x270>)
 80048fe:	2201      	movs	r2, #1
 8004900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004902:	f7fd fee1 	bl	80026c8 <HAL_GetTick>
 8004906:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004908:	e008      	b.n	800491c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800490a:	f7fd fedd 	bl	80026c8 <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	2b02      	cmp	r3, #2
 8004916:	d901      	bls.n	800491c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e1a1      	b.n	8004c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800491c:	4b2d      	ldr	r3, [pc, #180]	@ (80049d4 <HAL_RCC_OscConfig+0x26c>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d0f0      	beq.n	800490a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004928:	4b2a      	ldr	r3, [pc, #168]	@ (80049d4 <HAL_RCC_OscConfig+0x26c>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	00db      	lsls	r3, r3, #3
 8004936:	4927      	ldr	r1, [pc, #156]	@ (80049d4 <HAL_RCC_OscConfig+0x26c>)
 8004938:	4313      	orrs	r3, r2
 800493a:	600b      	str	r3, [r1, #0]
 800493c:	e015      	b.n	800496a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800493e:	4b26      	ldr	r3, [pc, #152]	@ (80049d8 <HAL_RCC_OscConfig+0x270>)
 8004940:	2200      	movs	r2, #0
 8004942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004944:	f7fd fec0 	bl	80026c8 <HAL_GetTick>
 8004948:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800494a:	e008      	b.n	800495e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800494c:	f7fd febc 	bl	80026c8 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b02      	cmp	r3, #2
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e180      	b.n	8004c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800495e:	4b1d      	ldr	r3, [pc, #116]	@ (80049d4 <HAL_RCC_OscConfig+0x26c>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1f0      	bne.n	800494c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0308 	and.w	r3, r3, #8
 8004972:	2b00      	cmp	r3, #0
 8004974:	d03a      	beq.n	80049ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d019      	beq.n	80049b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800497e:	4b17      	ldr	r3, [pc, #92]	@ (80049dc <HAL_RCC_OscConfig+0x274>)
 8004980:	2201      	movs	r2, #1
 8004982:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004984:	f7fd fea0 	bl	80026c8 <HAL_GetTick>
 8004988:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800498a:	e008      	b.n	800499e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800498c:	f7fd fe9c 	bl	80026c8 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	2b02      	cmp	r3, #2
 8004998:	d901      	bls.n	800499e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e160      	b.n	8004c60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800499e:	4b0d      	ldr	r3, [pc, #52]	@ (80049d4 <HAL_RCC_OscConfig+0x26c>)
 80049a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a2:	f003 0302 	and.w	r3, r3, #2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d0f0      	beq.n	800498c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80049aa:	2001      	movs	r0, #1
 80049ac:	f000 face 	bl	8004f4c <RCC_Delay>
 80049b0:	e01c      	b.n	80049ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049b2:	4b0a      	ldr	r3, [pc, #40]	@ (80049dc <HAL_RCC_OscConfig+0x274>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049b8:	f7fd fe86 	bl	80026c8 <HAL_GetTick>
 80049bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049be:	e00f      	b.n	80049e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049c0:	f7fd fe82 	bl	80026c8 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d908      	bls.n	80049e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e146      	b.n	8004c60 <HAL_RCC_OscConfig+0x4f8>
 80049d2:	bf00      	nop
 80049d4:	40021000 	.word	0x40021000
 80049d8:	42420000 	.word	0x42420000
 80049dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049e0:	4b92      	ldr	r3, [pc, #584]	@ (8004c2c <HAL_RCC_OscConfig+0x4c4>)
 80049e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1e9      	bne.n	80049c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0304 	and.w	r3, r3, #4
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 80a6 	beq.w	8004b46 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049fa:	2300      	movs	r3, #0
 80049fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049fe:	4b8b      	ldr	r3, [pc, #556]	@ (8004c2c <HAL_RCC_OscConfig+0x4c4>)
 8004a00:	69db      	ldr	r3, [r3, #28]
 8004a02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d10d      	bne.n	8004a26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a0a:	4b88      	ldr	r3, [pc, #544]	@ (8004c2c <HAL_RCC_OscConfig+0x4c4>)
 8004a0c:	69db      	ldr	r3, [r3, #28]
 8004a0e:	4a87      	ldr	r2, [pc, #540]	@ (8004c2c <HAL_RCC_OscConfig+0x4c4>)
 8004a10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a14:	61d3      	str	r3, [r2, #28]
 8004a16:	4b85      	ldr	r3, [pc, #532]	@ (8004c2c <HAL_RCC_OscConfig+0x4c4>)
 8004a18:	69db      	ldr	r3, [r3, #28]
 8004a1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a1e:	60bb      	str	r3, [r7, #8]
 8004a20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a22:	2301      	movs	r3, #1
 8004a24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a26:	4b82      	ldr	r3, [pc, #520]	@ (8004c30 <HAL_RCC_OscConfig+0x4c8>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d118      	bne.n	8004a64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a32:	4b7f      	ldr	r3, [pc, #508]	@ (8004c30 <HAL_RCC_OscConfig+0x4c8>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a7e      	ldr	r2, [pc, #504]	@ (8004c30 <HAL_RCC_OscConfig+0x4c8>)
 8004a38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a3e:	f7fd fe43 	bl	80026c8 <HAL_GetTick>
 8004a42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a44:	e008      	b.n	8004a58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a46:	f7fd fe3f 	bl	80026c8 <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	2b64      	cmp	r3, #100	@ 0x64
 8004a52:	d901      	bls.n	8004a58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e103      	b.n	8004c60 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a58:	4b75      	ldr	r3, [pc, #468]	@ (8004c30 <HAL_RCC_OscConfig+0x4c8>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d0f0      	beq.n	8004a46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d106      	bne.n	8004a7a <HAL_RCC_OscConfig+0x312>
 8004a6c:	4b6f      	ldr	r3, [pc, #444]	@ (8004c2c <HAL_RCC_OscConfig+0x4c4>)
 8004a6e:	6a1b      	ldr	r3, [r3, #32]
 8004a70:	4a6e      	ldr	r2, [pc, #440]	@ (8004c2c <HAL_RCC_OscConfig+0x4c4>)
 8004a72:	f043 0301 	orr.w	r3, r3, #1
 8004a76:	6213      	str	r3, [r2, #32]
 8004a78:	e02d      	b.n	8004ad6 <HAL_RCC_OscConfig+0x36e>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10c      	bne.n	8004a9c <HAL_RCC_OscConfig+0x334>
 8004a82:	4b6a      	ldr	r3, [pc, #424]	@ (8004c2c <HAL_RCC_OscConfig+0x4c4>)
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	4a69      	ldr	r2, [pc, #420]	@ (8004c2c <HAL_RCC_OscConfig+0x4c4>)
 8004a88:	f023 0301 	bic.w	r3, r3, #1
 8004a8c:	6213      	str	r3, [r2, #32]
 8004a8e:	4b67      	ldr	r3, [pc, #412]	@ (8004c2c <HAL_RCC_OscConfig+0x4c4>)
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	4a66      	ldr	r2, [pc, #408]	@ (8004c2c <HAL_RCC_OscConfig+0x4c4>)
 8004a94:	f023 0304 	bic.w	r3, r3, #4
 8004a98:	6213      	str	r3, [r2, #32]
 8004a9a:	e01c      	b.n	8004ad6 <HAL_RCC_OscConfig+0x36e>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	2b05      	cmp	r3, #5
 8004aa2:	d10c      	bne.n	8004abe <HAL_RCC_OscConfig+0x356>
 8004aa4:	4b61      	ldr	r3, [pc, #388]	@ (8004c2c <HAL_RCC_OscConfig+0x4c4>)
 8004aa6:	6a1b      	ldr	r3, [r3, #32]
 8004aa8:	4a60      	ldr	r2, [pc, #384]	@ (8004c2c <HAL_RCC_OscConfig+0x4c4>)
 8004aaa:	f043 0304 	orr.w	r3, r3, #4
 8004aae:	6213      	str	r3, [r2, #32]
 8004ab0:	4b5e      	ldr	r3, [pc, #376]	@ (8004c2c <HAL_RCC_OscConfig+0x4c4>)
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	4a5d      	ldr	r2, [pc, #372]	@ (8004c2c <HAL_RCC_OscConfig+0x4c4>)
 8004ab6:	f043 0301 	orr.w	r3, r3, #1
 8004aba:	6213      	str	r3, [r2, #32]
 8004abc:	e00b      	b.n	8004ad6 <HAL_RCC_OscConfig+0x36e>
 8004abe:	4b5b      	ldr	r3, [pc, #364]	@ (8004c2c <HAL_RCC_OscConfig+0x4c4>)
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	4a5a      	ldr	r2, [pc, #360]	@ (8004c2c <HAL_RCC_OscConfig+0x4c4>)
 8004ac4:	f023 0301 	bic.w	r3, r3, #1
 8004ac8:	6213      	str	r3, [r2, #32]
 8004aca:	4b58      	ldr	r3, [pc, #352]	@ (8004c2c <HAL_RCC_OscConfig+0x4c4>)
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	4a57      	ldr	r2, [pc, #348]	@ (8004c2c <HAL_RCC_OscConfig+0x4c4>)
 8004ad0:	f023 0304 	bic.w	r3, r3, #4
 8004ad4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d015      	beq.n	8004b0a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ade:	f7fd fdf3 	bl	80026c8 <HAL_GetTick>
 8004ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ae4:	e00a      	b.n	8004afc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ae6:	f7fd fdef 	bl	80026c8 <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d901      	bls.n	8004afc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e0b1      	b.n	8004c60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004afc:	4b4b      	ldr	r3, [pc, #300]	@ (8004c2c <HAL_RCC_OscConfig+0x4c4>)
 8004afe:	6a1b      	ldr	r3, [r3, #32]
 8004b00:	f003 0302 	and.w	r3, r3, #2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d0ee      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x37e>
 8004b08:	e014      	b.n	8004b34 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b0a:	f7fd fddd 	bl	80026c8 <HAL_GetTick>
 8004b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b10:	e00a      	b.n	8004b28 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b12:	f7fd fdd9 	bl	80026c8 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d901      	bls.n	8004b28 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e09b      	b.n	8004c60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b28:	4b40      	ldr	r3, [pc, #256]	@ (8004c2c <HAL_RCC_OscConfig+0x4c4>)
 8004b2a:	6a1b      	ldr	r3, [r3, #32]
 8004b2c:	f003 0302 	and.w	r3, r3, #2
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1ee      	bne.n	8004b12 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004b34:	7dfb      	ldrb	r3, [r7, #23]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d105      	bne.n	8004b46 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b3a:	4b3c      	ldr	r3, [pc, #240]	@ (8004c2c <HAL_RCC_OscConfig+0x4c4>)
 8004b3c:	69db      	ldr	r3, [r3, #28]
 8004b3e:	4a3b      	ldr	r2, [pc, #236]	@ (8004c2c <HAL_RCC_OscConfig+0x4c4>)
 8004b40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	69db      	ldr	r3, [r3, #28]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	f000 8087 	beq.w	8004c5e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b50:	4b36      	ldr	r3, [pc, #216]	@ (8004c2c <HAL_RCC_OscConfig+0x4c4>)
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f003 030c 	and.w	r3, r3, #12
 8004b58:	2b08      	cmp	r3, #8
 8004b5a:	d061      	beq.n	8004c20 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	69db      	ldr	r3, [r3, #28]
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d146      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b64:	4b33      	ldr	r3, [pc, #204]	@ (8004c34 <HAL_RCC_OscConfig+0x4cc>)
 8004b66:	2200      	movs	r2, #0
 8004b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b6a:	f7fd fdad 	bl	80026c8 <HAL_GetTick>
 8004b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b70:	e008      	b.n	8004b84 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b72:	f7fd fda9 	bl	80026c8 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d901      	bls.n	8004b84 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e06d      	b.n	8004c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b84:	4b29      	ldr	r3, [pc, #164]	@ (8004c2c <HAL_RCC_OscConfig+0x4c4>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1f0      	bne.n	8004b72 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b98:	d108      	bne.n	8004bac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004b9a:	4b24      	ldr	r3, [pc, #144]	@ (8004c2c <HAL_RCC_OscConfig+0x4c4>)
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	4921      	ldr	r1, [pc, #132]	@ (8004c2c <HAL_RCC_OscConfig+0x4c4>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bac:	4b1f      	ldr	r3, [pc, #124]	@ (8004c2c <HAL_RCC_OscConfig+0x4c4>)
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a19      	ldr	r1, [r3, #32]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bbc:	430b      	orrs	r3, r1
 8004bbe:	491b      	ldr	r1, [pc, #108]	@ (8004c2c <HAL_RCC_OscConfig+0x4c4>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8004c34 <HAL_RCC_OscConfig+0x4cc>)
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bca:	f7fd fd7d 	bl	80026c8 <HAL_GetTick>
 8004bce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004bd0:	e008      	b.n	8004be4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bd2:	f7fd fd79 	bl	80026c8 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d901      	bls.n	8004be4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e03d      	b.n	8004c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004be4:	4b11      	ldr	r3, [pc, #68]	@ (8004c2c <HAL_RCC_OscConfig+0x4c4>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d0f0      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x46a>
 8004bf0:	e035      	b.n	8004c5e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bf2:	4b10      	ldr	r3, [pc, #64]	@ (8004c34 <HAL_RCC_OscConfig+0x4cc>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf8:	f7fd fd66 	bl	80026c8 <HAL_GetTick>
 8004bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bfe:	e008      	b.n	8004c12 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c00:	f7fd fd62 	bl	80026c8 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e026      	b.n	8004c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c12:	4b06      	ldr	r3, [pc, #24]	@ (8004c2c <HAL_RCC_OscConfig+0x4c4>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1f0      	bne.n	8004c00 <HAL_RCC_OscConfig+0x498>
 8004c1e:	e01e      	b.n	8004c5e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	69db      	ldr	r3, [r3, #28]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d107      	bne.n	8004c38 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e019      	b.n	8004c60 <HAL_RCC_OscConfig+0x4f8>
 8004c2c:	40021000 	.word	0x40021000
 8004c30:	40007000 	.word	0x40007000
 8004c34:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004c38:	4b0b      	ldr	r3, [pc, #44]	@ (8004c68 <HAL_RCC_OscConfig+0x500>)
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a1b      	ldr	r3, [r3, #32]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d106      	bne.n	8004c5a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d001      	beq.n	8004c5e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e000      	b.n	8004c60 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3718      	adds	r7, #24
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	40021000 	.word	0x40021000

08004c6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d101      	bne.n	8004c80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e0d0      	b.n	8004e22 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c80:	4b6a      	ldr	r3, [pc, #424]	@ (8004e2c <HAL_RCC_ClockConfig+0x1c0>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0307 	and.w	r3, r3, #7
 8004c88:	683a      	ldr	r2, [r7, #0]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d910      	bls.n	8004cb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c8e:	4b67      	ldr	r3, [pc, #412]	@ (8004e2c <HAL_RCC_ClockConfig+0x1c0>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f023 0207 	bic.w	r2, r3, #7
 8004c96:	4965      	ldr	r1, [pc, #404]	@ (8004e2c <HAL_RCC_ClockConfig+0x1c0>)
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c9e:	4b63      	ldr	r3, [pc, #396]	@ (8004e2c <HAL_RCC_ClockConfig+0x1c0>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0307 	and.w	r3, r3, #7
 8004ca6:	683a      	ldr	r2, [r7, #0]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d001      	beq.n	8004cb0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e0b8      	b.n	8004e22 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0302 	and.w	r3, r3, #2
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d020      	beq.n	8004cfe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0304 	and.w	r3, r3, #4
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d005      	beq.n	8004cd4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cc8:	4b59      	ldr	r3, [pc, #356]	@ (8004e30 <HAL_RCC_ClockConfig+0x1c4>)
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	4a58      	ldr	r2, [pc, #352]	@ (8004e30 <HAL_RCC_ClockConfig+0x1c4>)
 8004cce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004cd2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0308 	and.w	r3, r3, #8
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d005      	beq.n	8004cec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ce0:	4b53      	ldr	r3, [pc, #332]	@ (8004e30 <HAL_RCC_ClockConfig+0x1c4>)
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	4a52      	ldr	r2, [pc, #328]	@ (8004e30 <HAL_RCC_ClockConfig+0x1c4>)
 8004ce6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004cea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cec:	4b50      	ldr	r3, [pc, #320]	@ (8004e30 <HAL_RCC_ClockConfig+0x1c4>)
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	494d      	ldr	r1, [pc, #308]	@ (8004e30 <HAL_RCC_ClockConfig+0x1c4>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d040      	beq.n	8004d8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d107      	bne.n	8004d22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d12:	4b47      	ldr	r3, [pc, #284]	@ (8004e30 <HAL_RCC_ClockConfig+0x1c4>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d115      	bne.n	8004d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e07f      	b.n	8004e22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d107      	bne.n	8004d3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d2a:	4b41      	ldr	r3, [pc, #260]	@ (8004e30 <HAL_RCC_ClockConfig+0x1c4>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d109      	bne.n	8004d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e073      	b.n	8004e22 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d3a:	4b3d      	ldr	r3, [pc, #244]	@ (8004e30 <HAL_RCC_ClockConfig+0x1c4>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d101      	bne.n	8004d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e06b      	b.n	8004e22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d4a:	4b39      	ldr	r3, [pc, #228]	@ (8004e30 <HAL_RCC_ClockConfig+0x1c4>)
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f023 0203 	bic.w	r2, r3, #3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	4936      	ldr	r1, [pc, #216]	@ (8004e30 <HAL_RCC_ClockConfig+0x1c4>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d5c:	f7fd fcb4 	bl	80026c8 <HAL_GetTick>
 8004d60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d62:	e00a      	b.n	8004d7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d64:	f7fd fcb0 	bl	80026c8 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d901      	bls.n	8004d7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e053      	b.n	8004e22 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d7a:	4b2d      	ldr	r3, [pc, #180]	@ (8004e30 <HAL_RCC_ClockConfig+0x1c4>)
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f003 020c 	and.w	r2, r3, #12
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d1eb      	bne.n	8004d64 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d8c:	4b27      	ldr	r3, [pc, #156]	@ (8004e2c <HAL_RCC_ClockConfig+0x1c0>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0307 	and.w	r3, r3, #7
 8004d94:	683a      	ldr	r2, [r7, #0]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d210      	bcs.n	8004dbc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d9a:	4b24      	ldr	r3, [pc, #144]	@ (8004e2c <HAL_RCC_ClockConfig+0x1c0>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f023 0207 	bic.w	r2, r3, #7
 8004da2:	4922      	ldr	r1, [pc, #136]	@ (8004e2c <HAL_RCC_ClockConfig+0x1c0>)
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004daa:	4b20      	ldr	r3, [pc, #128]	@ (8004e2c <HAL_RCC_ClockConfig+0x1c0>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0307 	and.w	r3, r3, #7
 8004db2:	683a      	ldr	r2, [r7, #0]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d001      	beq.n	8004dbc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e032      	b.n	8004e22 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0304 	and.w	r3, r3, #4
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d008      	beq.n	8004dda <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dc8:	4b19      	ldr	r3, [pc, #100]	@ (8004e30 <HAL_RCC_ClockConfig+0x1c4>)
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	4916      	ldr	r1, [pc, #88]	@ (8004e30 <HAL_RCC_ClockConfig+0x1c4>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0308 	and.w	r3, r3, #8
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d009      	beq.n	8004dfa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004de6:	4b12      	ldr	r3, [pc, #72]	@ (8004e30 <HAL_RCC_ClockConfig+0x1c4>)
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	00db      	lsls	r3, r3, #3
 8004df4:	490e      	ldr	r1, [pc, #56]	@ (8004e30 <HAL_RCC_ClockConfig+0x1c4>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004dfa:	f000 f821 	bl	8004e40 <HAL_RCC_GetSysClockFreq>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	4b0b      	ldr	r3, [pc, #44]	@ (8004e30 <HAL_RCC_ClockConfig+0x1c4>)
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	091b      	lsrs	r3, r3, #4
 8004e06:	f003 030f 	and.w	r3, r3, #15
 8004e0a:	490a      	ldr	r1, [pc, #40]	@ (8004e34 <HAL_RCC_ClockConfig+0x1c8>)
 8004e0c:	5ccb      	ldrb	r3, [r1, r3]
 8004e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e12:	4a09      	ldr	r2, [pc, #36]	@ (8004e38 <HAL_RCC_ClockConfig+0x1cc>)
 8004e14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004e16:	4b09      	ldr	r3, [pc, #36]	@ (8004e3c <HAL_RCC_ClockConfig+0x1d0>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7fd fc12 	bl	8002644 <HAL_InitTick>

  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	40022000 	.word	0x40022000
 8004e30:	40021000 	.word	0x40021000
 8004e34:	0800acd4 	.word	0x0800acd4
 8004e38:	20000000 	.word	0x20000000
 8004e3c:	20000004 	.word	0x20000004

08004e40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b087      	sub	sp, #28
 8004e44:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004e46:	2300      	movs	r3, #0
 8004e48:	60fb      	str	r3, [r7, #12]
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	60bb      	str	r3, [r7, #8]
 8004e4e:	2300      	movs	r3, #0
 8004e50:	617b      	str	r3, [r7, #20]
 8004e52:	2300      	movs	r3, #0
 8004e54:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004e56:	2300      	movs	r3, #0
 8004e58:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004e5a:	4b1e      	ldr	r3, [pc, #120]	@ (8004ed4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f003 030c 	and.w	r3, r3, #12
 8004e66:	2b04      	cmp	r3, #4
 8004e68:	d002      	beq.n	8004e70 <HAL_RCC_GetSysClockFreq+0x30>
 8004e6a:	2b08      	cmp	r3, #8
 8004e6c:	d003      	beq.n	8004e76 <HAL_RCC_GetSysClockFreq+0x36>
 8004e6e:	e027      	b.n	8004ec0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e70:	4b19      	ldr	r3, [pc, #100]	@ (8004ed8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004e72:	613b      	str	r3, [r7, #16]
      break;
 8004e74:	e027      	b.n	8004ec6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	0c9b      	lsrs	r3, r3, #18
 8004e7a:	f003 030f 	and.w	r3, r3, #15
 8004e7e:	4a17      	ldr	r2, [pc, #92]	@ (8004edc <HAL_RCC_GetSysClockFreq+0x9c>)
 8004e80:	5cd3      	ldrb	r3, [r2, r3]
 8004e82:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d010      	beq.n	8004eb0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004e8e:	4b11      	ldr	r3, [pc, #68]	@ (8004ed4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	0c5b      	lsrs	r3, r3, #17
 8004e94:	f003 0301 	and.w	r3, r3, #1
 8004e98:	4a11      	ldr	r2, [pc, #68]	@ (8004ee0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004e9a:	5cd3      	ldrb	r3, [r2, r3]
 8004e9c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a0d      	ldr	r2, [pc, #52]	@ (8004ed8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004ea2:	fb03 f202 	mul.w	r2, r3, r2
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eac:	617b      	str	r3, [r7, #20]
 8004eae:	e004      	b.n	8004eba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a0c      	ldr	r2, [pc, #48]	@ (8004ee4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004eb4:	fb02 f303 	mul.w	r3, r2, r3
 8004eb8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	613b      	str	r3, [r7, #16]
      break;
 8004ebe:	e002      	b.n	8004ec6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004ec0:	4b05      	ldr	r3, [pc, #20]	@ (8004ed8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004ec2:	613b      	str	r3, [r7, #16]
      break;
 8004ec4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ec6:	693b      	ldr	r3, [r7, #16]
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	371c      	adds	r7, #28
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bc80      	pop	{r7}
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	40021000 	.word	0x40021000
 8004ed8:	007a1200 	.word	0x007a1200
 8004edc:	0800acec 	.word	0x0800acec
 8004ee0:	0800acfc 	.word	0x0800acfc
 8004ee4:	003d0900 	.word	0x003d0900

08004ee8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004eec:	4b02      	ldr	r3, [pc, #8]	@ (8004ef8 <HAL_RCC_GetHCLKFreq+0x10>)
 8004eee:	681b      	ldr	r3, [r3, #0]
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bc80      	pop	{r7}
 8004ef6:	4770      	bx	lr
 8004ef8:	20000000 	.word	0x20000000

08004efc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f00:	f7ff fff2 	bl	8004ee8 <HAL_RCC_GetHCLKFreq>
 8004f04:	4602      	mov	r2, r0
 8004f06:	4b05      	ldr	r3, [pc, #20]	@ (8004f1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	0a1b      	lsrs	r3, r3, #8
 8004f0c:	f003 0307 	and.w	r3, r3, #7
 8004f10:	4903      	ldr	r1, [pc, #12]	@ (8004f20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f12:	5ccb      	ldrb	r3, [r1, r3]
 8004f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	40021000 	.word	0x40021000
 8004f20:	0800ace4 	.word	0x0800ace4

08004f24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f28:	f7ff ffde 	bl	8004ee8 <HAL_RCC_GetHCLKFreq>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	4b05      	ldr	r3, [pc, #20]	@ (8004f44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	0adb      	lsrs	r3, r3, #11
 8004f34:	f003 0307 	and.w	r3, r3, #7
 8004f38:	4903      	ldr	r1, [pc, #12]	@ (8004f48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f3a:	5ccb      	ldrb	r3, [r1, r3]
 8004f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	40021000 	.word	0x40021000
 8004f48:	0800ace4 	.word	0x0800ace4

08004f4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004f54:	4b0a      	ldr	r3, [pc, #40]	@ (8004f80 <RCC_Delay+0x34>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a0a      	ldr	r2, [pc, #40]	@ (8004f84 <RCC_Delay+0x38>)
 8004f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5e:	0a5b      	lsrs	r3, r3, #9
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	fb02 f303 	mul.w	r3, r2, r3
 8004f66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004f68:	bf00      	nop
  }
  while (Delay --);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	1e5a      	subs	r2, r3, #1
 8004f6e:	60fa      	str	r2, [r7, #12]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1f9      	bne.n	8004f68 <RCC_Delay+0x1c>
}
 8004f74:	bf00      	nop
 8004f76:	bf00      	nop
 8004f78:	3714      	adds	r7, #20
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bc80      	pop	{r7}
 8004f7e:	4770      	bx	lr
 8004f80:	20000000 	.word	0x20000000
 8004f84:	10624dd3 	.word	0x10624dd3

08004f88 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b086      	sub	sp, #24
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004f90:	2300      	movs	r3, #0
 8004f92:	613b      	str	r3, [r7, #16]
 8004f94:	2300      	movs	r3, #0
 8004f96:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0301 	and.w	r3, r3, #1
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d07d      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fa8:	4b4f      	ldr	r3, [pc, #316]	@ (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004faa:	69db      	ldr	r3, [r3, #28]
 8004fac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d10d      	bne.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fb4:	4b4c      	ldr	r3, [pc, #304]	@ (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fb6:	69db      	ldr	r3, [r3, #28]
 8004fb8:	4a4b      	ldr	r2, [pc, #300]	@ (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fbe:	61d3      	str	r3, [r2, #28]
 8004fc0:	4b49      	ldr	r3, [pc, #292]	@ (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fc2:	69db      	ldr	r3, [r3, #28]
 8004fc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fc8:	60bb      	str	r3, [r7, #8]
 8004fca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fd0:	4b46      	ldr	r3, [pc, #280]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d118      	bne.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fdc:	4b43      	ldr	r3, [pc, #268]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a42      	ldr	r2, [pc, #264]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fe2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fe6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fe8:	f7fd fb6e 	bl	80026c8 <HAL_GetTick>
 8004fec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fee:	e008      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ff0:	f7fd fb6a 	bl	80026c8 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	2b64      	cmp	r3, #100	@ 0x64
 8004ffc:	d901      	bls.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e06d      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005002:	4b3a      	ldr	r3, [pc, #232]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800500a:	2b00      	cmp	r3, #0
 800500c:	d0f0      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800500e:	4b36      	ldr	r3, [pc, #216]	@ (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005016:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d02e      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	429a      	cmp	r2, r3
 800502a:	d027      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800502c:	4b2e      	ldr	r3, [pc, #184]	@ (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005034:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005036:	4b2e      	ldr	r3, [pc, #184]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005038:	2201      	movs	r2, #1
 800503a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800503c:	4b2c      	ldr	r3, [pc, #176]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800503e:	2200      	movs	r2, #0
 8005040:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005042:	4a29      	ldr	r2, [pc, #164]	@ (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	d014      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005052:	f7fd fb39 	bl	80026c8 <HAL_GetTick>
 8005056:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005058:	e00a      	b.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800505a:	f7fd fb35 	bl	80026c8 <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005068:	4293      	cmp	r3, r2
 800506a:	d901      	bls.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e036      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005070:	4b1d      	ldr	r3, [pc, #116]	@ (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005072:	6a1b      	ldr	r3, [r3, #32]
 8005074:	f003 0302 	and.w	r3, r3, #2
 8005078:	2b00      	cmp	r3, #0
 800507a:	d0ee      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800507c:	4b1a      	ldr	r3, [pc, #104]	@ (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800507e:	6a1b      	ldr	r3, [r3, #32]
 8005080:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	4917      	ldr	r1, [pc, #92]	@ (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800508a:	4313      	orrs	r3, r2
 800508c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800508e:	7dfb      	ldrb	r3, [r7, #23]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d105      	bne.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005094:	4b14      	ldr	r3, [pc, #80]	@ (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005096:	69db      	ldr	r3, [r3, #28]
 8005098:	4a13      	ldr	r2, [pc, #76]	@ (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800509a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800509e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0302 	and.w	r3, r3, #2
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d008      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050ac:	4b0e      	ldr	r3, [pc, #56]	@ (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	490b      	ldr	r1, [pc, #44]	@ (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0310 	and.w	r3, r3, #16
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d008      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050ca:	4b07      	ldr	r3, [pc, #28]	@ (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	4904      	ldr	r1, [pc, #16]	@ (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3718      	adds	r7, #24
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	40021000 	.word	0x40021000
 80050ec:	40007000 	.word	0x40007000
 80050f0:	42420440 	.word	0x42420440

080050f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b088      	sub	sp, #32
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80050fc:	2300      	movs	r3, #0
 80050fe:	617b      	str	r3, [r7, #20]
 8005100:	2300      	movs	r3, #0
 8005102:	61fb      	str	r3, [r7, #28]
 8005104:	2300      	movs	r3, #0
 8005106:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005108:	2300      	movs	r3, #0
 800510a:	60fb      	str	r3, [r7, #12]
 800510c:	2300      	movs	r3, #0
 800510e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2b10      	cmp	r3, #16
 8005114:	d00a      	beq.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2b10      	cmp	r3, #16
 800511a:	f200 808a 	bhi.w	8005232 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d045      	beq.n	80051b0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b02      	cmp	r3, #2
 8005128:	d075      	beq.n	8005216 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800512a:	e082      	b.n	8005232 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800512c:	4b46      	ldr	r3, [pc, #280]	@ (8005248 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005132:	4b45      	ldr	r3, [pc, #276]	@ (8005248 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d07b      	beq.n	8005236 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	0c9b      	lsrs	r3, r3, #18
 8005142:	f003 030f 	and.w	r3, r3, #15
 8005146:	4a41      	ldr	r2, [pc, #260]	@ (800524c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005148:	5cd3      	ldrb	r3, [r2, r3]
 800514a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d015      	beq.n	8005182 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005156:	4b3c      	ldr	r3, [pc, #240]	@ (8005248 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	0c5b      	lsrs	r3, r3, #17
 800515c:	f003 0301 	and.w	r3, r3, #1
 8005160:	4a3b      	ldr	r2, [pc, #236]	@ (8005250 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8005162:	5cd3      	ldrb	r3, [r2, r3]
 8005164:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00d      	beq.n	800518c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005170:	4a38      	ldr	r2, [pc, #224]	@ (8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	fbb2 f2f3 	udiv	r2, r2, r3
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	fb02 f303 	mul.w	r3, r2, r3
 800517e:	61fb      	str	r3, [r7, #28]
 8005180:	e004      	b.n	800518c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	4a34      	ldr	r2, [pc, #208]	@ (8005258 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005186:	fb02 f303 	mul.w	r3, r2, r3
 800518a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800518c:	4b2e      	ldr	r3, [pc, #184]	@ (8005248 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005194:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005198:	d102      	bne.n	80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	61bb      	str	r3, [r7, #24]
      break;
 800519e:	e04a      	b.n	8005236 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	005b      	lsls	r3, r3, #1
 80051a4:	4a2d      	ldr	r2, [pc, #180]	@ (800525c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80051a6:	fba2 2303 	umull	r2, r3, r2, r3
 80051aa:	085b      	lsrs	r3, r3, #1
 80051ac:	61bb      	str	r3, [r7, #24]
      break;
 80051ae:	e042      	b.n	8005236 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80051b0:	4b25      	ldr	r3, [pc, #148]	@ (8005248 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80051b2:	6a1b      	ldr	r3, [r3, #32]
 80051b4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051c0:	d108      	bne.n	80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f003 0302 	and.w	r3, r3, #2
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d003      	beq.n	80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80051cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051d0:	61bb      	str	r3, [r7, #24]
 80051d2:	e01f      	b.n	8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051de:	d109      	bne.n	80051f4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80051e0:	4b19      	ldr	r3, [pc, #100]	@ (8005248 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80051e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e4:	f003 0302 	and.w	r3, r3, #2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d003      	beq.n	80051f4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80051ec:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80051f0:	61bb      	str	r3, [r7, #24]
 80051f2:	e00f      	b.n	8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051fe:	d11c      	bne.n	800523a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005200:	4b11      	ldr	r3, [pc, #68]	@ (8005248 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d016      	beq.n	800523a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800520c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8005210:	61bb      	str	r3, [r7, #24]
      break;
 8005212:	e012      	b.n	800523a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005214:	e011      	b.n	800523a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005216:	f7ff fe85 	bl	8004f24 <HAL_RCC_GetPCLK2Freq>
 800521a:	4602      	mov	r2, r0
 800521c:	4b0a      	ldr	r3, [pc, #40]	@ (8005248 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	0b9b      	lsrs	r3, r3, #14
 8005222:	f003 0303 	and.w	r3, r3, #3
 8005226:	3301      	adds	r3, #1
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	fbb2 f3f3 	udiv	r3, r2, r3
 800522e:	61bb      	str	r3, [r7, #24]
      break;
 8005230:	e004      	b.n	800523c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005232:	bf00      	nop
 8005234:	e002      	b.n	800523c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005236:	bf00      	nop
 8005238:	e000      	b.n	800523c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800523a:	bf00      	nop
    }
  }
  return (frequency);
 800523c:	69bb      	ldr	r3, [r7, #24]
}
 800523e:	4618      	mov	r0, r3
 8005240:	3720      	adds	r7, #32
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	40021000 	.word	0x40021000
 800524c:	0800ad00 	.word	0x0800ad00
 8005250:	0800ad10 	.word	0x0800ad10
 8005254:	007a1200 	.word	0x007a1200
 8005258:	003d0900 	.word	0x003d0900
 800525c:	aaaaaaab 	.word	0xaaaaaaab

08005260 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d101      	bne.n	8005272 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e041      	b.n	80052f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005278:	b2db      	uxtb	r3, r3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d106      	bne.n	800528c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f7fc ffaa 	bl	80021e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2202      	movs	r2, #2
 8005290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	3304      	adds	r3, #4
 800529c:	4619      	mov	r1, r3
 800529e:	4610      	mov	r0, r2
 80052a0:	f000 f940 	bl	8005524 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3708      	adds	r7, #8
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
	...

08005300 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800530e:	b2db      	uxtb	r3, r3
 8005310:	2b01      	cmp	r3, #1
 8005312:	d001      	beq.n	8005318 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e032      	b.n	800537e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2202      	movs	r2, #2
 800531c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a18      	ldr	r2, [pc, #96]	@ (8005388 <HAL_TIM_Base_Start+0x88>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d00e      	beq.n	8005348 <HAL_TIM_Base_Start+0x48>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005332:	d009      	beq.n	8005348 <HAL_TIM_Base_Start+0x48>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a14      	ldr	r2, [pc, #80]	@ (800538c <HAL_TIM_Base_Start+0x8c>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d004      	beq.n	8005348 <HAL_TIM_Base_Start+0x48>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a13      	ldr	r2, [pc, #76]	@ (8005390 <HAL_TIM_Base_Start+0x90>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d111      	bne.n	800536c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f003 0307 	and.w	r3, r3, #7
 8005352:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2b06      	cmp	r3, #6
 8005358:	d010      	beq.n	800537c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f042 0201 	orr.w	r2, r2, #1
 8005368:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800536a:	e007      	b.n	800537c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f042 0201 	orr.w	r2, r2, #1
 800537a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3714      	adds	r7, #20
 8005382:	46bd      	mov	sp, r7
 8005384:	bc80      	pop	{r7}
 8005386:	4770      	bx	lr
 8005388:	40012c00 	.word	0x40012c00
 800538c:	40000400 	.word	0x40000400
 8005390:	40000800 	.word	0x40000800

08005394 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800539e:	2300      	movs	r3, #0
 80053a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d101      	bne.n	80053b0 <HAL_TIM_ConfigClockSource+0x1c>
 80053ac:	2302      	movs	r3, #2
 80053ae:	e0b4      	b.n	800551a <HAL_TIM_ConfigClockSource+0x186>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2202      	movs	r2, #2
 80053bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80053ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80053d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68ba      	ldr	r2, [r7, #8]
 80053de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053e8:	d03e      	beq.n	8005468 <HAL_TIM_ConfigClockSource+0xd4>
 80053ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053ee:	f200 8087 	bhi.w	8005500 <HAL_TIM_ConfigClockSource+0x16c>
 80053f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053f6:	f000 8086 	beq.w	8005506 <HAL_TIM_ConfigClockSource+0x172>
 80053fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053fe:	d87f      	bhi.n	8005500 <HAL_TIM_ConfigClockSource+0x16c>
 8005400:	2b70      	cmp	r3, #112	@ 0x70
 8005402:	d01a      	beq.n	800543a <HAL_TIM_ConfigClockSource+0xa6>
 8005404:	2b70      	cmp	r3, #112	@ 0x70
 8005406:	d87b      	bhi.n	8005500 <HAL_TIM_ConfigClockSource+0x16c>
 8005408:	2b60      	cmp	r3, #96	@ 0x60
 800540a:	d050      	beq.n	80054ae <HAL_TIM_ConfigClockSource+0x11a>
 800540c:	2b60      	cmp	r3, #96	@ 0x60
 800540e:	d877      	bhi.n	8005500 <HAL_TIM_ConfigClockSource+0x16c>
 8005410:	2b50      	cmp	r3, #80	@ 0x50
 8005412:	d03c      	beq.n	800548e <HAL_TIM_ConfigClockSource+0xfa>
 8005414:	2b50      	cmp	r3, #80	@ 0x50
 8005416:	d873      	bhi.n	8005500 <HAL_TIM_ConfigClockSource+0x16c>
 8005418:	2b40      	cmp	r3, #64	@ 0x40
 800541a:	d058      	beq.n	80054ce <HAL_TIM_ConfigClockSource+0x13a>
 800541c:	2b40      	cmp	r3, #64	@ 0x40
 800541e:	d86f      	bhi.n	8005500 <HAL_TIM_ConfigClockSource+0x16c>
 8005420:	2b30      	cmp	r3, #48	@ 0x30
 8005422:	d064      	beq.n	80054ee <HAL_TIM_ConfigClockSource+0x15a>
 8005424:	2b30      	cmp	r3, #48	@ 0x30
 8005426:	d86b      	bhi.n	8005500 <HAL_TIM_ConfigClockSource+0x16c>
 8005428:	2b20      	cmp	r3, #32
 800542a:	d060      	beq.n	80054ee <HAL_TIM_ConfigClockSource+0x15a>
 800542c:	2b20      	cmp	r3, #32
 800542e:	d867      	bhi.n	8005500 <HAL_TIM_ConfigClockSource+0x16c>
 8005430:	2b00      	cmp	r3, #0
 8005432:	d05c      	beq.n	80054ee <HAL_TIM_ConfigClockSource+0x15a>
 8005434:	2b10      	cmp	r3, #16
 8005436:	d05a      	beq.n	80054ee <HAL_TIM_ConfigClockSource+0x15a>
 8005438:	e062      	b.n	8005500 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800544a:	f000 f950 	bl	80056ee <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800545c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	609a      	str	r2, [r3, #8]
      break;
 8005466:	e04f      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005478:	f000 f939 	bl	80056ee <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	689a      	ldr	r2, [r3, #8]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800548a:	609a      	str	r2, [r3, #8]
      break;
 800548c:	e03c      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800549a:	461a      	mov	r2, r3
 800549c:	f000 f8b0 	bl	8005600 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2150      	movs	r1, #80	@ 0x50
 80054a6:	4618      	mov	r0, r3
 80054a8:	f000 f907 	bl	80056ba <TIM_ITRx_SetConfig>
      break;
 80054ac:	e02c      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054ba:	461a      	mov	r2, r3
 80054bc:	f000 f8ce 	bl	800565c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2160      	movs	r1, #96	@ 0x60
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 f8f7 	bl	80056ba <TIM_ITRx_SetConfig>
      break;
 80054cc:	e01c      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054da:	461a      	mov	r2, r3
 80054dc:	f000 f890 	bl	8005600 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2140      	movs	r1, #64	@ 0x40
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 f8e7 	bl	80056ba <TIM_ITRx_SetConfig>
      break;
 80054ec:	e00c      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4619      	mov	r1, r3
 80054f8:	4610      	mov	r0, r2
 80054fa:	f000 f8de 	bl	80056ba <TIM_ITRx_SetConfig>
      break;
 80054fe:	e003      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	73fb      	strb	r3, [r7, #15]
      break;
 8005504:	e000      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005506:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005518:	7bfb      	ldrb	r3, [r7, #15]
}
 800551a:	4618      	mov	r0, r3
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
	...

08005524 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a2f      	ldr	r2, [pc, #188]	@ (80055f4 <TIM_Base_SetConfig+0xd0>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d00b      	beq.n	8005554 <TIM_Base_SetConfig+0x30>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005542:	d007      	beq.n	8005554 <TIM_Base_SetConfig+0x30>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a2c      	ldr	r2, [pc, #176]	@ (80055f8 <TIM_Base_SetConfig+0xd4>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d003      	beq.n	8005554 <TIM_Base_SetConfig+0x30>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a2b      	ldr	r2, [pc, #172]	@ (80055fc <TIM_Base_SetConfig+0xd8>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d108      	bne.n	8005566 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800555a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	4313      	orrs	r3, r2
 8005564:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a22      	ldr	r2, [pc, #136]	@ (80055f4 <TIM_Base_SetConfig+0xd0>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d00b      	beq.n	8005586 <TIM_Base_SetConfig+0x62>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005574:	d007      	beq.n	8005586 <TIM_Base_SetConfig+0x62>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a1f      	ldr	r2, [pc, #124]	@ (80055f8 <TIM_Base_SetConfig+0xd4>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d003      	beq.n	8005586 <TIM_Base_SetConfig+0x62>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a1e      	ldr	r2, [pc, #120]	@ (80055fc <TIM_Base_SetConfig+0xd8>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d108      	bne.n	8005598 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800558c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	4313      	orrs	r3, r2
 8005596:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	689a      	ldr	r2, [r3, #8]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a0d      	ldr	r2, [pc, #52]	@ (80055f4 <TIM_Base_SetConfig+0xd0>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d103      	bne.n	80055cc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	691a      	ldr	r2, [r3, #16]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	f003 0301 	and.w	r3, r3, #1
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d005      	beq.n	80055ea <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	f023 0201 	bic.w	r2, r3, #1
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	611a      	str	r2, [r3, #16]
  }
}
 80055ea:	bf00      	nop
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bc80      	pop	{r7}
 80055f2:	4770      	bx	lr
 80055f4:	40012c00 	.word	0x40012c00
 80055f8:	40000400 	.word	0x40000400
 80055fc:	40000800 	.word	0x40000800

08005600 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005600:	b480      	push	{r7}
 8005602:	b087      	sub	sp, #28
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6a1b      	ldr	r3, [r3, #32]
 8005610:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	f023 0201 	bic.w	r2, r3, #1
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800562a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	011b      	lsls	r3, r3, #4
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	4313      	orrs	r3, r2
 8005634:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	f023 030a 	bic.w	r3, r3, #10
 800563c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	4313      	orrs	r3, r2
 8005644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	621a      	str	r2, [r3, #32]
}
 8005652:	bf00      	nop
 8005654:	371c      	adds	r7, #28
 8005656:	46bd      	mov	sp, r7
 8005658:	bc80      	pop	{r7}
 800565a:	4770      	bx	lr

0800565c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800565c:	b480      	push	{r7}
 800565e:	b087      	sub	sp, #28
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6a1b      	ldr	r3, [r3, #32]
 800566c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	f023 0210 	bic.w	r2, r3, #16
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005686:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	031b      	lsls	r3, r3, #12
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	4313      	orrs	r3, r2
 8005690:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005698:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	011b      	lsls	r3, r3, #4
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	621a      	str	r2, [r3, #32]
}
 80056b0:	bf00      	nop
 80056b2:	371c      	adds	r7, #28
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bc80      	pop	{r7}
 80056b8:	4770      	bx	lr

080056ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056ba:	b480      	push	{r7}
 80056bc:	b085      	sub	sp, #20
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
 80056c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056d2:	683a      	ldr	r2, [r7, #0]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	f043 0307 	orr.w	r3, r3, #7
 80056dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	609a      	str	r2, [r3, #8]
}
 80056e4:	bf00      	nop
 80056e6:	3714      	adds	r7, #20
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bc80      	pop	{r7}
 80056ec:	4770      	bx	lr

080056ee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056ee:	b480      	push	{r7}
 80056f0:	b087      	sub	sp, #28
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	60f8      	str	r0, [r7, #12]
 80056f6:	60b9      	str	r1, [r7, #8]
 80056f8:	607a      	str	r2, [r7, #4]
 80056fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005708:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	021a      	lsls	r2, r3, #8
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	431a      	orrs	r2, r3
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	4313      	orrs	r3, r2
 8005716:	697a      	ldr	r2, [r7, #20]
 8005718:	4313      	orrs	r3, r2
 800571a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	609a      	str	r2, [r3, #8]
}
 8005722:	bf00      	nop
 8005724:	371c      	adds	r7, #28
 8005726:	46bd      	mov	sp, r7
 8005728:	bc80      	pop	{r7}
 800572a:	4770      	bx	lr

0800572c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800573c:	2b01      	cmp	r3, #1
 800573e:	d101      	bne.n	8005744 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005740:	2302      	movs	r3, #2
 8005742:	e046      	b.n	80057d2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2202      	movs	r2, #2
 8005750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800576a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	4313      	orrs	r3, r2
 8005774:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a16      	ldr	r2, [pc, #88]	@ (80057dc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d00e      	beq.n	80057a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005790:	d009      	beq.n	80057a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a12      	ldr	r2, [pc, #72]	@ (80057e0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d004      	beq.n	80057a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a10      	ldr	r2, [pc, #64]	@ (80057e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d10c      	bne.n	80057c0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	68ba      	ldr	r2, [r7, #8]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68ba      	ldr	r2, [r7, #8]
 80057be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bc80      	pop	{r7}
 80057da:	4770      	bx	lr
 80057dc:	40012c00 	.word	0x40012c00
 80057e0:	40000400 	.word	0x40000400
 80057e4:	40000800 	.word	0x40000800

080057e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d101      	bne.n	80057fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e042      	b.n	8005880 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005800:	b2db      	uxtb	r3, r3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d106      	bne.n	8005814 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f7fc fd04 	bl	800221c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2224      	movs	r2, #36	@ 0x24
 8005818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68da      	ldr	r2, [r3, #12]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800582a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 fded 	bl	800640c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	691a      	ldr	r2, [r3, #16]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005840:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	695a      	ldr	r2, [r3, #20]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005850:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68da      	ldr	r2, [r3, #12]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005860:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2220      	movs	r2, #32
 800586c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2220      	movs	r2, #32
 8005874:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3708      	adds	r7, #8
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b08a      	sub	sp, #40	@ 0x28
 800588c:	af02      	add	r7, sp, #8
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	603b      	str	r3, [r7, #0]
 8005894:	4613      	mov	r3, r2
 8005896:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005898:	2300      	movs	r3, #0
 800589a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	2b20      	cmp	r3, #32
 80058a6:	d175      	bne.n	8005994 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d002      	beq.n	80058b4 <HAL_UART_Transmit+0x2c>
 80058ae:	88fb      	ldrh	r3, [r7, #6]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d101      	bne.n	80058b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e06e      	b.n	8005996 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2221      	movs	r2, #33	@ 0x21
 80058c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058c6:	f7fc feff 	bl	80026c8 <HAL_GetTick>
 80058ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	88fa      	ldrh	r2, [r7, #6]
 80058d0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	88fa      	ldrh	r2, [r7, #6]
 80058d6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058e0:	d108      	bne.n	80058f4 <HAL_UART_Transmit+0x6c>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d104      	bne.n	80058f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80058ea:	2300      	movs	r3, #0
 80058ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	61bb      	str	r3, [r7, #24]
 80058f2:	e003      	b.n	80058fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058f8:	2300      	movs	r3, #0
 80058fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80058fc:	e02e      	b.n	800595c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	9300      	str	r3, [sp, #0]
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	2200      	movs	r2, #0
 8005906:	2180      	movs	r1, #128	@ 0x80
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f000 fb52 	bl	8005fb2 <UART_WaitOnFlagUntilTimeout>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d005      	beq.n	8005920 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2220      	movs	r2, #32
 8005918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e03a      	b.n	8005996 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10b      	bne.n	800593e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	881b      	ldrh	r3, [r3, #0]
 800592a:	461a      	mov	r2, r3
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005934:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	3302      	adds	r3, #2
 800593a:	61bb      	str	r3, [r7, #24]
 800593c:	e007      	b.n	800594e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	781a      	ldrb	r2, [r3, #0]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	3301      	adds	r3, #1
 800594c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005952:	b29b      	uxth	r3, r3
 8005954:	3b01      	subs	r3, #1
 8005956:	b29a      	uxth	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005960:	b29b      	uxth	r3, r3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1cb      	bne.n	80058fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	9300      	str	r3, [sp, #0]
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	2200      	movs	r2, #0
 800596e:	2140      	movs	r1, #64	@ 0x40
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f000 fb1e 	bl	8005fb2 <UART_WaitOnFlagUntilTimeout>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d005      	beq.n	8005988 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2220      	movs	r2, #32
 8005980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	e006      	b.n	8005996 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2220      	movs	r2, #32
 800598c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005990:	2300      	movs	r3, #0
 8005992:	e000      	b.n	8005996 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005994:	2302      	movs	r3, #2
  }
}
 8005996:	4618      	mov	r0, r3
 8005998:	3720      	adds	r7, #32
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800599e:	b480      	push	{r7}
 80059a0:	b085      	sub	sp, #20
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	60f8      	str	r0, [r7, #12]
 80059a6:	60b9      	str	r1, [r7, #8]
 80059a8:	4613      	mov	r3, r2
 80059aa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	2b20      	cmp	r3, #32
 80059b6:	d121      	bne.n	80059fc <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d002      	beq.n	80059c4 <HAL_UART_Transmit_IT+0x26>
 80059be:	88fb      	ldrh	r3, [r7, #6]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d101      	bne.n	80059c8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e01a      	b.n	80059fe <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	88fa      	ldrh	r2, [r7, #6]
 80059d2:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	88fa      	ldrh	r2, [r7, #6]
 80059d8:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2221      	movs	r2, #33	@ 0x21
 80059e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68da      	ldr	r2, [r3, #12]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80059f6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80059f8:	2300      	movs	r3, #0
 80059fa:	e000      	b.n	80059fe <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80059fc:	2302      	movs	r3, #2
  }
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3714      	adds	r7, #20
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bc80      	pop	{r7}
 8005a06:	4770      	bx	lr

08005a08 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	4613      	mov	r3, r2
 8005a14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	2b20      	cmp	r3, #32
 8005a20:	d112      	bne.n	8005a48 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d002      	beq.n	8005a2e <HAL_UART_Receive_IT+0x26>
 8005a28:	88fb      	ldrh	r3, [r7, #6]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d101      	bne.n	8005a32 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e00b      	b.n	8005a4a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005a38:	88fb      	ldrh	r3, [r7, #6]
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	68b9      	ldr	r1, [r7, #8]
 8005a3e:	68f8      	ldr	r0, [r7, #12]
 8005a40:	f000 fb10 	bl	8006064 <UART_Start_Receive_IT>
 8005a44:	4603      	mov	r3, r0
 8005a46:	e000      	b.n	8005a4a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005a48:	2302      	movs	r3, #2
  }
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
	...

08005a54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b0ba      	sub	sp, #232	@ 0xe8
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	695b      	ldr	r3, [r3, #20]
 8005a76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005a80:	2300      	movs	r3, #0
 8005a82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a8a:	f003 030f 	and.w	r3, r3, #15
 8005a8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005a92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10f      	bne.n	8005aba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a9e:	f003 0320 	and.w	r3, r3, #32
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d009      	beq.n	8005aba <HAL_UART_IRQHandler+0x66>
 8005aa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005aaa:	f003 0320 	and.w	r3, r3, #32
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d003      	beq.n	8005aba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 fbec 	bl	8006290 <UART_Receive_IT>
      return;
 8005ab8:	e25b      	b.n	8005f72 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005aba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f000 80de 	beq.w	8005c80 <HAL_UART_IRQHandler+0x22c>
 8005ac4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ac8:	f003 0301 	and.w	r3, r3, #1
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d106      	bne.n	8005ade <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ad4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f000 80d1 	beq.w	8005c80 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ae2:	f003 0301 	and.w	r3, r3, #1
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00b      	beq.n	8005b02 <HAL_UART_IRQHandler+0xae>
 8005aea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005aee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d005      	beq.n	8005b02 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005afa:	f043 0201 	orr.w	r2, r3, #1
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b06:	f003 0304 	and.w	r3, r3, #4
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00b      	beq.n	8005b26 <HAL_UART_IRQHandler+0xd2>
 8005b0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d005      	beq.n	8005b26 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b1e:	f043 0202 	orr.w	r2, r3, #2
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b2a:	f003 0302 	and.w	r3, r3, #2
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00b      	beq.n	8005b4a <HAL_UART_IRQHandler+0xf6>
 8005b32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d005      	beq.n	8005b4a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b42:	f043 0204 	orr.w	r2, r3, #4
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b4e:	f003 0308 	and.w	r3, r3, #8
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d011      	beq.n	8005b7a <HAL_UART_IRQHandler+0x126>
 8005b56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b5a:	f003 0320 	and.w	r3, r3, #32
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d105      	bne.n	8005b6e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005b62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b66:	f003 0301 	and.w	r3, r3, #1
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d005      	beq.n	8005b7a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b72:	f043 0208 	orr.w	r2, r3, #8
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	f000 81f2 	beq.w	8005f68 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b88:	f003 0320 	and.w	r3, r3, #32
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d008      	beq.n	8005ba2 <HAL_UART_IRQHandler+0x14e>
 8005b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b94:	f003 0320 	and.w	r3, r3, #32
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d002      	beq.n	8005ba2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 fb77 	bl	8006290 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	695b      	ldr	r3, [r3, #20]
 8005ba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	bf14      	ite	ne
 8005bb0:	2301      	movne	r3, #1
 8005bb2:	2300      	moveq	r3, #0
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bbe:	f003 0308 	and.w	r3, r3, #8
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d103      	bne.n	8005bce <HAL_UART_IRQHandler+0x17a>
 8005bc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d04f      	beq.n	8005c6e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 fa81 	bl	80060d6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d041      	beq.n	8005c66 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	3314      	adds	r3, #20
 8005be8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005bf0:	e853 3f00 	ldrex	r3, [r3]
 8005bf4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005bf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005bfc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	3314      	adds	r3, #20
 8005c0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005c0e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005c12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005c1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005c1e:	e841 2300 	strex	r3, r2, [r1]
 8005c22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005c26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1d9      	bne.n	8005be2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d013      	beq.n	8005c5e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c3a:	4a7e      	ldr	r2, [pc, #504]	@ (8005e34 <HAL_UART_IRQHandler+0x3e0>)
 8005c3c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7fd fb0e 	bl	8003264 <HAL_DMA_Abort_IT>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d016      	beq.n	8005c7c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005c58:	4610      	mov	r0, r2
 8005c5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c5c:	e00e      	b.n	8005c7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f993 	bl	8005f8a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c64:	e00a      	b.n	8005c7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 f98f 	bl	8005f8a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c6c:	e006      	b.n	8005c7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f98b 	bl	8005f8a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005c7a:	e175      	b.n	8005f68 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c7c:	bf00      	nop
    return;
 8005c7e:	e173      	b.n	8005f68 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	f040 814f 	bne.w	8005f28 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c8e:	f003 0310 	and.w	r3, r3, #16
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f000 8148 	beq.w	8005f28 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c9c:	f003 0310 	and.w	r3, r3, #16
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f000 8141 	beq.w	8005f28 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	60bb      	str	r3, [r7, #8]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	60bb      	str	r3, [r7, #8]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	60bb      	str	r3, [r7, #8]
 8005cba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	f000 80b6 	beq.w	8005e38 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005cd8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f000 8145 	beq.w	8005f6c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005ce6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005cea:	429a      	cmp	r2, r3
 8005cec:	f080 813e 	bcs.w	8005f6c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005cf6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	2b20      	cmp	r3, #32
 8005d00:	f000 8088 	beq.w	8005e14 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	330c      	adds	r3, #12
 8005d0a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005d12:	e853 3f00 	ldrex	r3, [r3]
 8005d16:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005d1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d1e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d22:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	330c      	adds	r3, #12
 8005d2c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005d30:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005d34:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d38:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005d3c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005d40:	e841 2300 	strex	r3, r2, [r1]
 8005d44:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005d48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1d9      	bne.n	8005d04 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	3314      	adds	r3, #20
 8005d56:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d5a:	e853 3f00 	ldrex	r3, [r3]
 8005d5e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005d60:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d62:	f023 0301 	bic.w	r3, r3, #1
 8005d66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	3314      	adds	r3, #20
 8005d70:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005d74:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005d78:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005d7c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005d80:	e841 2300 	strex	r3, r2, [r1]
 8005d84:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005d86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1e1      	bne.n	8005d50 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	3314      	adds	r3, #20
 8005d92:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d94:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d96:	e853 3f00 	ldrex	r3, [r3]
 8005d9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005d9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005da2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	3314      	adds	r3, #20
 8005dac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005db0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005db2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005db6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005db8:	e841 2300 	strex	r3, r2, [r1]
 8005dbc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005dbe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d1e3      	bne.n	8005d8c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2220      	movs	r2, #32
 8005dc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	330c      	adds	r3, #12
 8005dd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ddc:	e853 3f00 	ldrex	r3, [r3]
 8005de0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005de2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005de4:	f023 0310 	bic.w	r3, r3, #16
 8005de8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	330c      	adds	r3, #12
 8005df2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005df6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005df8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005dfc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005dfe:	e841 2300 	strex	r3, r2, [r1]
 8005e02:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005e04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d1e3      	bne.n	8005dd2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7fd f9ed 	bl	80031ee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2202      	movs	r2, #2
 8005e18:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	4619      	mov	r1, r3
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 f8b6 	bl	8005f9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e30:	e09c      	b.n	8005f6c <HAL_UART_IRQHandler+0x518>
 8005e32:	bf00      	nop
 8005e34:	0800619b 	.word	0x0800619b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	f000 808e 	beq.w	8005f70 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005e54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	f000 8089 	beq.w	8005f70 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	330c      	adds	r3, #12
 8005e64:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e68:	e853 3f00 	ldrex	r3, [r3]
 8005e6c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e74:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	330c      	adds	r3, #12
 8005e7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005e82:	647a      	str	r2, [r7, #68]	@ 0x44
 8005e84:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e86:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e8a:	e841 2300 	strex	r3, r2, [r1]
 8005e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1e3      	bne.n	8005e5e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	3314      	adds	r3, #20
 8005e9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea0:	e853 3f00 	ldrex	r3, [r3]
 8005ea4:	623b      	str	r3, [r7, #32]
   return(result);
 8005ea6:	6a3b      	ldr	r3, [r7, #32]
 8005ea8:	f023 0301 	bic.w	r3, r3, #1
 8005eac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	3314      	adds	r3, #20
 8005eb6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005eba:	633a      	str	r2, [r7, #48]	@ 0x30
 8005ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ebe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ec0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ec2:	e841 2300 	strex	r3, r2, [r1]
 8005ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1e3      	bne.n	8005e96 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2220      	movs	r2, #32
 8005ed2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	330c      	adds	r3, #12
 8005ee2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	e853 3f00 	ldrex	r3, [r3]
 8005eea:	60fb      	str	r3, [r7, #12]
   return(result);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f023 0310 	bic.w	r3, r3, #16
 8005ef2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	330c      	adds	r3, #12
 8005efc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005f00:	61fa      	str	r2, [r7, #28]
 8005f02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f04:	69b9      	ldr	r1, [r7, #24]
 8005f06:	69fa      	ldr	r2, [r7, #28]
 8005f08:	e841 2300 	strex	r3, r2, [r1]
 8005f0c:	617b      	str	r3, [r7, #20]
   return(result);
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1e3      	bne.n	8005edc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2202      	movs	r2, #2
 8005f18:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005f1e:	4619      	mov	r1, r3
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 f83b 	bl	8005f9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f26:	e023      	b.n	8005f70 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d009      	beq.n	8005f48 <HAL_UART_IRQHandler+0x4f4>
 8005f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d003      	beq.n	8005f48 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 f93e 	bl	80061c2 <UART_Transmit_IT>
    return;
 8005f46:	e014      	b.n	8005f72 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00e      	beq.n	8005f72 <HAL_UART_IRQHandler+0x51e>
 8005f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d008      	beq.n	8005f72 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 f97d 	bl	8006260 <UART_EndTransmit_IT>
    return;
 8005f66:	e004      	b.n	8005f72 <HAL_UART_IRQHandler+0x51e>
    return;
 8005f68:	bf00      	nop
 8005f6a:	e002      	b.n	8005f72 <HAL_UART_IRQHandler+0x51e>
      return;
 8005f6c:	bf00      	nop
 8005f6e:	e000      	b.n	8005f72 <HAL_UART_IRQHandler+0x51e>
      return;
 8005f70:	bf00      	nop
  }
}
 8005f72:	37e8      	adds	r7, #232	@ 0xe8
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005f80:	bf00      	nop
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bc80      	pop	{r7}
 8005f88:	4770      	bx	lr

08005f8a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f8a:	b480      	push	{r7}
 8005f8c:	b083      	sub	sp, #12
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005f92:	bf00      	nop
 8005f94:	370c      	adds	r7, #12
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bc80      	pop	{r7}
 8005f9a:	4770      	bx	lr

08005f9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005fa8:	bf00      	nop
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bc80      	pop	{r7}
 8005fb0:	4770      	bx	lr

08005fb2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b086      	sub	sp, #24
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	60f8      	str	r0, [r7, #12]
 8005fba:	60b9      	str	r1, [r7, #8]
 8005fbc:	603b      	str	r3, [r7, #0]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fc2:	e03b      	b.n	800603c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fc4:	6a3b      	ldr	r3, [r7, #32]
 8005fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fca:	d037      	beq.n	800603c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fcc:	f7fc fb7c 	bl	80026c8 <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	6a3a      	ldr	r2, [r7, #32]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d302      	bcc.n	8005fe2 <UART_WaitOnFlagUntilTimeout+0x30>
 8005fdc:	6a3b      	ldr	r3, [r7, #32]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d101      	bne.n	8005fe6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e03a      	b.n	800605c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	f003 0304 	and.w	r3, r3, #4
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d023      	beq.n	800603c <UART_WaitOnFlagUntilTimeout+0x8a>
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	2b80      	cmp	r3, #128	@ 0x80
 8005ff8:	d020      	beq.n	800603c <UART_WaitOnFlagUntilTimeout+0x8a>
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	2b40      	cmp	r3, #64	@ 0x40
 8005ffe:	d01d      	beq.n	800603c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 0308 	and.w	r3, r3, #8
 800600a:	2b08      	cmp	r3, #8
 800600c:	d116      	bne.n	800603c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800600e:	2300      	movs	r3, #0
 8006010:	617b      	str	r3, [r7, #20]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	617b      	str	r3, [r7, #20]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	617b      	str	r3, [r7, #20]
 8006022:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f000 f856 	bl	80060d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2208      	movs	r2, #8
 800602e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e00f      	b.n	800605c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	4013      	ands	r3, r2
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	429a      	cmp	r2, r3
 800604a:	bf0c      	ite	eq
 800604c:	2301      	moveq	r3, #1
 800604e:	2300      	movne	r3, #0
 8006050:	b2db      	uxtb	r3, r3
 8006052:	461a      	mov	r2, r3
 8006054:	79fb      	ldrb	r3, [r7, #7]
 8006056:	429a      	cmp	r2, r3
 8006058:	d0b4      	beq.n	8005fc4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	3718      	adds	r7, #24
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	4613      	mov	r3, r2
 8006070:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	68ba      	ldr	r2, [r7, #8]
 8006076:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	88fa      	ldrh	r2, [r7, #6]
 800607c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	88fa      	ldrh	r2, [r7, #6]
 8006082:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2222      	movs	r2, #34	@ 0x22
 800608e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d007      	beq.n	80060aa <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68da      	ldr	r2, [r3, #12]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80060a8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	695a      	ldr	r2, [r3, #20]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f042 0201 	orr.w	r2, r2, #1
 80060b8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68da      	ldr	r2, [r3, #12]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f042 0220 	orr.w	r2, r2, #32
 80060c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3714      	adds	r7, #20
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bc80      	pop	{r7}
 80060d4:	4770      	bx	lr

080060d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060d6:	b480      	push	{r7}
 80060d8:	b095      	sub	sp, #84	@ 0x54
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	330c      	adds	r3, #12
 80060e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060e8:	e853 3f00 	ldrex	r3, [r3]
 80060ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80060ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	330c      	adds	r3, #12
 80060fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80060fe:	643a      	str	r2, [r7, #64]	@ 0x40
 8006100:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006102:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006104:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006106:	e841 2300 	strex	r3, r2, [r1]
 800610a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800610c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1e5      	bne.n	80060de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	3314      	adds	r3, #20
 8006118:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611a:	6a3b      	ldr	r3, [r7, #32]
 800611c:	e853 3f00 	ldrex	r3, [r3]
 8006120:	61fb      	str	r3, [r7, #28]
   return(result);
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	f023 0301 	bic.w	r3, r3, #1
 8006128:	64bb      	str	r3, [r7, #72]	@ 0x48
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	3314      	adds	r3, #20
 8006130:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006132:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006134:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006136:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006138:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800613a:	e841 2300 	strex	r3, r2, [r1]
 800613e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1e5      	bne.n	8006112 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800614a:	2b01      	cmp	r3, #1
 800614c:	d119      	bne.n	8006182 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	330c      	adds	r3, #12
 8006154:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	e853 3f00 	ldrex	r3, [r3]
 800615c:	60bb      	str	r3, [r7, #8]
   return(result);
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	f023 0310 	bic.w	r3, r3, #16
 8006164:	647b      	str	r3, [r7, #68]	@ 0x44
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	330c      	adds	r3, #12
 800616c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800616e:	61ba      	str	r2, [r7, #24]
 8006170:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006172:	6979      	ldr	r1, [r7, #20]
 8006174:	69ba      	ldr	r2, [r7, #24]
 8006176:	e841 2300 	strex	r3, r2, [r1]
 800617a:	613b      	str	r3, [r7, #16]
   return(result);
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d1e5      	bne.n	800614e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2220      	movs	r2, #32
 8006186:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006190:	bf00      	nop
 8006192:	3754      	adds	r7, #84	@ 0x54
 8006194:	46bd      	mov	sp, r7
 8006196:	bc80      	pop	{r7}
 8006198:	4770      	bx	lr

0800619a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800619a:	b580      	push	{r7, lr}
 800619c:	b084      	sub	sp, #16
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061b4:	68f8      	ldr	r0, [r7, #12]
 80061b6:	f7ff fee8 	bl	8005f8a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061ba:	bf00      	nop
 80061bc:	3710      	adds	r7, #16
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80061c2:	b480      	push	{r7}
 80061c4:	b085      	sub	sp, #20
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	2b21      	cmp	r3, #33	@ 0x21
 80061d4:	d13e      	bne.n	8006254 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061de:	d114      	bne.n	800620a <UART_Transmit_IT+0x48>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d110      	bne.n	800620a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a1b      	ldr	r3, [r3, #32]
 80061ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	881b      	ldrh	r3, [r3, #0]
 80061f2:	461a      	mov	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	1c9a      	adds	r2, r3, #2
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	621a      	str	r2, [r3, #32]
 8006208:	e008      	b.n	800621c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	1c59      	adds	r1, r3, #1
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	6211      	str	r1, [r2, #32]
 8006214:	781a      	ldrb	r2, [r3, #0]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006220:	b29b      	uxth	r3, r3
 8006222:	3b01      	subs	r3, #1
 8006224:	b29b      	uxth	r3, r3
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	4619      	mov	r1, r3
 800622a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800622c:	2b00      	cmp	r3, #0
 800622e:	d10f      	bne.n	8006250 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68da      	ldr	r2, [r3, #12]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800623e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68da      	ldr	r2, [r3, #12]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800624e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006250:	2300      	movs	r3, #0
 8006252:	e000      	b.n	8006256 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006254:	2302      	movs	r3, #2
  }
}
 8006256:	4618      	mov	r0, r3
 8006258:	3714      	adds	r7, #20
 800625a:	46bd      	mov	sp, r7
 800625c:	bc80      	pop	{r7}
 800625e:	4770      	bx	lr

08006260 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68da      	ldr	r2, [r3, #12]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006276:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2220      	movs	r2, #32
 800627c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f7ff fe79 	bl	8005f78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3708      	adds	r7, #8
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b08c      	sub	sp, #48	@ 0x30
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	2b22      	cmp	r3, #34	@ 0x22
 80062a2:	f040 80ae 	bne.w	8006402 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062ae:	d117      	bne.n	80062e0 <UART_Receive_IT+0x50>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d113      	bne.n	80062e0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80062b8:	2300      	movs	r3, #0
 80062ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062c0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062ce:	b29a      	uxth	r2, r3
 80062d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062d2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062d8:	1c9a      	adds	r2, r3, #2
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80062de:	e026      	b.n	800632e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80062e6:	2300      	movs	r3, #0
 80062e8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062f2:	d007      	beq.n	8006304 <UART_Receive_IT+0x74>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d10a      	bne.n	8006312 <UART_Receive_IT+0x82>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d106      	bne.n	8006312 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	b2da      	uxtb	r2, r3
 800630c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800630e:	701a      	strb	r2, [r3, #0]
 8006310:	e008      	b.n	8006324 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	b2db      	uxtb	r3, r3
 800631a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800631e:	b2da      	uxtb	r2, r3
 8006320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006322:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006328:	1c5a      	adds	r2, r3, #1
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006332:	b29b      	uxth	r3, r3
 8006334:	3b01      	subs	r3, #1
 8006336:	b29b      	uxth	r3, r3
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	4619      	mov	r1, r3
 800633c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800633e:	2b00      	cmp	r3, #0
 8006340:	d15d      	bne.n	80063fe <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68da      	ldr	r2, [r3, #12]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f022 0220 	bic.w	r2, r2, #32
 8006350:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68da      	ldr	r2, [r3, #12]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006360:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	695a      	ldr	r2, [r3, #20]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f022 0201 	bic.w	r2, r2, #1
 8006370:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2220      	movs	r2, #32
 8006376:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006384:	2b01      	cmp	r3, #1
 8006386:	d135      	bne.n	80063f4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	330c      	adds	r3, #12
 8006394:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	e853 3f00 	ldrex	r3, [r3]
 800639c:	613b      	str	r3, [r7, #16]
   return(result);
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	f023 0310 	bic.w	r3, r3, #16
 80063a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	330c      	adds	r3, #12
 80063ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063ae:	623a      	str	r2, [r7, #32]
 80063b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b2:	69f9      	ldr	r1, [r7, #28]
 80063b4:	6a3a      	ldr	r2, [r7, #32]
 80063b6:	e841 2300 	strex	r3, r2, [r1]
 80063ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1e5      	bne.n	800638e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f003 0310 	and.w	r3, r3, #16
 80063cc:	2b10      	cmp	r3, #16
 80063ce:	d10a      	bne.n	80063e6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063d0:	2300      	movs	r3, #0
 80063d2:	60fb      	str	r3, [r7, #12]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	60fb      	str	r3, [r7, #12]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	60fb      	str	r3, [r7, #12]
 80063e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80063ea:	4619      	mov	r1, r3
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f7ff fdd5 	bl	8005f9c <HAL_UARTEx_RxEventCallback>
 80063f2:	e002      	b.n	80063fa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f7fb fb77 	bl	8001ae8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80063fa:	2300      	movs	r3, #0
 80063fc:	e002      	b.n	8006404 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80063fe:	2300      	movs	r3, #0
 8006400:	e000      	b.n	8006404 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006402:	2302      	movs	r3, #2
  }
}
 8006404:	4618      	mov	r0, r3
 8006406:	3730      	adds	r7, #48	@ 0x30
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	68da      	ldr	r2, [r3, #12]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	430a      	orrs	r2, r1
 8006428:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	689a      	ldr	r2, [r3, #8]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	431a      	orrs	r2, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	695b      	ldr	r3, [r3, #20]
 8006438:	4313      	orrs	r3, r2
 800643a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006446:	f023 030c 	bic.w	r3, r3, #12
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	6812      	ldr	r2, [r2, #0]
 800644e:	68b9      	ldr	r1, [r7, #8]
 8006450:	430b      	orrs	r3, r1
 8006452:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	699a      	ldr	r2, [r3, #24]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	430a      	orrs	r2, r1
 8006468:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a2c      	ldr	r2, [pc, #176]	@ (8006520 <UART_SetConfig+0x114>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d103      	bne.n	800647c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006474:	f7fe fd56 	bl	8004f24 <HAL_RCC_GetPCLK2Freq>
 8006478:	60f8      	str	r0, [r7, #12]
 800647a:	e002      	b.n	8006482 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800647c:	f7fe fd3e 	bl	8004efc <HAL_RCC_GetPCLK1Freq>
 8006480:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	4613      	mov	r3, r2
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	4413      	add	r3, r2
 800648a:	009a      	lsls	r2, r3, #2
 800648c:	441a      	add	r2, r3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	fbb2 f3f3 	udiv	r3, r2, r3
 8006498:	4a22      	ldr	r2, [pc, #136]	@ (8006524 <UART_SetConfig+0x118>)
 800649a:	fba2 2303 	umull	r2, r3, r2, r3
 800649e:	095b      	lsrs	r3, r3, #5
 80064a0:	0119      	lsls	r1, r3, #4
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	4613      	mov	r3, r2
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	4413      	add	r3, r2
 80064aa:	009a      	lsls	r2, r3, #2
 80064ac:	441a      	add	r2, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80064b8:	4b1a      	ldr	r3, [pc, #104]	@ (8006524 <UART_SetConfig+0x118>)
 80064ba:	fba3 0302 	umull	r0, r3, r3, r2
 80064be:	095b      	lsrs	r3, r3, #5
 80064c0:	2064      	movs	r0, #100	@ 0x64
 80064c2:	fb00 f303 	mul.w	r3, r0, r3
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	011b      	lsls	r3, r3, #4
 80064ca:	3332      	adds	r3, #50	@ 0x32
 80064cc:	4a15      	ldr	r2, [pc, #84]	@ (8006524 <UART_SetConfig+0x118>)
 80064ce:	fba2 2303 	umull	r2, r3, r2, r3
 80064d2:	095b      	lsrs	r3, r3, #5
 80064d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80064d8:	4419      	add	r1, r3
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	4613      	mov	r3, r2
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	4413      	add	r3, r2
 80064e2:	009a      	lsls	r2, r3, #2
 80064e4:	441a      	add	r2, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80064f0:	4b0c      	ldr	r3, [pc, #48]	@ (8006524 <UART_SetConfig+0x118>)
 80064f2:	fba3 0302 	umull	r0, r3, r3, r2
 80064f6:	095b      	lsrs	r3, r3, #5
 80064f8:	2064      	movs	r0, #100	@ 0x64
 80064fa:	fb00 f303 	mul.w	r3, r0, r3
 80064fe:	1ad3      	subs	r3, r2, r3
 8006500:	011b      	lsls	r3, r3, #4
 8006502:	3332      	adds	r3, #50	@ 0x32
 8006504:	4a07      	ldr	r2, [pc, #28]	@ (8006524 <UART_SetConfig+0x118>)
 8006506:	fba2 2303 	umull	r2, r3, r2, r3
 800650a:	095b      	lsrs	r3, r3, #5
 800650c:	f003 020f 	and.w	r2, r3, #15
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	440a      	add	r2, r1
 8006516:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006518:	bf00      	nop
 800651a:	3710      	adds	r7, #16
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	40013800 	.word	0x40013800
 8006524:	51eb851f 	.word	0x51eb851f

08006528 <__cvt>:
 8006528:	2b00      	cmp	r3, #0
 800652a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800652e:	461d      	mov	r5, r3
 8006530:	bfbb      	ittet	lt
 8006532:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006536:	461d      	movlt	r5, r3
 8006538:	2300      	movge	r3, #0
 800653a:	232d      	movlt	r3, #45	@ 0x2d
 800653c:	b088      	sub	sp, #32
 800653e:	4614      	mov	r4, r2
 8006540:	bfb8      	it	lt
 8006542:	4614      	movlt	r4, r2
 8006544:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006546:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006548:	7013      	strb	r3, [r2, #0]
 800654a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800654c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006550:	f023 0820 	bic.w	r8, r3, #32
 8006554:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006558:	d005      	beq.n	8006566 <__cvt+0x3e>
 800655a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800655e:	d100      	bne.n	8006562 <__cvt+0x3a>
 8006560:	3601      	adds	r6, #1
 8006562:	2302      	movs	r3, #2
 8006564:	e000      	b.n	8006568 <__cvt+0x40>
 8006566:	2303      	movs	r3, #3
 8006568:	aa07      	add	r2, sp, #28
 800656a:	9204      	str	r2, [sp, #16]
 800656c:	aa06      	add	r2, sp, #24
 800656e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006572:	e9cd 3600 	strd	r3, r6, [sp]
 8006576:	4622      	mov	r2, r4
 8006578:	462b      	mov	r3, r5
 800657a:	f001 f881 	bl	8007680 <_dtoa_r>
 800657e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006582:	4607      	mov	r7, r0
 8006584:	d119      	bne.n	80065ba <__cvt+0x92>
 8006586:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006588:	07db      	lsls	r3, r3, #31
 800658a:	d50e      	bpl.n	80065aa <__cvt+0x82>
 800658c:	eb00 0906 	add.w	r9, r0, r6
 8006590:	2200      	movs	r2, #0
 8006592:	2300      	movs	r3, #0
 8006594:	4620      	mov	r0, r4
 8006596:	4629      	mov	r1, r5
 8006598:	f7fa fa10 	bl	80009bc <__aeabi_dcmpeq>
 800659c:	b108      	cbz	r0, 80065a2 <__cvt+0x7a>
 800659e:	f8cd 901c 	str.w	r9, [sp, #28]
 80065a2:	2230      	movs	r2, #48	@ 0x30
 80065a4:	9b07      	ldr	r3, [sp, #28]
 80065a6:	454b      	cmp	r3, r9
 80065a8:	d31e      	bcc.n	80065e8 <__cvt+0xc0>
 80065aa:	4638      	mov	r0, r7
 80065ac:	9b07      	ldr	r3, [sp, #28]
 80065ae:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80065b0:	1bdb      	subs	r3, r3, r7
 80065b2:	6013      	str	r3, [r2, #0]
 80065b4:	b008      	add	sp, #32
 80065b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065ba:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80065be:	eb00 0906 	add.w	r9, r0, r6
 80065c2:	d1e5      	bne.n	8006590 <__cvt+0x68>
 80065c4:	7803      	ldrb	r3, [r0, #0]
 80065c6:	2b30      	cmp	r3, #48	@ 0x30
 80065c8:	d10a      	bne.n	80065e0 <__cvt+0xb8>
 80065ca:	2200      	movs	r2, #0
 80065cc:	2300      	movs	r3, #0
 80065ce:	4620      	mov	r0, r4
 80065d0:	4629      	mov	r1, r5
 80065d2:	f7fa f9f3 	bl	80009bc <__aeabi_dcmpeq>
 80065d6:	b918      	cbnz	r0, 80065e0 <__cvt+0xb8>
 80065d8:	f1c6 0601 	rsb	r6, r6, #1
 80065dc:	f8ca 6000 	str.w	r6, [sl]
 80065e0:	f8da 3000 	ldr.w	r3, [sl]
 80065e4:	4499      	add	r9, r3
 80065e6:	e7d3      	b.n	8006590 <__cvt+0x68>
 80065e8:	1c59      	adds	r1, r3, #1
 80065ea:	9107      	str	r1, [sp, #28]
 80065ec:	701a      	strb	r2, [r3, #0]
 80065ee:	e7d9      	b.n	80065a4 <__cvt+0x7c>

080065f0 <__exponent>:
 80065f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065f2:	2900      	cmp	r1, #0
 80065f4:	bfb6      	itet	lt
 80065f6:	232d      	movlt	r3, #45	@ 0x2d
 80065f8:	232b      	movge	r3, #43	@ 0x2b
 80065fa:	4249      	neglt	r1, r1
 80065fc:	2909      	cmp	r1, #9
 80065fe:	7002      	strb	r2, [r0, #0]
 8006600:	7043      	strb	r3, [r0, #1]
 8006602:	dd29      	ble.n	8006658 <__exponent+0x68>
 8006604:	f10d 0307 	add.w	r3, sp, #7
 8006608:	461d      	mov	r5, r3
 800660a:	270a      	movs	r7, #10
 800660c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006610:	461a      	mov	r2, r3
 8006612:	fb07 1416 	mls	r4, r7, r6, r1
 8006616:	3430      	adds	r4, #48	@ 0x30
 8006618:	f802 4c01 	strb.w	r4, [r2, #-1]
 800661c:	460c      	mov	r4, r1
 800661e:	2c63      	cmp	r4, #99	@ 0x63
 8006620:	4631      	mov	r1, r6
 8006622:	f103 33ff 	add.w	r3, r3, #4294967295
 8006626:	dcf1      	bgt.n	800660c <__exponent+0x1c>
 8006628:	3130      	adds	r1, #48	@ 0x30
 800662a:	1e94      	subs	r4, r2, #2
 800662c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006630:	4623      	mov	r3, r4
 8006632:	1c41      	adds	r1, r0, #1
 8006634:	42ab      	cmp	r3, r5
 8006636:	d30a      	bcc.n	800664e <__exponent+0x5e>
 8006638:	f10d 0309 	add.w	r3, sp, #9
 800663c:	1a9b      	subs	r3, r3, r2
 800663e:	42ac      	cmp	r4, r5
 8006640:	bf88      	it	hi
 8006642:	2300      	movhi	r3, #0
 8006644:	3302      	adds	r3, #2
 8006646:	4403      	add	r3, r0
 8006648:	1a18      	subs	r0, r3, r0
 800664a:	b003      	add	sp, #12
 800664c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800664e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006652:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006656:	e7ed      	b.n	8006634 <__exponent+0x44>
 8006658:	2330      	movs	r3, #48	@ 0x30
 800665a:	3130      	adds	r1, #48	@ 0x30
 800665c:	7083      	strb	r3, [r0, #2]
 800665e:	70c1      	strb	r1, [r0, #3]
 8006660:	1d03      	adds	r3, r0, #4
 8006662:	e7f1      	b.n	8006648 <__exponent+0x58>

08006664 <_printf_float>:
 8006664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006668:	b091      	sub	sp, #68	@ 0x44
 800666a:	460c      	mov	r4, r1
 800666c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006670:	4616      	mov	r6, r2
 8006672:	461f      	mov	r7, r3
 8006674:	4605      	mov	r5, r0
 8006676:	f000 fef1 	bl	800745c <_localeconv_r>
 800667a:	6803      	ldr	r3, [r0, #0]
 800667c:	4618      	mov	r0, r3
 800667e:	9308      	str	r3, [sp, #32]
 8006680:	f7f9 fd70 	bl	8000164 <strlen>
 8006684:	2300      	movs	r3, #0
 8006686:	930e      	str	r3, [sp, #56]	@ 0x38
 8006688:	f8d8 3000 	ldr.w	r3, [r8]
 800668c:	9009      	str	r0, [sp, #36]	@ 0x24
 800668e:	3307      	adds	r3, #7
 8006690:	f023 0307 	bic.w	r3, r3, #7
 8006694:	f103 0208 	add.w	r2, r3, #8
 8006698:	f894 a018 	ldrb.w	sl, [r4, #24]
 800669c:	f8d4 b000 	ldr.w	fp, [r4]
 80066a0:	f8c8 2000 	str.w	r2, [r8]
 80066a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80066a8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80066ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 80066ae:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80066b2:	f04f 32ff 	mov.w	r2, #4294967295
 80066b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80066ba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80066be:	4b9c      	ldr	r3, [pc, #624]	@ (8006930 <_printf_float+0x2cc>)
 80066c0:	f7fa f9ae 	bl	8000a20 <__aeabi_dcmpun>
 80066c4:	bb70      	cbnz	r0, 8006724 <_printf_float+0xc0>
 80066c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80066ca:	f04f 32ff 	mov.w	r2, #4294967295
 80066ce:	4b98      	ldr	r3, [pc, #608]	@ (8006930 <_printf_float+0x2cc>)
 80066d0:	f7fa f988 	bl	80009e4 <__aeabi_dcmple>
 80066d4:	bb30      	cbnz	r0, 8006724 <_printf_float+0xc0>
 80066d6:	2200      	movs	r2, #0
 80066d8:	2300      	movs	r3, #0
 80066da:	4640      	mov	r0, r8
 80066dc:	4649      	mov	r1, r9
 80066de:	f7fa f977 	bl	80009d0 <__aeabi_dcmplt>
 80066e2:	b110      	cbz	r0, 80066ea <_printf_float+0x86>
 80066e4:	232d      	movs	r3, #45	@ 0x2d
 80066e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066ea:	4a92      	ldr	r2, [pc, #584]	@ (8006934 <_printf_float+0x2d0>)
 80066ec:	4b92      	ldr	r3, [pc, #584]	@ (8006938 <_printf_float+0x2d4>)
 80066ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80066f2:	bf94      	ite	ls
 80066f4:	4690      	movls	r8, r2
 80066f6:	4698      	movhi	r8, r3
 80066f8:	2303      	movs	r3, #3
 80066fa:	f04f 0900 	mov.w	r9, #0
 80066fe:	6123      	str	r3, [r4, #16]
 8006700:	f02b 0304 	bic.w	r3, fp, #4
 8006704:	6023      	str	r3, [r4, #0]
 8006706:	4633      	mov	r3, r6
 8006708:	4621      	mov	r1, r4
 800670a:	4628      	mov	r0, r5
 800670c:	9700      	str	r7, [sp, #0]
 800670e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006710:	f000 f9d4 	bl	8006abc <_printf_common>
 8006714:	3001      	adds	r0, #1
 8006716:	f040 8090 	bne.w	800683a <_printf_float+0x1d6>
 800671a:	f04f 30ff 	mov.w	r0, #4294967295
 800671e:	b011      	add	sp, #68	@ 0x44
 8006720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006724:	4642      	mov	r2, r8
 8006726:	464b      	mov	r3, r9
 8006728:	4640      	mov	r0, r8
 800672a:	4649      	mov	r1, r9
 800672c:	f7fa f978 	bl	8000a20 <__aeabi_dcmpun>
 8006730:	b148      	cbz	r0, 8006746 <_printf_float+0xe2>
 8006732:	464b      	mov	r3, r9
 8006734:	2b00      	cmp	r3, #0
 8006736:	bfb8      	it	lt
 8006738:	232d      	movlt	r3, #45	@ 0x2d
 800673a:	4a80      	ldr	r2, [pc, #512]	@ (800693c <_printf_float+0x2d8>)
 800673c:	bfb8      	it	lt
 800673e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006742:	4b7f      	ldr	r3, [pc, #508]	@ (8006940 <_printf_float+0x2dc>)
 8006744:	e7d3      	b.n	80066ee <_printf_float+0x8a>
 8006746:	6863      	ldr	r3, [r4, #4]
 8006748:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800674c:	1c5a      	adds	r2, r3, #1
 800674e:	d13f      	bne.n	80067d0 <_printf_float+0x16c>
 8006750:	2306      	movs	r3, #6
 8006752:	6063      	str	r3, [r4, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800675a:	6023      	str	r3, [r4, #0]
 800675c:	9206      	str	r2, [sp, #24]
 800675e:	aa0e      	add	r2, sp, #56	@ 0x38
 8006760:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006764:	aa0d      	add	r2, sp, #52	@ 0x34
 8006766:	9203      	str	r2, [sp, #12]
 8006768:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800676c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006770:	6863      	ldr	r3, [r4, #4]
 8006772:	4642      	mov	r2, r8
 8006774:	9300      	str	r3, [sp, #0]
 8006776:	4628      	mov	r0, r5
 8006778:	464b      	mov	r3, r9
 800677a:	910a      	str	r1, [sp, #40]	@ 0x28
 800677c:	f7ff fed4 	bl	8006528 <__cvt>
 8006780:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006782:	4680      	mov	r8, r0
 8006784:	2947      	cmp	r1, #71	@ 0x47
 8006786:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006788:	d128      	bne.n	80067dc <_printf_float+0x178>
 800678a:	1cc8      	adds	r0, r1, #3
 800678c:	db02      	blt.n	8006794 <_printf_float+0x130>
 800678e:	6863      	ldr	r3, [r4, #4]
 8006790:	4299      	cmp	r1, r3
 8006792:	dd40      	ble.n	8006816 <_printf_float+0x1b2>
 8006794:	f1aa 0a02 	sub.w	sl, sl, #2
 8006798:	fa5f fa8a 	uxtb.w	sl, sl
 800679c:	4652      	mov	r2, sl
 800679e:	3901      	subs	r1, #1
 80067a0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80067a4:	910d      	str	r1, [sp, #52]	@ 0x34
 80067a6:	f7ff ff23 	bl	80065f0 <__exponent>
 80067aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80067ac:	4681      	mov	r9, r0
 80067ae:	1813      	adds	r3, r2, r0
 80067b0:	2a01      	cmp	r2, #1
 80067b2:	6123      	str	r3, [r4, #16]
 80067b4:	dc02      	bgt.n	80067bc <_printf_float+0x158>
 80067b6:	6822      	ldr	r2, [r4, #0]
 80067b8:	07d2      	lsls	r2, r2, #31
 80067ba:	d501      	bpl.n	80067c0 <_printf_float+0x15c>
 80067bc:	3301      	adds	r3, #1
 80067be:	6123      	str	r3, [r4, #16]
 80067c0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d09e      	beq.n	8006706 <_printf_float+0xa2>
 80067c8:	232d      	movs	r3, #45	@ 0x2d
 80067ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067ce:	e79a      	b.n	8006706 <_printf_float+0xa2>
 80067d0:	2947      	cmp	r1, #71	@ 0x47
 80067d2:	d1bf      	bne.n	8006754 <_printf_float+0xf0>
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d1bd      	bne.n	8006754 <_printf_float+0xf0>
 80067d8:	2301      	movs	r3, #1
 80067da:	e7ba      	b.n	8006752 <_printf_float+0xee>
 80067dc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80067e0:	d9dc      	bls.n	800679c <_printf_float+0x138>
 80067e2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80067e6:	d118      	bne.n	800681a <_printf_float+0x1b6>
 80067e8:	2900      	cmp	r1, #0
 80067ea:	6863      	ldr	r3, [r4, #4]
 80067ec:	dd0b      	ble.n	8006806 <_printf_float+0x1a2>
 80067ee:	6121      	str	r1, [r4, #16]
 80067f0:	b913      	cbnz	r3, 80067f8 <_printf_float+0x194>
 80067f2:	6822      	ldr	r2, [r4, #0]
 80067f4:	07d0      	lsls	r0, r2, #31
 80067f6:	d502      	bpl.n	80067fe <_printf_float+0x19a>
 80067f8:	3301      	adds	r3, #1
 80067fa:	440b      	add	r3, r1
 80067fc:	6123      	str	r3, [r4, #16]
 80067fe:	f04f 0900 	mov.w	r9, #0
 8006802:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006804:	e7dc      	b.n	80067c0 <_printf_float+0x15c>
 8006806:	b913      	cbnz	r3, 800680e <_printf_float+0x1aa>
 8006808:	6822      	ldr	r2, [r4, #0]
 800680a:	07d2      	lsls	r2, r2, #31
 800680c:	d501      	bpl.n	8006812 <_printf_float+0x1ae>
 800680e:	3302      	adds	r3, #2
 8006810:	e7f4      	b.n	80067fc <_printf_float+0x198>
 8006812:	2301      	movs	r3, #1
 8006814:	e7f2      	b.n	80067fc <_printf_float+0x198>
 8006816:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800681a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800681c:	4299      	cmp	r1, r3
 800681e:	db05      	blt.n	800682c <_printf_float+0x1c8>
 8006820:	6823      	ldr	r3, [r4, #0]
 8006822:	6121      	str	r1, [r4, #16]
 8006824:	07d8      	lsls	r0, r3, #31
 8006826:	d5ea      	bpl.n	80067fe <_printf_float+0x19a>
 8006828:	1c4b      	adds	r3, r1, #1
 800682a:	e7e7      	b.n	80067fc <_printf_float+0x198>
 800682c:	2900      	cmp	r1, #0
 800682e:	bfcc      	ite	gt
 8006830:	2201      	movgt	r2, #1
 8006832:	f1c1 0202 	rsble	r2, r1, #2
 8006836:	4413      	add	r3, r2
 8006838:	e7e0      	b.n	80067fc <_printf_float+0x198>
 800683a:	6823      	ldr	r3, [r4, #0]
 800683c:	055a      	lsls	r2, r3, #21
 800683e:	d407      	bmi.n	8006850 <_printf_float+0x1ec>
 8006840:	6923      	ldr	r3, [r4, #16]
 8006842:	4642      	mov	r2, r8
 8006844:	4631      	mov	r1, r6
 8006846:	4628      	mov	r0, r5
 8006848:	47b8      	blx	r7
 800684a:	3001      	adds	r0, #1
 800684c:	d12b      	bne.n	80068a6 <_printf_float+0x242>
 800684e:	e764      	b.n	800671a <_printf_float+0xb6>
 8006850:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006854:	f240 80dc 	bls.w	8006a10 <_printf_float+0x3ac>
 8006858:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800685c:	2200      	movs	r2, #0
 800685e:	2300      	movs	r3, #0
 8006860:	f7fa f8ac 	bl	80009bc <__aeabi_dcmpeq>
 8006864:	2800      	cmp	r0, #0
 8006866:	d033      	beq.n	80068d0 <_printf_float+0x26c>
 8006868:	2301      	movs	r3, #1
 800686a:	4631      	mov	r1, r6
 800686c:	4628      	mov	r0, r5
 800686e:	4a35      	ldr	r2, [pc, #212]	@ (8006944 <_printf_float+0x2e0>)
 8006870:	47b8      	blx	r7
 8006872:	3001      	adds	r0, #1
 8006874:	f43f af51 	beq.w	800671a <_printf_float+0xb6>
 8006878:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800687c:	4543      	cmp	r3, r8
 800687e:	db02      	blt.n	8006886 <_printf_float+0x222>
 8006880:	6823      	ldr	r3, [r4, #0]
 8006882:	07d8      	lsls	r0, r3, #31
 8006884:	d50f      	bpl.n	80068a6 <_printf_float+0x242>
 8006886:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800688a:	4631      	mov	r1, r6
 800688c:	4628      	mov	r0, r5
 800688e:	47b8      	blx	r7
 8006890:	3001      	adds	r0, #1
 8006892:	f43f af42 	beq.w	800671a <_printf_float+0xb6>
 8006896:	f04f 0900 	mov.w	r9, #0
 800689a:	f108 38ff 	add.w	r8, r8, #4294967295
 800689e:	f104 0a1a 	add.w	sl, r4, #26
 80068a2:	45c8      	cmp	r8, r9
 80068a4:	dc09      	bgt.n	80068ba <_printf_float+0x256>
 80068a6:	6823      	ldr	r3, [r4, #0]
 80068a8:	079b      	lsls	r3, r3, #30
 80068aa:	f100 8102 	bmi.w	8006ab2 <_printf_float+0x44e>
 80068ae:	68e0      	ldr	r0, [r4, #12]
 80068b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80068b2:	4298      	cmp	r0, r3
 80068b4:	bfb8      	it	lt
 80068b6:	4618      	movlt	r0, r3
 80068b8:	e731      	b.n	800671e <_printf_float+0xba>
 80068ba:	2301      	movs	r3, #1
 80068bc:	4652      	mov	r2, sl
 80068be:	4631      	mov	r1, r6
 80068c0:	4628      	mov	r0, r5
 80068c2:	47b8      	blx	r7
 80068c4:	3001      	adds	r0, #1
 80068c6:	f43f af28 	beq.w	800671a <_printf_float+0xb6>
 80068ca:	f109 0901 	add.w	r9, r9, #1
 80068ce:	e7e8      	b.n	80068a2 <_printf_float+0x23e>
 80068d0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	dc38      	bgt.n	8006948 <_printf_float+0x2e4>
 80068d6:	2301      	movs	r3, #1
 80068d8:	4631      	mov	r1, r6
 80068da:	4628      	mov	r0, r5
 80068dc:	4a19      	ldr	r2, [pc, #100]	@ (8006944 <_printf_float+0x2e0>)
 80068de:	47b8      	blx	r7
 80068e0:	3001      	adds	r0, #1
 80068e2:	f43f af1a 	beq.w	800671a <_printf_float+0xb6>
 80068e6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80068ea:	ea59 0303 	orrs.w	r3, r9, r3
 80068ee:	d102      	bne.n	80068f6 <_printf_float+0x292>
 80068f0:	6823      	ldr	r3, [r4, #0]
 80068f2:	07d9      	lsls	r1, r3, #31
 80068f4:	d5d7      	bpl.n	80068a6 <_printf_float+0x242>
 80068f6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80068fa:	4631      	mov	r1, r6
 80068fc:	4628      	mov	r0, r5
 80068fe:	47b8      	blx	r7
 8006900:	3001      	adds	r0, #1
 8006902:	f43f af0a 	beq.w	800671a <_printf_float+0xb6>
 8006906:	f04f 0a00 	mov.w	sl, #0
 800690a:	f104 0b1a 	add.w	fp, r4, #26
 800690e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006910:	425b      	negs	r3, r3
 8006912:	4553      	cmp	r3, sl
 8006914:	dc01      	bgt.n	800691a <_printf_float+0x2b6>
 8006916:	464b      	mov	r3, r9
 8006918:	e793      	b.n	8006842 <_printf_float+0x1de>
 800691a:	2301      	movs	r3, #1
 800691c:	465a      	mov	r2, fp
 800691e:	4631      	mov	r1, r6
 8006920:	4628      	mov	r0, r5
 8006922:	47b8      	blx	r7
 8006924:	3001      	adds	r0, #1
 8006926:	f43f aef8 	beq.w	800671a <_printf_float+0xb6>
 800692a:	f10a 0a01 	add.w	sl, sl, #1
 800692e:	e7ee      	b.n	800690e <_printf_float+0x2aa>
 8006930:	7fefffff 	.word	0x7fefffff
 8006934:	0800ad12 	.word	0x0800ad12
 8006938:	0800ad16 	.word	0x0800ad16
 800693c:	0800ad1a 	.word	0x0800ad1a
 8006940:	0800ad1e 	.word	0x0800ad1e
 8006944:	0800ad22 	.word	0x0800ad22
 8006948:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800694a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800694e:	4553      	cmp	r3, sl
 8006950:	bfa8      	it	ge
 8006952:	4653      	movge	r3, sl
 8006954:	2b00      	cmp	r3, #0
 8006956:	4699      	mov	r9, r3
 8006958:	dc36      	bgt.n	80069c8 <_printf_float+0x364>
 800695a:	f04f 0b00 	mov.w	fp, #0
 800695e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006962:	f104 021a 	add.w	r2, r4, #26
 8006966:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006968:	930a      	str	r3, [sp, #40]	@ 0x28
 800696a:	eba3 0309 	sub.w	r3, r3, r9
 800696e:	455b      	cmp	r3, fp
 8006970:	dc31      	bgt.n	80069d6 <_printf_float+0x372>
 8006972:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006974:	459a      	cmp	sl, r3
 8006976:	dc3a      	bgt.n	80069ee <_printf_float+0x38a>
 8006978:	6823      	ldr	r3, [r4, #0]
 800697a:	07da      	lsls	r2, r3, #31
 800697c:	d437      	bmi.n	80069ee <_printf_float+0x38a>
 800697e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006980:	ebaa 0903 	sub.w	r9, sl, r3
 8006984:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006986:	ebaa 0303 	sub.w	r3, sl, r3
 800698a:	4599      	cmp	r9, r3
 800698c:	bfa8      	it	ge
 800698e:	4699      	movge	r9, r3
 8006990:	f1b9 0f00 	cmp.w	r9, #0
 8006994:	dc33      	bgt.n	80069fe <_printf_float+0x39a>
 8006996:	f04f 0800 	mov.w	r8, #0
 800699a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800699e:	f104 0b1a 	add.w	fp, r4, #26
 80069a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80069a4:	ebaa 0303 	sub.w	r3, sl, r3
 80069a8:	eba3 0309 	sub.w	r3, r3, r9
 80069ac:	4543      	cmp	r3, r8
 80069ae:	f77f af7a 	ble.w	80068a6 <_printf_float+0x242>
 80069b2:	2301      	movs	r3, #1
 80069b4:	465a      	mov	r2, fp
 80069b6:	4631      	mov	r1, r6
 80069b8:	4628      	mov	r0, r5
 80069ba:	47b8      	blx	r7
 80069bc:	3001      	adds	r0, #1
 80069be:	f43f aeac 	beq.w	800671a <_printf_float+0xb6>
 80069c2:	f108 0801 	add.w	r8, r8, #1
 80069c6:	e7ec      	b.n	80069a2 <_printf_float+0x33e>
 80069c8:	4642      	mov	r2, r8
 80069ca:	4631      	mov	r1, r6
 80069cc:	4628      	mov	r0, r5
 80069ce:	47b8      	blx	r7
 80069d0:	3001      	adds	r0, #1
 80069d2:	d1c2      	bne.n	800695a <_printf_float+0x2f6>
 80069d4:	e6a1      	b.n	800671a <_printf_float+0xb6>
 80069d6:	2301      	movs	r3, #1
 80069d8:	4631      	mov	r1, r6
 80069da:	4628      	mov	r0, r5
 80069dc:	920a      	str	r2, [sp, #40]	@ 0x28
 80069de:	47b8      	blx	r7
 80069e0:	3001      	adds	r0, #1
 80069e2:	f43f ae9a 	beq.w	800671a <_printf_float+0xb6>
 80069e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80069e8:	f10b 0b01 	add.w	fp, fp, #1
 80069ec:	e7bb      	b.n	8006966 <_printf_float+0x302>
 80069ee:	4631      	mov	r1, r6
 80069f0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80069f4:	4628      	mov	r0, r5
 80069f6:	47b8      	blx	r7
 80069f8:	3001      	adds	r0, #1
 80069fa:	d1c0      	bne.n	800697e <_printf_float+0x31a>
 80069fc:	e68d      	b.n	800671a <_printf_float+0xb6>
 80069fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006a00:	464b      	mov	r3, r9
 8006a02:	4631      	mov	r1, r6
 8006a04:	4628      	mov	r0, r5
 8006a06:	4442      	add	r2, r8
 8006a08:	47b8      	blx	r7
 8006a0a:	3001      	adds	r0, #1
 8006a0c:	d1c3      	bne.n	8006996 <_printf_float+0x332>
 8006a0e:	e684      	b.n	800671a <_printf_float+0xb6>
 8006a10:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006a14:	f1ba 0f01 	cmp.w	sl, #1
 8006a18:	dc01      	bgt.n	8006a1e <_printf_float+0x3ba>
 8006a1a:	07db      	lsls	r3, r3, #31
 8006a1c:	d536      	bpl.n	8006a8c <_printf_float+0x428>
 8006a1e:	2301      	movs	r3, #1
 8006a20:	4642      	mov	r2, r8
 8006a22:	4631      	mov	r1, r6
 8006a24:	4628      	mov	r0, r5
 8006a26:	47b8      	blx	r7
 8006a28:	3001      	adds	r0, #1
 8006a2a:	f43f ae76 	beq.w	800671a <_printf_float+0xb6>
 8006a2e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006a32:	4631      	mov	r1, r6
 8006a34:	4628      	mov	r0, r5
 8006a36:	47b8      	blx	r7
 8006a38:	3001      	adds	r0, #1
 8006a3a:	f43f ae6e 	beq.w	800671a <_printf_float+0xb6>
 8006a3e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006a42:	2200      	movs	r2, #0
 8006a44:	2300      	movs	r3, #0
 8006a46:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a4a:	f7f9 ffb7 	bl	80009bc <__aeabi_dcmpeq>
 8006a4e:	b9c0      	cbnz	r0, 8006a82 <_printf_float+0x41e>
 8006a50:	4653      	mov	r3, sl
 8006a52:	f108 0201 	add.w	r2, r8, #1
 8006a56:	4631      	mov	r1, r6
 8006a58:	4628      	mov	r0, r5
 8006a5a:	47b8      	blx	r7
 8006a5c:	3001      	adds	r0, #1
 8006a5e:	d10c      	bne.n	8006a7a <_printf_float+0x416>
 8006a60:	e65b      	b.n	800671a <_printf_float+0xb6>
 8006a62:	2301      	movs	r3, #1
 8006a64:	465a      	mov	r2, fp
 8006a66:	4631      	mov	r1, r6
 8006a68:	4628      	mov	r0, r5
 8006a6a:	47b8      	blx	r7
 8006a6c:	3001      	adds	r0, #1
 8006a6e:	f43f ae54 	beq.w	800671a <_printf_float+0xb6>
 8006a72:	f108 0801 	add.w	r8, r8, #1
 8006a76:	45d0      	cmp	r8, sl
 8006a78:	dbf3      	blt.n	8006a62 <_printf_float+0x3fe>
 8006a7a:	464b      	mov	r3, r9
 8006a7c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006a80:	e6e0      	b.n	8006844 <_printf_float+0x1e0>
 8006a82:	f04f 0800 	mov.w	r8, #0
 8006a86:	f104 0b1a 	add.w	fp, r4, #26
 8006a8a:	e7f4      	b.n	8006a76 <_printf_float+0x412>
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	4642      	mov	r2, r8
 8006a90:	e7e1      	b.n	8006a56 <_printf_float+0x3f2>
 8006a92:	2301      	movs	r3, #1
 8006a94:	464a      	mov	r2, r9
 8006a96:	4631      	mov	r1, r6
 8006a98:	4628      	mov	r0, r5
 8006a9a:	47b8      	blx	r7
 8006a9c:	3001      	adds	r0, #1
 8006a9e:	f43f ae3c 	beq.w	800671a <_printf_float+0xb6>
 8006aa2:	f108 0801 	add.w	r8, r8, #1
 8006aa6:	68e3      	ldr	r3, [r4, #12]
 8006aa8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006aaa:	1a5b      	subs	r3, r3, r1
 8006aac:	4543      	cmp	r3, r8
 8006aae:	dcf0      	bgt.n	8006a92 <_printf_float+0x42e>
 8006ab0:	e6fd      	b.n	80068ae <_printf_float+0x24a>
 8006ab2:	f04f 0800 	mov.w	r8, #0
 8006ab6:	f104 0919 	add.w	r9, r4, #25
 8006aba:	e7f4      	b.n	8006aa6 <_printf_float+0x442>

08006abc <_printf_common>:
 8006abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ac0:	4616      	mov	r6, r2
 8006ac2:	4698      	mov	r8, r3
 8006ac4:	688a      	ldr	r2, [r1, #8]
 8006ac6:	690b      	ldr	r3, [r1, #16]
 8006ac8:	4607      	mov	r7, r0
 8006aca:	4293      	cmp	r3, r2
 8006acc:	bfb8      	it	lt
 8006ace:	4613      	movlt	r3, r2
 8006ad0:	6033      	str	r3, [r6, #0]
 8006ad2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006ad6:	460c      	mov	r4, r1
 8006ad8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006adc:	b10a      	cbz	r2, 8006ae2 <_printf_common+0x26>
 8006ade:	3301      	adds	r3, #1
 8006ae0:	6033      	str	r3, [r6, #0]
 8006ae2:	6823      	ldr	r3, [r4, #0]
 8006ae4:	0699      	lsls	r1, r3, #26
 8006ae6:	bf42      	ittt	mi
 8006ae8:	6833      	ldrmi	r3, [r6, #0]
 8006aea:	3302      	addmi	r3, #2
 8006aec:	6033      	strmi	r3, [r6, #0]
 8006aee:	6825      	ldr	r5, [r4, #0]
 8006af0:	f015 0506 	ands.w	r5, r5, #6
 8006af4:	d106      	bne.n	8006b04 <_printf_common+0x48>
 8006af6:	f104 0a19 	add.w	sl, r4, #25
 8006afa:	68e3      	ldr	r3, [r4, #12]
 8006afc:	6832      	ldr	r2, [r6, #0]
 8006afe:	1a9b      	subs	r3, r3, r2
 8006b00:	42ab      	cmp	r3, r5
 8006b02:	dc2b      	bgt.n	8006b5c <_printf_common+0xa0>
 8006b04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006b08:	6822      	ldr	r2, [r4, #0]
 8006b0a:	3b00      	subs	r3, #0
 8006b0c:	bf18      	it	ne
 8006b0e:	2301      	movne	r3, #1
 8006b10:	0692      	lsls	r2, r2, #26
 8006b12:	d430      	bmi.n	8006b76 <_printf_common+0xba>
 8006b14:	4641      	mov	r1, r8
 8006b16:	4638      	mov	r0, r7
 8006b18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006b1c:	47c8      	blx	r9
 8006b1e:	3001      	adds	r0, #1
 8006b20:	d023      	beq.n	8006b6a <_printf_common+0xae>
 8006b22:	6823      	ldr	r3, [r4, #0]
 8006b24:	6922      	ldr	r2, [r4, #16]
 8006b26:	f003 0306 	and.w	r3, r3, #6
 8006b2a:	2b04      	cmp	r3, #4
 8006b2c:	bf14      	ite	ne
 8006b2e:	2500      	movne	r5, #0
 8006b30:	6833      	ldreq	r3, [r6, #0]
 8006b32:	f04f 0600 	mov.w	r6, #0
 8006b36:	bf08      	it	eq
 8006b38:	68e5      	ldreq	r5, [r4, #12]
 8006b3a:	f104 041a 	add.w	r4, r4, #26
 8006b3e:	bf08      	it	eq
 8006b40:	1aed      	subeq	r5, r5, r3
 8006b42:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006b46:	bf08      	it	eq
 8006b48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	bfc4      	itt	gt
 8006b50:	1a9b      	subgt	r3, r3, r2
 8006b52:	18ed      	addgt	r5, r5, r3
 8006b54:	42b5      	cmp	r5, r6
 8006b56:	d11a      	bne.n	8006b8e <_printf_common+0xd2>
 8006b58:	2000      	movs	r0, #0
 8006b5a:	e008      	b.n	8006b6e <_printf_common+0xb2>
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	4652      	mov	r2, sl
 8006b60:	4641      	mov	r1, r8
 8006b62:	4638      	mov	r0, r7
 8006b64:	47c8      	blx	r9
 8006b66:	3001      	adds	r0, #1
 8006b68:	d103      	bne.n	8006b72 <_printf_common+0xb6>
 8006b6a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b72:	3501      	adds	r5, #1
 8006b74:	e7c1      	b.n	8006afa <_printf_common+0x3e>
 8006b76:	2030      	movs	r0, #48	@ 0x30
 8006b78:	18e1      	adds	r1, r4, r3
 8006b7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006b7e:	1c5a      	adds	r2, r3, #1
 8006b80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006b84:	4422      	add	r2, r4
 8006b86:	3302      	adds	r3, #2
 8006b88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006b8c:	e7c2      	b.n	8006b14 <_printf_common+0x58>
 8006b8e:	2301      	movs	r3, #1
 8006b90:	4622      	mov	r2, r4
 8006b92:	4641      	mov	r1, r8
 8006b94:	4638      	mov	r0, r7
 8006b96:	47c8      	blx	r9
 8006b98:	3001      	adds	r0, #1
 8006b9a:	d0e6      	beq.n	8006b6a <_printf_common+0xae>
 8006b9c:	3601      	adds	r6, #1
 8006b9e:	e7d9      	b.n	8006b54 <_printf_common+0x98>

08006ba0 <_printf_i>:
 8006ba0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ba4:	7e0f      	ldrb	r7, [r1, #24]
 8006ba6:	4691      	mov	r9, r2
 8006ba8:	2f78      	cmp	r7, #120	@ 0x78
 8006baa:	4680      	mov	r8, r0
 8006bac:	460c      	mov	r4, r1
 8006bae:	469a      	mov	sl, r3
 8006bb0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006bb2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006bb6:	d807      	bhi.n	8006bc8 <_printf_i+0x28>
 8006bb8:	2f62      	cmp	r7, #98	@ 0x62
 8006bba:	d80a      	bhi.n	8006bd2 <_printf_i+0x32>
 8006bbc:	2f00      	cmp	r7, #0
 8006bbe:	f000 80d3 	beq.w	8006d68 <_printf_i+0x1c8>
 8006bc2:	2f58      	cmp	r7, #88	@ 0x58
 8006bc4:	f000 80ba 	beq.w	8006d3c <_printf_i+0x19c>
 8006bc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006bcc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006bd0:	e03a      	b.n	8006c48 <_printf_i+0xa8>
 8006bd2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006bd6:	2b15      	cmp	r3, #21
 8006bd8:	d8f6      	bhi.n	8006bc8 <_printf_i+0x28>
 8006bda:	a101      	add	r1, pc, #4	@ (adr r1, 8006be0 <_printf_i+0x40>)
 8006bdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006be0:	08006c39 	.word	0x08006c39
 8006be4:	08006c4d 	.word	0x08006c4d
 8006be8:	08006bc9 	.word	0x08006bc9
 8006bec:	08006bc9 	.word	0x08006bc9
 8006bf0:	08006bc9 	.word	0x08006bc9
 8006bf4:	08006bc9 	.word	0x08006bc9
 8006bf8:	08006c4d 	.word	0x08006c4d
 8006bfc:	08006bc9 	.word	0x08006bc9
 8006c00:	08006bc9 	.word	0x08006bc9
 8006c04:	08006bc9 	.word	0x08006bc9
 8006c08:	08006bc9 	.word	0x08006bc9
 8006c0c:	08006d4f 	.word	0x08006d4f
 8006c10:	08006c77 	.word	0x08006c77
 8006c14:	08006d09 	.word	0x08006d09
 8006c18:	08006bc9 	.word	0x08006bc9
 8006c1c:	08006bc9 	.word	0x08006bc9
 8006c20:	08006d71 	.word	0x08006d71
 8006c24:	08006bc9 	.word	0x08006bc9
 8006c28:	08006c77 	.word	0x08006c77
 8006c2c:	08006bc9 	.word	0x08006bc9
 8006c30:	08006bc9 	.word	0x08006bc9
 8006c34:	08006d11 	.word	0x08006d11
 8006c38:	6833      	ldr	r3, [r6, #0]
 8006c3a:	1d1a      	adds	r2, r3, #4
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	6032      	str	r2, [r6, #0]
 8006c40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e09e      	b.n	8006d8a <_printf_i+0x1ea>
 8006c4c:	6833      	ldr	r3, [r6, #0]
 8006c4e:	6820      	ldr	r0, [r4, #0]
 8006c50:	1d19      	adds	r1, r3, #4
 8006c52:	6031      	str	r1, [r6, #0]
 8006c54:	0606      	lsls	r6, r0, #24
 8006c56:	d501      	bpl.n	8006c5c <_printf_i+0xbc>
 8006c58:	681d      	ldr	r5, [r3, #0]
 8006c5a:	e003      	b.n	8006c64 <_printf_i+0xc4>
 8006c5c:	0645      	lsls	r5, r0, #25
 8006c5e:	d5fb      	bpl.n	8006c58 <_printf_i+0xb8>
 8006c60:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006c64:	2d00      	cmp	r5, #0
 8006c66:	da03      	bge.n	8006c70 <_printf_i+0xd0>
 8006c68:	232d      	movs	r3, #45	@ 0x2d
 8006c6a:	426d      	negs	r5, r5
 8006c6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c70:	230a      	movs	r3, #10
 8006c72:	4859      	ldr	r0, [pc, #356]	@ (8006dd8 <_printf_i+0x238>)
 8006c74:	e011      	b.n	8006c9a <_printf_i+0xfa>
 8006c76:	6821      	ldr	r1, [r4, #0]
 8006c78:	6833      	ldr	r3, [r6, #0]
 8006c7a:	0608      	lsls	r0, r1, #24
 8006c7c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006c80:	d402      	bmi.n	8006c88 <_printf_i+0xe8>
 8006c82:	0649      	lsls	r1, r1, #25
 8006c84:	bf48      	it	mi
 8006c86:	b2ad      	uxthmi	r5, r5
 8006c88:	2f6f      	cmp	r7, #111	@ 0x6f
 8006c8a:	6033      	str	r3, [r6, #0]
 8006c8c:	bf14      	ite	ne
 8006c8e:	230a      	movne	r3, #10
 8006c90:	2308      	moveq	r3, #8
 8006c92:	4851      	ldr	r0, [pc, #324]	@ (8006dd8 <_printf_i+0x238>)
 8006c94:	2100      	movs	r1, #0
 8006c96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006c9a:	6866      	ldr	r6, [r4, #4]
 8006c9c:	2e00      	cmp	r6, #0
 8006c9e:	bfa8      	it	ge
 8006ca0:	6821      	ldrge	r1, [r4, #0]
 8006ca2:	60a6      	str	r6, [r4, #8]
 8006ca4:	bfa4      	itt	ge
 8006ca6:	f021 0104 	bicge.w	r1, r1, #4
 8006caa:	6021      	strge	r1, [r4, #0]
 8006cac:	b90d      	cbnz	r5, 8006cb2 <_printf_i+0x112>
 8006cae:	2e00      	cmp	r6, #0
 8006cb0:	d04b      	beq.n	8006d4a <_printf_i+0x1aa>
 8006cb2:	4616      	mov	r6, r2
 8006cb4:	fbb5 f1f3 	udiv	r1, r5, r3
 8006cb8:	fb03 5711 	mls	r7, r3, r1, r5
 8006cbc:	5dc7      	ldrb	r7, [r0, r7]
 8006cbe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006cc2:	462f      	mov	r7, r5
 8006cc4:	42bb      	cmp	r3, r7
 8006cc6:	460d      	mov	r5, r1
 8006cc8:	d9f4      	bls.n	8006cb4 <_printf_i+0x114>
 8006cca:	2b08      	cmp	r3, #8
 8006ccc:	d10b      	bne.n	8006ce6 <_printf_i+0x146>
 8006cce:	6823      	ldr	r3, [r4, #0]
 8006cd0:	07df      	lsls	r7, r3, #31
 8006cd2:	d508      	bpl.n	8006ce6 <_printf_i+0x146>
 8006cd4:	6923      	ldr	r3, [r4, #16]
 8006cd6:	6861      	ldr	r1, [r4, #4]
 8006cd8:	4299      	cmp	r1, r3
 8006cda:	bfde      	ittt	le
 8006cdc:	2330      	movle	r3, #48	@ 0x30
 8006cde:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006ce2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006ce6:	1b92      	subs	r2, r2, r6
 8006ce8:	6122      	str	r2, [r4, #16]
 8006cea:	464b      	mov	r3, r9
 8006cec:	4621      	mov	r1, r4
 8006cee:	4640      	mov	r0, r8
 8006cf0:	f8cd a000 	str.w	sl, [sp]
 8006cf4:	aa03      	add	r2, sp, #12
 8006cf6:	f7ff fee1 	bl	8006abc <_printf_common>
 8006cfa:	3001      	adds	r0, #1
 8006cfc:	d14a      	bne.n	8006d94 <_printf_i+0x1f4>
 8006cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8006d02:	b004      	add	sp, #16
 8006d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d08:	6823      	ldr	r3, [r4, #0]
 8006d0a:	f043 0320 	orr.w	r3, r3, #32
 8006d0e:	6023      	str	r3, [r4, #0]
 8006d10:	2778      	movs	r7, #120	@ 0x78
 8006d12:	4832      	ldr	r0, [pc, #200]	@ (8006ddc <_printf_i+0x23c>)
 8006d14:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006d18:	6823      	ldr	r3, [r4, #0]
 8006d1a:	6831      	ldr	r1, [r6, #0]
 8006d1c:	061f      	lsls	r7, r3, #24
 8006d1e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006d22:	d402      	bmi.n	8006d2a <_printf_i+0x18a>
 8006d24:	065f      	lsls	r7, r3, #25
 8006d26:	bf48      	it	mi
 8006d28:	b2ad      	uxthmi	r5, r5
 8006d2a:	6031      	str	r1, [r6, #0]
 8006d2c:	07d9      	lsls	r1, r3, #31
 8006d2e:	bf44      	itt	mi
 8006d30:	f043 0320 	orrmi.w	r3, r3, #32
 8006d34:	6023      	strmi	r3, [r4, #0]
 8006d36:	b11d      	cbz	r5, 8006d40 <_printf_i+0x1a0>
 8006d38:	2310      	movs	r3, #16
 8006d3a:	e7ab      	b.n	8006c94 <_printf_i+0xf4>
 8006d3c:	4826      	ldr	r0, [pc, #152]	@ (8006dd8 <_printf_i+0x238>)
 8006d3e:	e7e9      	b.n	8006d14 <_printf_i+0x174>
 8006d40:	6823      	ldr	r3, [r4, #0]
 8006d42:	f023 0320 	bic.w	r3, r3, #32
 8006d46:	6023      	str	r3, [r4, #0]
 8006d48:	e7f6      	b.n	8006d38 <_printf_i+0x198>
 8006d4a:	4616      	mov	r6, r2
 8006d4c:	e7bd      	b.n	8006cca <_printf_i+0x12a>
 8006d4e:	6833      	ldr	r3, [r6, #0]
 8006d50:	6825      	ldr	r5, [r4, #0]
 8006d52:	1d18      	adds	r0, r3, #4
 8006d54:	6961      	ldr	r1, [r4, #20]
 8006d56:	6030      	str	r0, [r6, #0]
 8006d58:	062e      	lsls	r6, r5, #24
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	d501      	bpl.n	8006d62 <_printf_i+0x1c2>
 8006d5e:	6019      	str	r1, [r3, #0]
 8006d60:	e002      	b.n	8006d68 <_printf_i+0x1c8>
 8006d62:	0668      	lsls	r0, r5, #25
 8006d64:	d5fb      	bpl.n	8006d5e <_printf_i+0x1be>
 8006d66:	8019      	strh	r1, [r3, #0]
 8006d68:	2300      	movs	r3, #0
 8006d6a:	4616      	mov	r6, r2
 8006d6c:	6123      	str	r3, [r4, #16]
 8006d6e:	e7bc      	b.n	8006cea <_printf_i+0x14a>
 8006d70:	6833      	ldr	r3, [r6, #0]
 8006d72:	2100      	movs	r1, #0
 8006d74:	1d1a      	adds	r2, r3, #4
 8006d76:	6032      	str	r2, [r6, #0]
 8006d78:	681e      	ldr	r6, [r3, #0]
 8006d7a:	6862      	ldr	r2, [r4, #4]
 8006d7c:	4630      	mov	r0, r6
 8006d7e:	f000 fbe4 	bl	800754a <memchr>
 8006d82:	b108      	cbz	r0, 8006d88 <_printf_i+0x1e8>
 8006d84:	1b80      	subs	r0, r0, r6
 8006d86:	6060      	str	r0, [r4, #4]
 8006d88:	6863      	ldr	r3, [r4, #4]
 8006d8a:	6123      	str	r3, [r4, #16]
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d92:	e7aa      	b.n	8006cea <_printf_i+0x14a>
 8006d94:	4632      	mov	r2, r6
 8006d96:	4649      	mov	r1, r9
 8006d98:	4640      	mov	r0, r8
 8006d9a:	6923      	ldr	r3, [r4, #16]
 8006d9c:	47d0      	blx	sl
 8006d9e:	3001      	adds	r0, #1
 8006da0:	d0ad      	beq.n	8006cfe <_printf_i+0x15e>
 8006da2:	6823      	ldr	r3, [r4, #0]
 8006da4:	079b      	lsls	r3, r3, #30
 8006da6:	d413      	bmi.n	8006dd0 <_printf_i+0x230>
 8006da8:	68e0      	ldr	r0, [r4, #12]
 8006daa:	9b03      	ldr	r3, [sp, #12]
 8006dac:	4298      	cmp	r0, r3
 8006dae:	bfb8      	it	lt
 8006db0:	4618      	movlt	r0, r3
 8006db2:	e7a6      	b.n	8006d02 <_printf_i+0x162>
 8006db4:	2301      	movs	r3, #1
 8006db6:	4632      	mov	r2, r6
 8006db8:	4649      	mov	r1, r9
 8006dba:	4640      	mov	r0, r8
 8006dbc:	47d0      	blx	sl
 8006dbe:	3001      	adds	r0, #1
 8006dc0:	d09d      	beq.n	8006cfe <_printf_i+0x15e>
 8006dc2:	3501      	adds	r5, #1
 8006dc4:	68e3      	ldr	r3, [r4, #12]
 8006dc6:	9903      	ldr	r1, [sp, #12]
 8006dc8:	1a5b      	subs	r3, r3, r1
 8006dca:	42ab      	cmp	r3, r5
 8006dcc:	dcf2      	bgt.n	8006db4 <_printf_i+0x214>
 8006dce:	e7eb      	b.n	8006da8 <_printf_i+0x208>
 8006dd0:	2500      	movs	r5, #0
 8006dd2:	f104 0619 	add.w	r6, r4, #25
 8006dd6:	e7f5      	b.n	8006dc4 <_printf_i+0x224>
 8006dd8:	0800ad24 	.word	0x0800ad24
 8006ddc:	0800ad35 	.word	0x0800ad35

08006de0 <_scanf_float>:
 8006de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006de4:	b087      	sub	sp, #28
 8006de6:	9303      	str	r3, [sp, #12]
 8006de8:	688b      	ldr	r3, [r1, #8]
 8006dea:	4617      	mov	r7, r2
 8006dec:	1e5a      	subs	r2, r3, #1
 8006dee:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006df2:	bf82      	ittt	hi
 8006df4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006df8:	eb03 0b05 	addhi.w	fp, r3, r5
 8006dfc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006e00:	460a      	mov	r2, r1
 8006e02:	f04f 0500 	mov.w	r5, #0
 8006e06:	bf88      	it	hi
 8006e08:	608b      	strhi	r3, [r1, #8]
 8006e0a:	680b      	ldr	r3, [r1, #0]
 8006e0c:	4680      	mov	r8, r0
 8006e0e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006e12:	f842 3b1c 	str.w	r3, [r2], #28
 8006e16:	460c      	mov	r4, r1
 8006e18:	bf98      	it	ls
 8006e1a:	f04f 0b00 	movls.w	fp, #0
 8006e1e:	4616      	mov	r6, r2
 8006e20:	46aa      	mov	sl, r5
 8006e22:	46a9      	mov	r9, r5
 8006e24:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006e28:	9201      	str	r2, [sp, #4]
 8006e2a:	9502      	str	r5, [sp, #8]
 8006e2c:	68a2      	ldr	r2, [r4, #8]
 8006e2e:	b152      	cbz	r2, 8006e46 <_scanf_float+0x66>
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	2b4e      	cmp	r3, #78	@ 0x4e
 8006e36:	d865      	bhi.n	8006f04 <_scanf_float+0x124>
 8006e38:	2b40      	cmp	r3, #64	@ 0x40
 8006e3a:	d83d      	bhi.n	8006eb8 <_scanf_float+0xd8>
 8006e3c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006e40:	b2c8      	uxtb	r0, r1
 8006e42:	280e      	cmp	r0, #14
 8006e44:	d93b      	bls.n	8006ebe <_scanf_float+0xde>
 8006e46:	f1b9 0f00 	cmp.w	r9, #0
 8006e4a:	d003      	beq.n	8006e54 <_scanf_float+0x74>
 8006e4c:	6823      	ldr	r3, [r4, #0]
 8006e4e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e52:	6023      	str	r3, [r4, #0]
 8006e54:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e58:	f1ba 0f01 	cmp.w	sl, #1
 8006e5c:	f200 8118 	bhi.w	8007090 <_scanf_float+0x2b0>
 8006e60:	9b01      	ldr	r3, [sp, #4]
 8006e62:	429e      	cmp	r6, r3
 8006e64:	f200 8109 	bhi.w	800707a <_scanf_float+0x29a>
 8006e68:	2001      	movs	r0, #1
 8006e6a:	b007      	add	sp, #28
 8006e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e70:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006e74:	2a0d      	cmp	r2, #13
 8006e76:	d8e6      	bhi.n	8006e46 <_scanf_float+0x66>
 8006e78:	a101      	add	r1, pc, #4	@ (adr r1, 8006e80 <_scanf_float+0xa0>)
 8006e7a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006e7e:	bf00      	nop
 8006e80:	08006fc7 	.word	0x08006fc7
 8006e84:	08006e47 	.word	0x08006e47
 8006e88:	08006e47 	.word	0x08006e47
 8006e8c:	08006e47 	.word	0x08006e47
 8006e90:	08007027 	.word	0x08007027
 8006e94:	08006fff 	.word	0x08006fff
 8006e98:	08006e47 	.word	0x08006e47
 8006e9c:	08006e47 	.word	0x08006e47
 8006ea0:	08006fd5 	.word	0x08006fd5
 8006ea4:	08006e47 	.word	0x08006e47
 8006ea8:	08006e47 	.word	0x08006e47
 8006eac:	08006e47 	.word	0x08006e47
 8006eb0:	08006e47 	.word	0x08006e47
 8006eb4:	08006f8d 	.word	0x08006f8d
 8006eb8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006ebc:	e7da      	b.n	8006e74 <_scanf_float+0x94>
 8006ebe:	290e      	cmp	r1, #14
 8006ec0:	d8c1      	bhi.n	8006e46 <_scanf_float+0x66>
 8006ec2:	a001      	add	r0, pc, #4	@ (adr r0, 8006ec8 <_scanf_float+0xe8>)
 8006ec4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006ec8:	08006f7d 	.word	0x08006f7d
 8006ecc:	08006e47 	.word	0x08006e47
 8006ed0:	08006f7d 	.word	0x08006f7d
 8006ed4:	08007013 	.word	0x08007013
 8006ed8:	08006e47 	.word	0x08006e47
 8006edc:	08006f25 	.word	0x08006f25
 8006ee0:	08006f63 	.word	0x08006f63
 8006ee4:	08006f63 	.word	0x08006f63
 8006ee8:	08006f63 	.word	0x08006f63
 8006eec:	08006f63 	.word	0x08006f63
 8006ef0:	08006f63 	.word	0x08006f63
 8006ef4:	08006f63 	.word	0x08006f63
 8006ef8:	08006f63 	.word	0x08006f63
 8006efc:	08006f63 	.word	0x08006f63
 8006f00:	08006f63 	.word	0x08006f63
 8006f04:	2b6e      	cmp	r3, #110	@ 0x6e
 8006f06:	d809      	bhi.n	8006f1c <_scanf_float+0x13c>
 8006f08:	2b60      	cmp	r3, #96	@ 0x60
 8006f0a:	d8b1      	bhi.n	8006e70 <_scanf_float+0x90>
 8006f0c:	2b54      	cmp	r3, #84	@ 0x54
 8006f0e:	d07b      	beq.n	8007008 <_scanf_float+0x228>
 8006f10:	2b59      	cmp	r3, #89	@ 0x59
 8006f12:	d198      	bne.n	8006e46 <_scanf_float+0x66>
 8006f14:	2d07      	cmp	r5, #7
 8006f16:	d196      	bne.n	8006e46 <_scanf_float+0x66>
 8006f18:	2508      	movs	r5, #8
 8006f1a:	e02c      	b.n	8006f76 <_scanf_float+0x196>
 8006f1c:	2b74      	cmp	r3, #116	@ 0x74
 8006f1e:	d073      	beq.n	8007008 <_scanf_float+0x228>
 8006f20:	2b79      	cmp	r3, #121	@ 0x79
 8006f22:	e7f6      	b.n	8006f12 <_scanf_float+0x132>
 8006f24:	6821      	ldr	r1, [r4, #0]
 8006f26:	05c8      	lsls	r0, r1, #23
 8006f28:	d51b      	bpl.n	8006f62 <_scanf_float+0x182>
 8006f2a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006f2e:	6021      	str	r1, [r4, #0]
 8006f30:	f109 0901 	add.w	r9, r9, #1
 8006f34:	f1bb 0f00 	cmp.w	fp, #0
 8006f38:	d003      	beq.n	8006f42 <_scanf_float+0x162>
 8006f3a:	3201      	adds	r2, #1
 8006f3c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006f40:	60a2      	str	r2, [r4, #8]
 8006f42:	68a3      	ldr	r3, [r4, #8]
 8006f44:	3b01      	subs	r3, #1
 8006f46:	60a3      	str	r3, [r4, #8]
 8006f48:	6923      	ldr	r3, [r4, #16]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	6123      	str	r3, [r4, #16]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	3b01      	subs	r3, #1
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	607b      	str	r3, [r7, #4]
 8006f56:	f340 8087 	ble.w	8007068 <_scanf_float+0x288>
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	603b      	str	r3, [r7, #0]
 8006f60:	e764      	b.n	8006e2c <_scanf_float+0x4c>
 8006f62:	eb1a 0105 	adds.w	r1, sl, r5
 8006f66:	f47f af6e 	bne.w	8006e46 <_scanf_float+0x66>
 8006f6a:	460d      	mov	r5, r1
 8006f6c:	468a      	mov	sl, r1
 8006f6e:	6822      	ldr	r2, [r4, #0]
 8006f70:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006f74:	6022      	str	r2, [r4, #0]
 8006f76:	f806 3b01 	strb.w	r3, [r6], #1
 8006f7a:	e7e2      	b.n	8006f42 <_scanf_float+0x162>
 8006f7c:	6822      	ldr	r2, [r4, #0]
 8006f7e:	0610      	lsls	r0, r2, #24
 8006f80:	f57f af61 	bpl.w	8006e46 <_scanf_float+0x66>
 8006f84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006f88:	6022      	str	r2, [r4, #0]
 8006f8a:	e7f4      	b.n	8006f76 <_scanf_float+0x196>
 8006f8c:	f1ba 0f00 	cmp.w	sl, #0
 8006f90:	d10e      	bne.n	8006fb0 <_scanf_float+0x1d0>
 8006f92:	f1b9 0f00 	cmp.w	r9, #0
 8006f96:	d10e      	bne.n	8006fb6 <_scanf_float+0x1d6>
 8006f98:	6822      	ldr	r2, [r4, #0]
 8006f9a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006f9e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006fa2:	d108      	bne.n	8006fb6 <_scanf_float+0x1d6>
 8006fa4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006fa8:	f04f 0a01 	mov.w	sl, #1
 8006fac:	6022      	str	r2, [r4, #0]
 8006fae:	e7e2      	b.n	8006f76 <_scanf_float+0x196>
 8006fb0:	f1ba 0f02 	cmp.w	sl, #2
 8006fb4:	d055      	beq.n	8007062 <_scanf_float+0x282>
 8006fb6:	2d01      	cmp	r5, #1
 8006fb8:	d002      	beq.n	8006fc0 <_scanf_float+0x1e0>
 8006fba:	2d04      	cmp	r5, #4
 8006fbc:	f47f af43 	bne.w	8006e46 <_scanf_float+0x66>
 8006fc0:	3501      	adds	r5, #1
 8006fc2:	b2ed      	uxtb	r5, r5
 8006fc4:	e7d7      	b.n	8006f76 <_scanf_float+0x196>
 8006fc6:	f1ba 0f01 	cmp.w	sl, #1
 8006fca:	f47f af3c 	bne.w	8006e46 <_scanf_float+0x66>
 8006fce:	f04f 0a02 	mov.w	sl, #2
 8006fd2:	e7d0      	b.n	8006f76 <_scanf_float+0x196>
 8006fd4:	b97d      	cbnz	r5, 8006ff6 <_scanf_float+0x216>
 8006fd6:	f1b9 0f00 	cmp.w	r9, #0
 8006fda:	f47f af37 	bne.w	8006e4c <_scanf_float+0x6c>
 8006fde:	6822      	ldr	r2, [r4, #0]
 8006fe0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006fe4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006fe8:	f040 8103 	bne.w	80071f2 <_scanf_float+0x412>
 8006fec:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006ff0:	2501      	movs	r5, #1
 8006ff2:	6022      	str	r2, [r4, #0]
 8006ff4:	e7bf      	b.n	8006f76 <_scanf_float+0x196>
 8006ff6:	2d03      	cmp	r5, #3
 8006ff8:	d0e2      	beq.n	8006fc0 <_scanf_float+0x1e0>
 8006ffa:	2d05      	cmp	r5, #5
 8006ffc:	e7de      	b.n	8006fbc <_scanf_float+0x1dc>
 8006ffe:	2d02      	cmp	r5, #2
 8007000:	f47f af21 	bne.w	8006e46 <_scanf_float+0x66>
 8007004:	2503      	movs	r5, #3
 8007006:	e7b6      	b.n	8006f76 <_scanf_float+0x196>
 8007008:	2d06      	cmp	r5, #6
 800700a:	f47f af1c 	bne.w	8006e46 <_scanf_float+0x66>
 800700e:	2507      	movs	r5, #7
 8007010:	e7b1      	b.n	8006f76 <_scanf_float+0x196>
 8007012:	6822      	ldr	r2, [r4, #0]
 8007014:	0591      	lsls	r1, r2, #22
 8007016:	f57f af16 	bpl.w	8006e46 <_scanf_float+0x66>
 800701a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800701e:	6022      	str	r2, [r4, #0]
 8007020:	f8cd 9008 	str.w	r9, [sp, #8]
 8007024:	e7a7      	b.n	8006f76 <_scanf_float+0x196>
 8007026:	6822      	ldr	r2, [r4, #0]
 8007028:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800702c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007030:	d006      	beq.n	8007040 <_scanf_float+0x260>
 8007032:	0550      	lsls	r0, r2, #21
 8007034:	f57f af07 	bpl.w	8006e46 <_scanf_float+0x66>
 8007038:	f1b9 0f00 	cmp.w	r9, #0
 800703c:	f000 80d9 	beq.w	80071f2 <_scanf_float+0x412>
 8007040:	0591      	lsls	r1, r2, #22
 8007042:	bf58      	it	pl
 8007044:	9902      	ldrpl	r1, [sp, #8]
 8007046:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800704a:	bf58      	it	pl
 800704c:	eba9 0101 	subpl.w	r1, r9, r1
 8007050:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007054:	f04f 0900 	mov.w	r9, #0
 8007058:	bf58      	it	pl
 800705a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800705e:	6022      	str	r2, [r4, #0]
 8007060:	e789      	b.n	8006f76 <_scanf_float+0x196>
 8007062:	f04f 0a03 	mov.w	sl, #3
 8007066:	e786      	b.n	8006f76 <_scanf_float+0x196>
 8007068:	4639      	mov	r1, r7
 800706a:	4640      	mov	r0, r8
 800706c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007070:	4798      	blx	r3
 8007072:	2800      	cmp	r0, #0
 8007074:	f43f aeda 	beq.w	8006e2c <_scanf_float+0x4c>
 8007078:	e6e5      	b.n	8006e46 <_scanf_float+0x66>
 800707a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800707e:	463a      	mov	r2, r7
 8007080:	4640      	mov	r0, r8
 8007082:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007086:	4798      	blx	r3
 8007088:	6923      	ldr	r3, [r4, #16]
 800708a:	3b01      	subs	r3, #1
 800708c:	6123      	str	r3, [r4, #16]
 800708e:	e6e7      	b.n	8006e60 <_scanf_float+0x80>
 8007090:	1e6b      	subs	r3, r5, #1
 8007092:	2b06      	cmp	r3, #6
 8007094:	d824      	bhi.n	80070e0 <_scanf_float+0x300>
 8007096:	2d02      	cmp	r5, #2
 8007098:	d836      	bhi.n	8007108 <_scanf_float+0x328>
 800709a:	9b01      	ldr	r3, [sp, #4]
 800709c:	429e      	cmp	r6, r3
 800709e:	f67f aee3 	bls.w	8006e68 <_scanf_float+0x88>
 80070a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80070a6:	463a      	mov	r2, r7
 80070a8:	4640      	mov	r0, r8
 80070aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80070ae:	4798      	blx	r3
 80070b0:	6923      	ldr	r3, [r4, #16]
 80070b2:	3b01      	subs	r3, #1
 80070b4:	6123      	str	r3, [r4, #16]
 80070b6:	e7f0      	b.n	800709a <_scanf_float+0x2ba>
 80070b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80070bc:	463a      	mov	r2, r7
 80070be:	4640      	mov	r0, r8
 80070c0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80070c4:	4798      	blx	r3
 80070c6:	6923      	ldr	r3, [r4, #16]
 80070c8:	3b01      	subs	r3, #1
 80070ca:	6123      	str	r3, [r4, #16]
 80070cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80070d0:	fa5f fa8a 	uxtb.w	sl, sl
 80070d4:	f1ba 0f02 	cmp.w	sl, #2
 80070d8:	d1ee      	bne.n	80070b8 <_scanf_float+0x2d8>
 80070da:	3d03      	subs	r5, #3
 80070dc:	b2ed      	uxtb	r5, r5
 80070de:	1b76      	subs	r6, r6, r5
 80070e0:	6823      	ldr	r3, [r4, #0]
 80070e2:	05da      	lsls	r2, r3, #23
 80070e4:	d530      	bpl.n	8007148 <_scanf_float+0x368>
 80070e6:	055b      	lsls	r3, r3, #21
 80070e8:	d511      	bpl.n	800710e <_scanf_float+0x32e>
 80070ea:	9b01      	ldr	r3, [sp, #4]
 80070ec:	429e      	cmp	r6, r3
 80070ee:	f67f aebb 	bls.w	8006e68 <_scanf_float+0x88>
 80070f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80070f6:	463a      	mov	r2, r7
 80070f8:	4640      	mov	r0, r8
 80070fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80070fe:	4798      	blx	r3
 8007100:	6923      	ldr	r3, [r4, #16]
 8007102:	3b01      	subs	r3, #1
 8007104:	6123      	str	r3, [r4, #16]
 8007106:	e7f0      	b.n	80070ea <_scanf_float+0x30a>
 8007108:	46aa      	mov	sl, r5
 800710a:	46b3      	mov	fp, r6
 800710c:	e7de      	b.n	80070cc <_scanf_float+0x2ec>
 800710e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007112:	6923      	ldr	r3, [r4, #16]
 8007114:	2965      	cmp	r1, #101	@ 0x65
 8007116:	f103 33ff 	add.w	r3, r3, #4294967295
 800711a:	f106 35ff 	add.w	r5, r6, #4294967295
 800711e:	6123      	str	r3, [r4, #16]
 8007120:	d00c      	beq.n	800713c <_scanf_float+0x35c>
 8007122:	2945      	cmp	r1, #69	@ 0x45
 8007124:	d00a      	beq.n	800713c <_scanf_float+0x35c>
 8007126:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800712a:	463a      	mov	r2, r7
 800712c:	4640      	mov	r0, r8
 800712e:	4798      	blx	r3
 8007130:	6923      	ldr	r3, [r4, #16]
 8007132:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007136:	3b01      	subs	r3, #1
 8007138:	1eb5      	subs	r5, r6, #2
 800713a:	6123      	str	r3, [r4, #16]
 800713c:	463a      	mov	r2, r7
 800713e:	4640      	mov	r0, r8
 8007140:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007144:	4798      	blx	r3
 8007146:	462e      	mov	r6, r5
 8007148:	6822      	ldr	r2, [r4, #0]
 800714a:	f012 0210 	ands.w	r2, r2, #16
 800714e:	d001      	beq.n	8007154 <_scanf_float+0x374>
 8007150:	2000      	movs	r0, #0
 8007152:	e68a      	b.n	8006e6a <_scanf_float+0x8a>
 8007154:	7032      	strb	r2, [r6, #0]
 8007156:	6823      	ldr	r3, [r4, #0]
 8007158:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800715c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007160:	d11c      	bne.n	800719c <_scanf_float+0x3bc>
 8007162:	9b02      	ldr	r3, [sp, #8]
 8007164:	454b      	cmp	r3, r9
 8007166:	eba3 0209 	sub.w	r2, r3, r9
 800716a:	d123      	bne.n	80071b4 <_scanf_float+0x3d4>
 800716c:	2200      	movs	r2, #0
 800716e:	4640      	mov	r0, r8
 8007170:	9901      	ldr	r1, [sp, #4]
 8007172:	f002 fbed 	bl	8009950 <_strtod_r>
 8007176:	9b03      	ldr	r3, [sp, #12]
 8007178:	6825      	ldr	r5, [r4, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f015 0f02 	tst.w	r5, #2
 8007180:	4606      	mov	r6, r0
 8007182:	460f      	mov	r7, r1
 8007184:	f103 0204 	add.w	r2, r3, #4
 8007188:	d01f      	beq.n	80071ca <_scanf_float+0x3ea>
 800718a:	9903      	ldr	r1, [sp, #12]
 800718c:	600a      	str	r2, [r1, #0]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	e9c3 6700 	strd	r6, r7, [r3]
 8007194:	68e3      	ldr	r3, [r4, #12]
 8007196:	3301      	adds	r3, #1
 8007198:	60e3      	str	r3, [r4, #12]
 800719a:	e7d9      	b.n	8007150 <_scanf_float+0x370>
 800719c:	9b04      	ldr	r3, [sp, #16]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d0e4      	beq.n	800716c <_scanf_float+0x38c>
 80071a2:	9905      	ldr	r1, [sp, #20]
 80071a4:	230a      	movs	r3, #10
 80071a6:	4640      	mov	r0, r8
 80071a8:	3101      	adds	r1, #1
 80071aa:	f002 fc51 	bl	8009a50 <_strtol_r>
 80071ae:	9b04      	ldr	r3, [sp, #16]
 80071b0:	9e05      	ldr	r6, [sp, #20]
 80071b2:	1ac2      	subs	r2, r0, r3
 80071b4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80071b8:	429e      	cmp	r6, r3
 80071ba:	bf28      	it	cs
 80071bc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80071c0:	4630      	mov	r0, r6
 80071c2:	490d      	ldr	r1, [pc, #52]	@ (80071f8 <_scanf_float+0x418>)
 80071c4:	f000 f8de 	bl	8007384 <siprintf>
 80071c8:	e7d0      	b.n	800716c <_scanf_float+0x38c>
 80071ca:	076d      	lsls	r5, r5, #29
 80071cc:	d4dd      	bmi.n	800718a <_scanf_float+0x3aa>
 80071ce:	9d03      	ldr	r5, [sp, #12]
 80071d0:	602a      	str	r2, [r5, #0]
 80071d2:	681d      	ldr	r5, [r3, #0]
 80071d4:	4602      	mov	r2, r0
 80071d6:	460b      	mov	r3, r1
 80071d8:	f7f9 fc22 	bl	8000a20 <__aeabi_dcmpun>
 80071dc:	b120      	cbz	r0, 80071e8 <_scanf_float+0x408>
 80071de:	4807      	ldr	r0, [pc, #28]	@ (80071fc <_scanf_float+0x41c>)
 80071e0:	f000 f9c2 	bl	8007568 <nanf>
 80071e4:	6028      	str	r0, [r5, #0]
 80071e6:	e7d5      	b.n	8007194 <_scanf_float+0x3b4>
 80071e8:	4630      	mov	r0, r6
 80071ea:	4639      	mov	r1, r7
 80071ec:	f7f9 fc76 	bl	8000adc <__aeabi_d2f>
 80071f0:	e7f8      	b.n	80071e4 <_scanf_float+0x404>
 80071f2:	f04f 0900 	mov.w	r9, #0
 80071f6:	e62d      	b.n	8006e54 <_scanf_float+0x74>
 80071f8:	0800ad46 	.word	0x0800ad46
 80071fc:	0800b0dd 	.word	0x0800b0dd

08007200 <std>:
 8007200:	2300      	movs	r3, #0
 8007202:	b510      	push	{r4, lr}
 8007204:	4604      	mov	r4, r0
 8007206:	e9c0 3300 	strd	r3, r3, [r0]
 800720a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800720e:	6083      	str	r3, [r0, #8]
 8007210:	8181      	strh	r1, [r0, #12]
 8007212:	6643      	str	r3, [r0, #100]	@ 0x64
 8007214:	81c2      	strh	r2, [r0, #14]
 8007216:	6183      	str	r3, [r0, #24]
 8007218:	4619      	mov	r1, r3
 800721a:	2208      	movs	r2, #8
 800721c:	305c      	adds	r0, #92	@ 0x5c
 800721e:	f000 f914 	bl	800744a <memset>
 8007222:	4b0d      	ldr	r3, [pc, #52]	@ (8007258 <std+0x58>)
 8007224:	6224      	str	r4, [r4, #32]
 8007226:	6263      	str	r3, [r4, #36]	@ 0x24
 8007228:	4b0c      	ldr	r3, [pc, #48]	@ (800725c <std+0x5c>)
 800722a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800722c:	4b0c      	ldr	r3, [pc, #48]	@ (8007260 <std+0x60>)
 800722e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007230:	4b0c      	ldr	r3, [pc, #48]	@ (8007264 <std+0x64>)
 8007232:	6323      	str	r3, [r4, #48]	@ 0x30
 8007234:	4b0c      	ldr	r3, [pc, #48]	@ (8007268 <std+0x68>)
 8007236:	429c      	cmp	r4, r3
 8007238:	d006      	beq.n	8007248 <std+0x48>
 800723a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800723e:	4294      	cmp	r4, r2
 8007240:	d002      	beq.n	8007248 <std+0x48>
 8007242:	33d0      	adds	r3, #208	@ 0xd0
 8007244:	429c      	cmp	r4, r3
 8007246:	d105      	bne.n	8007254 <std+0x54>
 8007248:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800724c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007250:	f000 b978 	b.w	8007544 <__retarget_lock_init_recursive>
 8007254:	bd10      	pop	{r4, pc}
 8007256:	bf00      	nop
 8007258:	080073c5 	.word	0x080073c5
 800725c:	080073e7 	.word	0x080073e7
 8007260:	0800741f 	.word	0x0800741f
 8007264:	08007443 	.word	0x08007443
 8007268:	2000046c 	.word	0x2000046c

0800726c <stdio_exit_handler>:
 800726c:	4a02      	ldr	r2, [pc, #8]	@ (8007278 <stdio_exit_handler+0xc>)
 800726e:	4903      	ldr	r1, [pc, #12]	@ (800727c <stdio_exit_handler+0x10>)
 8007270:	4803      	ldr	r0, [pc, #12]	@ (8007280 <stdio_exit_handler+0x14>)
 8007272:	f000 b869 	b.w	8007348 <_fwalk_sglue>
 8007276:	bf00      	nop
 8007278:	2000000c 	.word	0x2000000c
 800727c:	08009e05 	.word	0x08009e05
 8007280:	2000001c 	.word	0x2000001c

08007284 <cleanup_stdio>:
 8007284:	6841      	ldr	r1, [r0, #4]
 8007286:	4b0c      	ldr	r3, [pc, #48]	@ (80072b8 <cleanup_stdio+0x34>)
 8007288:	b510      	push	{r4, lr}
 800728a:	4299      	cmp	r1, r3
 800728c:	4604      	mov	r4, r0
 800728e:	d001      	beq.n	8007294 <cleanup_stdio+0x10>
 8007290:	f002 fdb8 	bl	8009e04 <_fflush_r>
 8007294:	68a1      	ldr	r1, [r4, #8]
 8007296:	4b09      	ldr	r3, [pc, #36]	@ (80072bc <cleanup_stdio+0x38>)
 8007298:	4299      	cmp	r1, r3
 800729a:	d002      	beq.n	80072a2 <cleanup_stdio+0x1e>
 800729c:	4620      	mov	r0, r4
 800729e:	f002 fdb1 	bl	8009e04 <_fflush_r>
 80072a2:	68e1      	ldr	r1, [r4, #12]
 80072a4:	4b06      	ldr	r3, [pc, #24]	@ (80072c0 <cleanup_stdio+0x3c>)
 80072a6:	4299      	cmp	r1, r3
 80072a8:	d004      	beq.n	80072b4 <cleanup_stdio+0x30>
 80072aa:	4620      	mov	r0, r4
 80072ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072b0:	f002 bda8 	b.w	8009e04 <_fflush_r>
 80072b4:	bd10      	pop	{r4, pc}
 80072b6:	bf00      	nop
 80072b8:	2000046c 	.word	0x2000046c
 80072bc:	200004d4 	.word	0x200004d4
 80072c0:	2000053c 	.word	0x2000053c

080072c4 <global_stdio_init.part.0>:
 80072c4:	b510      	push	{r4, lr}
 80072c6:	4b0b      	ldr	r3, [pc, #44]	@ (80072f4 <global_stdio_init.part.0+0x30>)
 80072c8:	4c0b      	ldr	r4, [pc, #44]	@ (80072f8 <global_stdio_init.part.0+0x34>)
 80072ca:	4a0c      	ldr	r2, [pc, #48]	@ (80072fc <global_stdio_init.part.0+0x38>)
 80072cc:	4620      	mov	r0, r4
 80072ce:	601a      	str	r2, [r3, #0]
 80072d0:	2104      	movs	r1, #4
 80072d2:	2200      	movs	r2, #0
 80072d4:	f7ff ff94 	bl	8007200 <std>
 80072d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80072dc:	2201      	movs	r2, #1
 80072de:	2109      	movs	r1, #9
 80072e0:	f7ff ff8e 	bl	8007200 <std>
 80072e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80072e8:	2202      	movs	r2, #2
 80072ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072ee:	2112      	movs	r1, #18
 80072f0:	f7ff bf86 	b.w	8007200 <std>
 80072f4:	200005a4 	.word	0x200005a4
 80072f8:	2000046c 	.word	0x2000046c
 80072fc:	0800726d 	.word	0x0800726d

08007300 <__sfp_lock_acquire>:
 8007300:	4801      	ldr	r0, [pc, #4]	@ (8007308 <__sfp_lock_acquire+0x8>)
 8007302:	f000 b920 	b.w	8007546 <__retarget_lock_acquire_recursive>
 8007306:	bf00      	nop
 8007308:	200005ad 	.word	0x200005ad

0800730c <__sfp_lock_release>:
 800730c:	4801      	ldr	r0, [pc, #4]	@ (8007314 <__sfp_lock_release+0x8>)
 800730e:	f000 b91b 	b.w	8007548 <__retarget_lock_release_recursive>
 8007312:	bf00      	nop
 8007314:	200005ad 	.word	0x200005ad

08007318 <__sinit>:
 8007318:	b510      	push	{r4, lr}
 800731a:	4604      	mov	r4, r0
 800731c:	f7ff fff0 	bl	8007300 <__sfp_lock_acquire>
 8007320:	6a23      	ldr	r3, [r4, #32]
 8007322:	b11b      	cbz	r3, 800732c <__sinit+0x14>
 8007324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007328:	f7ff bff0 	b.w	800730c <__sfp_lock_release>
 800732c:	4b04      	ldr	r3, [pc, #16]	@ (8007340 <__sinit+0x28>)
 800732e:	6223      	str	r3, [r4, #32]
 8007330:	4b04      	ldr	r3, [pc, #16]	@ (8007344 <__sinit+0x2c>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d1f5      	bne.n	8007324 <__sinit+0xc>
 8007338:	f7ff ffc4 	bl	80072c4 <global_stdio_init.part.0>
 800733c:	e7f2      	b.n	8007324 <__sinit+0xc>
 800733e:	bf00      	nop
 8007340:	08007285 	.word	0x08007285
 8007344:	200005a4 	.word	0x200005a4

08007348 <_fwalk_sglue>:
 8007348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800734c:	4607      	mov	r7, r0
 800734e:	4688      	mov	r8, r1
 8007350:	4614      	mov	r4, r2
 8007352:	2600      	movs	r6, #0
 8007354:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007358:	f1b9 0901 	subs.w	r9, r9, #1
 800735c:	d505      	bpl.n	800736a <_fwalk_sglue+0x22>
 800735e:	6824      	ldr	r4, [r4, #0]
 8007360:	2c00      	cmp	r4, #0
 8007362:	d1f7      	bne.n	8007354 <_fwalk_sglue+0xc>
 8007364:	4630      	mov	r0, r6
 8007366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800736a:	89ab      	ldrh	r3, [r5, #12]
 800736c:	2b01      	cmp	r3, #1
 800736e:	d907      	bls.n	8007380 <_fwalk_sglue+0x38>
 8007370:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007374:	3301      	adds	r3, #1
 8007376:	d003      	beq.n	8007380 <_fwalk_sglue+0x38>
 8007378:	4629      	mov	r1, r5
 800737a:	4638      	mov	r0, r7
 800737c:	47c0      	blx	r8
 800737e:	4306      	orrs	r6, r0
 8007380:	3568      	adds	r5, #104	@ 0x68
 8007382:	e7e9      	b.n	8007358 <_fwalk_sglue+0x10>

08007384 <siprintf>:
 8007384:	b40e      	push	{r1, r2, r3}
 8007386:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800738a:	b500      	push	{lr}
 800738c:	b09c      	sub	sp, #112	@ 0x70
 800738e:	ab1d      	add	r3, sp, #116	@ 0x74
 8007390:	9002      	str	r0, [sp, #8]
 8007392:	9006      	str	r0, [sp, #24]
 8007394:	9107      	str	r1, [sp, #28]
 8007396:	9104      	str	r1, [sp, #16]
 8007398:	4808      	ldr	r0, [pc, #32]	@ (80073bc <siprintf+0x38>)
 800739a:	4909      	ldr	r1, [pc, #36]	@ (80073c0 <siprintf+0x3c>)
 800739c:	f853 2b04 	ldr.w	r2, [r3], #4
 80073a0:	9105      	str	r1, [sp, #20]
 80073a2:	6800      	ldr	r0, [r0, #0]
 80073a4:	a902      	add	r1, sp, #8
 80073a6:	9301      	str	r3, [sp, #4]
 80073a8:	f002 fbb0 	bl	8009b0c <_svfiprintf_r>
 80073ac:	2200      	movs	r2, #0
 80073ae:	9b02      	ldr	r3, [sp, #8]
 80073b0:	701a      	strb	r2, [r3, #0]
 80073b2:	b01c      	add	sp, #112	@ 0x70
 80073b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80073b8:	b003      	add	sp, #12
 80073ba:	4770      	bx	lr
 80073bc:	20000018 	.word	0x20000018
 80073c0:	ffff0208 	.word	0xffff0208

080073c4 <__sread>:
 80073c4:	b510      	push	{r4, lr}
 80073c6:	460c      	mov	r4, r1
 80073c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073cc:	f000 f86c 	bl	80074a8 <_read_r>
 80073d0:	2800      	cmp	r0, #0
 80073d2:	bfab      	itete	ge
 80073d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80073d6:	89a3      	ldrhlt	r3, [r4, #12]
 80073d8:	181b      	addge	r3, r3, r0
 80073da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80073de:	bfac      	ite	ge
 80073e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80073e2:	81a3      	strhlt	r3, [r4, #12]
 80073e4:	bd10      	pop	{r4, pc}

080073e6 <__swrite>:
 80073e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073ea:	461f      	mov	r7, r3
 80073ec:	898b      	ldrh	r3, [r1, #12]
 80073ee:	4605      	mov	r5, r0
 80073f0:	05db      	lsls	r3, r3, #23
 80073f2:	460c      	mov	r4, r1
 80073f4:	4616      	mov	r6, r2
 80073f6:	d505      	bpl.n	8007404 <__swrite+0x1e>
 80073f8:	2302      	movs	r3, #2
 80073fa:	2200      	movs	r2, #0
 80073fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007400:	f000 f840 	bl	8007484 <_lseek_r>
 8007404:	89a3      	ldrh	r3, [r4, #12]
 8007406:	4632      	mov	r2, r6
 8007408:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800740c:	81a3      	strh	r3, [r4, #12]
 800740e:	4628      	mov	r0, r5
 8007410:	463b      	mov	r3, r7
 8007412:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007416:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800741a:	f000 b857 	b.w	80074cc <_write_r>

0800741e <__sseek>:
 800741e:	b510      	push	{r4, lr}
 8007420:	460c      	mov	r4, r1
 8007422:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007426:	f000 f82d 	bl	8007484 <_lseek_r>
 800742a:	1c43      	adds	r3, r0, #1
 800742c:	89a3      	ldrh	r3, [r4, #12]
 800742e:	bf15      	itete	ne
 8007430:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007432:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007436:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800743a:	81a3      	strheq	r3, [r4, #12]
 800743c:	bf18      	it	ne
 800743e:	81a3      	strhne	r3, [r4, #12]
 8007440:	bd10      	pop	{r4, pc}

08007442 <__sclose>:
 8007442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007446:	f000 b80d 	b.w	8007464 <_close_r>

0800744a <memset>:
 800744a:	4603      	mov	r3, r0
 800744c:	4402      	add	r2, r0
 800744e:	4293      	cmp	r3, r2
 8007450:	d100      	bne.n	8007454 <memset+0xa>
 8007452:	4770      	bx	lr
 8007454:	f803 1b01 	strb.w	r1, [r3], #1
 8007458:	e7f9      	b.n	800744e <memset+0x4>
	...

0800745c <_localeconv_r>:
 800745c:	4800      	ldr	r0, [pc, #0]	@ (8007460 <_localeconv_r+0x4>)
 800745e:	4770      	bx	lr
 8007460:	20000158 	.word	0x20000158

08007464 <_close_r>:
 8007464:	b538      	push	{r3, r4, r5, lr}
 8007466:	2300      	movs	r3, #0
 8007468:	4d05      	ldr	r5, [pc, #20]	@ (8007480 <_close_r+0x1c>)
 800746a:	4604      	mov	r4, r0
 800746c:	4608      	mov	r0, r1
 800746e:	602b      	str	r3, [r5, #0]
 8007470:	f7fb f83f 	bl	80024f2 <_close>
 8007474:	1c43      	adds	r3, r0, #1
 8007476:	d102      	bne.n	800747e <_close_r+0x1a>
 8007478:	682b      	ldr	r3, [r5, #0]
 800747a:	b103      	cbz	r3, 800747e <_close_r+0x1a>
 800747c:	6023      	str	r3, [r4, #0]
 800747e:	bd38      	pop	{r3, r4, r5, pc}
 8007480:	200005a8 	.word	0x200005a8

08007484 <_lseek_r>:
 8007484:	b538      	push	{r3, r4, r5, lr}
 8007486:	4604      	mov	r4, r0
 8007488:	4608      	mov	r0, r1
 800748a:	4611      	mov	r1, r2
 800748c:	2200      	movs	r2, #0
 800748e:	4d05      	ldr	r5, [pc, #20]	@ (80074a4 <_lseek_r+0x20>)
 8007490:	602a      	str	r2, [r5, #0]
 8007492:	461a      	mov	r2, r3
 8007494:	f7fb f851 	bl	800253a <_lseek>
 8007498:	1c43      	adds	r3, r0, #1
 800749a:	d102      	bne.n	80074a2 <_lseek_r+0x1e>
 800749c:	682b      	ldr	r3, [r5, #0]
 800749e:	b103      	cbz	r3, 80074a2 <_lseek_r+0x1e>
 80074a0:	6023      	str	r3, [r4, #0]
 80074a2:	bd38      	pop	{r3, r4, r5, pc}
 80074a4:	200005a8 	.word	0x200005a8

080074a8 <_read_r>:
 80074a8:	b538      	push	{r3, r4, r5, lr}
 80074aa:	4604      	mov	r4, r0
 80074ac:	4608      	mov	r0, r1
 80074ae:	4611      	mov	r1, r2
 80074b0:	2200      	movs	r2, #0
 80074b2:	4d05      	ldr	r5, [pc, #20]	@ (80074c8 <_read_r+0x20>)
 80074b4:	602a      	str	r2, [r5, #0]
 80074b6:	461a      	mov	r2, r3
 80074b8:	f7fa ffe2 	bl	8002480 <_read>
 80074bc:	1c43      	adds	r3, r0, #1
 80074be:	d102      	bne.n	80074c6 <_read_r+0x1e>
 80074c0:	682b      	ldr	r3, [r5, #0]
 80074c2:	b103      	cbz	r3, 80074c6 <_read_r+0x1e>
 80074c4:	6023      	str	r3, [r4, #0]
 80074c6:	bd38      	pop	{r3, r4, r5, pc}
 80074c8:	200005a8 	.word	0x200005a8

080074cc <_write_r>:
 80074cc:	b538      	push	{r3, r4, r5, lr}
 80074ce:	4604      	mov	r4, r0
 80074d0:	4608      	mov	r0, r1
 80074d2:	4611      	mov	r1, r2
 80074d4:	2200      	movs	r2, #0
 80074d6:	4d05      	ldr	r5, [pc, #20]	@ (80074ec <_write_r+0x20>)
 80074d8:	602a      	str	r2, [r5, #0]
 80074da:	461a      	mov	r2, r3
 80074dc:	f7fa ffed 	bl	80024ba <_write>
 80074e0:	1c43      	adds	r3, r0, #1
 80074e2:	d102      	bne.n	80074ea <_write_r+0x1e>
 80074e4:	682b      	ldr	r3, [r5, #0]
 80074e6:	b103      	cbz	r3, 80074ea <_write_r+0x1e>
 80074e8:	6023      	str	r3, [r4, #0]
 80074ea:	bd38      	pop	{r3, r4, r5, pc}
 80074ec:	200005a8 	.word	0x200005a8

080074f0 <__errno>:
 80074f0:	4b01      	ldr	r3, [pc, #4]	@ (80074f8 <__errno+0x8>)
 80074f2:	6818      	ldr	r0, [r3, #0]
 80074f4:	4770      	bx	lr
 80074f6:	bf00      	nop
 80074f8:	20000018 	.word	0x20000018

080074fc <__libc_init_array>:
 80074fc:	b570      	push	{r4, r5, r6, lr}
 80074fe:	2600      	movs	r6, #0
 8007500:	4d0c      	ldr	r5, [pc, #48]	@ (8007534 <__libc_init_array+0x38>)
 8007502:	4c0d      	ldr	r4, [pc, #52]	@ (8007538 <__libc_init_array+0x3c>)
 8007504:	1b64      	subs	r4, r4, r5
 8007506:	10a4      	asrs	r4, r4, #2
 8007508:	42a6      	cmp	r6, r4
 800750a:	d109      	bne.n	8007520 <__libc_init_array+0x24>
 800750c:	f003 fb66 	bl	800abdc <_init>
 8007510:	2600      	movs	r6, #0
 8007512:	4d0a      	ldr	r5, [pc, #40]	@ (800753c <__libc_init_array+0x40>)
 8007514:	4c0a      	ldr	r4, [pc, #40]	@ (8007540 <__libc_init_array+0x44>)
 8007516:	1b64      	subs	r4, r4, r5
 8007518:	10a4      	asrs	r4, r4, #2
 800751a:	42a6      	cmp	r6, r4
 800751c:	d105      	bne.n	800752a <__libc_init_array+0x2e>
 800751e:	bd70      	pop	{r4, r5, r6, pc}
 8007520:	f855 3b04 	ldr.w	r3, [r5], #4
 8007524:	4798      	blx	r3
 8007526:	3601      	adds	r6, #1
 8007528:	e7ee      	b.n	8007508 <__libc_init_array+0xc>
 800752a:	f855 3b04 	ldr.w	r3, [r5], #4
 800752e:	4798      	blx	r3
 8007530:	3601      	adds	r6, #1
 8007532:	e7f2      	b.n	800751a <__libc_init_array+0x1e>
 8007534:	0800b148 	.word	0x0800b148
 8007538:	0800b148 	.word	0x0800b148
 800753c:	0800b148 	.word	0x0800b148
 8007540:	0800b14c 	.word	0x0800b14c

08007544 <__retarget_lock_init_recursive>:
 8007544:	4770      	bx	lr

08007546 <__retarget_lock_acquire_recursive>:
 8007546:	4770      	bx	lr

08007548 <__retarget_lock_release_recursive>:
 8007548:	4770      	bx	lr

0800754a <memchr>:
 800754a:	4603      	mov	r3, r0
 800754c:	b510      	push	{r4, lr}
 800754e:	b2c9      	uxtb	r1, r1
 8007550:	4402      	add	r2, r0
 8007552:	4293      	cmp	r3, r2
 8007554:	4618      	mov	r0, r3
 8007556:	d101      	bne.n	800755c <memchr+0x12>
 8007558:	2000      	movs	r0, #0
 800755a:	e003      	b.n	8007564 <memchr+0x1a>
 800755c:	7804      	ldrb	r4, [r0, #0]
 800755e:	3301      	adds	r3, #1
 8007560:	428c      	cmp	r4, r1
 8007562:	d1f6      	bne.n	8007552 <memchr+0x8>
 8007564:	bd10      	pop	{r4, pc}
	...

08007568 <nanf>:
 8007568:	4800      	ldr	r0, [pc, #0]	@ (800756c <nanf+0x4>)
 800756a:	4770      	bx	lr
 800756c:	7fc00000 	.word	0x7fc00000

08007570 <quorem>:
 8007570:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007574:	6903      	ldr	r3, [r0, #16]
 8007576:	690c      	ldr	r4, [r1, #16]
 8007578:	4607      	mov	r7, r0
 800757a:	42a3      	cmp	r3, r4
 800757c:	db7e      	blt.n	800767c <quorem+0x10c>
 800757e:	3c01      	subs	r4, #1
 8007580:	00a3      	lsls	r3, r4, #2
 8007582:	f100 0514 	add.w	r5, r0, #20
 8007586:	f101 0814 	add.w	r8, r1, #20
 800758a:	9300      	str	r3, [sp, #0]
 800758c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007590:	9301      	str	r3, [sp, #4]
 8007592:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007596:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800759a:	3301      	adds	r3, #1
 800759c:	429a      	cmp	r2, r3
 800759e:	fbb2 f6f3 	udiv	r6, r2, r3
 80075a2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80075a6:	d32e      	bcc.n	8007606 <quorem+0x96>
 80075a8:	f04f 0a00 	mov.w	sl, #0
 80075ac:	46c4      	mov	ip, r8
 80075ae:	46ae      	mov	lr, r5
 80075b0:	46d3      	mov	fp, sl
 80075b2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80075b6:	b298      	uxth	r0, r3
 80075b8:	fb06 a000 	mla	r0, r6, r0, sl
 80075bc:	0c1b      	lsrs	r3, r3, #16
 80075be:	0c02      	lsrs	r2, r0, #16
 80075c0:	fb06 2303 	mla	r3, r6, r3, r2
 80075c4:	f8de 2000 	ldr.w	r2, [lr]
 80075c8:	b280      	uxth	r0, r0
 80075ca:	b292      	uxth	r2, r2
 80075cc:	1a12      	subs	r2, r2, r0
 80075ce:	445a      	add	r2, fp
 80075d0:	f8de 0000 	ldr.w	r0, [lr]
 80075d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80075d8:	b29b      	uxth	r3, r3
 80075da:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80075de:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80075e2:	b292      	uxth	r2, r2
 80075e4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80075e8:	45e1      	cmp	r9, ip
 80075ea:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80075ee:	f84e 2b04 	str.w	r2, [lr], #4
 80075f2:	d2de      	bcs.n	80075b2 <quorem+0x42>
 80075f4:	9b00      	ldr	r3, [sp, #0]
 80075f6:	58eb      	ldr	r3, [r5, r3]
 80075f8:	b92b      	cbnz	r3, 8007606 <quorem+0x96>
 80075fa:	9b01      	ldr	r3, [sp, #4]
 80075fc:	3b04      	subs	r3, #4
 80075fe:	429d      	cmp	r5, r3
 8007600:	461a      	mov	r2, r3
 8007602:	d32f      	bcc.n	8007664 <quorem+0xf4>
 8007604:	613c      	str	r4, [r7, #16]
 8007606:	4638      	mov	r0, r7
 8007608:	f001 f9c2 	bl	8008990 <__mcmp>
 800760c:	2800      	cmp	r0, #0
 800760e:	db25      	blt.n	800765c <quorem+0xec>
 8007610:	4629      	mov	r1, r5
 8007612:	2000      	movs	r0, #0
 8007614:	f858 2b04 	ldr.w	r2, [r8], #4
 8007618:	f8d1 c000 	ldr.w	ip, [r1]
 800761c:	fa1f fe82 	uxth.w	lr, r2
 8007620:	fa1f f38c 	uxth.w	r3, ip
 8007624:	eba3 030e 	sub.w	r3, r3, lr
 8007628:	4403      	add	r3, r0
 800762a:	0c12      	lsrs	r2, r2, #16
 800762c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007630:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007634:	b29b      	uxth	r3, r3
 8007636:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800763a:	45c1      	cmp	r9, r8
 800763c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007640:	f841 3b04 	str.w	r3, [r1], #4
 8007644:	d2e6      	bcs.n	8007614 <quorem+0xa4>
 8007646:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800764a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800764e:	b922      	cbnz	r2, 800765a <quorem+0xea>
 8007650:	3b04      	subs	r3, #4
 8007652:	429d      	cmp	r5, r3
 8007654:	461a      	mov	r2, r3
 8007656:	d30b      	bcc.n	8007670 <quorem+0x100>
 8007658:	613c      	str	r4, [r7, #16]
 800765a:	3601      	adds	r6, #1
 800765c:	4630      	mov	r0, r6
 800765e:	b003      	add	sp, #12
 8007660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007664:	6812      	ldr	r2, [r2, #0]
 8007666:	3b04      	subs	r3, #4
 8007668:	2a00      	cmp	r2, #0
 800766a:	d1cb      	bne.n	8007604 <quorem+0x94>
 800766c:	3c01      	subs	r4, #1
 800766e:	e7c6      	b.n	80075fe <quorem+0x8e>
 8007670:	6812      	ldr	r2, [r2, #0]
 8007672:	3b04      	subs	r3, #4
 8007674:	2a00      	cmp	r2, #0
 8007676:	d1ef      	bne.n	8007658 <quorem+0xe8>
 8007678:	3c01      	subs	r4, #1
 800767a:	e7ea      	b.n	8007652 <quorem+0xe2>
 800767c:	2000      	movs	r0, #0
 800767e:	e7ee      	b.n	800765e <quorem+0xee>

08007680 <_dtoa_r>:
 8007680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007684:	4614      	mov	r4, r2
 8007686:	461d      	mov	r5, r3
 8007688:	69c7      	ldr	r7, [r0, #28]
 800768a:	b097      	sub	sp, #92	@ 0x5c
 800768c:	4683      	mov	fp, r0
 800768e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007692:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007694:	b97f      	cbnz	r7, 80076b6 <_dtoa_r+0x36>
 8007696:	2010      	movs	r0, #16
 8007698:	f000 fe02 	bl	80082a0 <malloc>
 800769c:	4602      	mov	r2, r0
 800769e:	f8cb 001c 	str.w	r0, [fp, #28]
 80076a2:	b920      	cbnz	r0, 80076ae <_dtoa_r+0x2e>
 80076a4:	21ef      	movs	r1, #239	@ 0xef
 80076a6:	4ba8      	ldr	r3, [pc, #672]	@ (8007948 <_dtoa_r+0x2c8>)
 80076a8:	48a8      	ldr	r0, [pc, #672]	@ (800794c <_dtoa_r+0x2cc>)
 80076aa:	f002 fc23 	bl	8009ef4 <__assert_func>
 80076ae:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80076b2:	6007      	str	r7, [r0, #0]
 80076b4:	60c7      	str	r7, [r0, #12]
 80076b6:	f8db 301c 	ldr.w	r3, [fp, #28]
 80076ba:	6819      	ldr	r1, [r3, #0]
 80076bc:	b159      	cbz	r1, 80076d6 <_dtoa_r+0x56>
 80076be:	685a      	ldr	r2, [r3, #4]
 80076c0:	2301      	movs	r3, #1
 80076c2:	4093      	lsls	r3, r2
 80076c4:	604a      	str	r2, [r1, #4]
 80076c6:	608b      	str	r3, [r1, #8]
 80076c8:	4658      	mov	r0, fp
 80076ca:	f000 fedf 	bl	800848c <_Bfree>
 80076ce:	2200      	movs	r2, #0
 80076d0:	f8db 301c 	ldr.w	r3, [fp, #28]
 80076d4:	601a      	str	r2, [r3, #0]
 80076d6:	1e2b      	subs	r3, r5, #0
 80076d8:	bfaf      	iteee	ge
 80076da:	2300      	movge	r3, #0
 80076dc:	2201      	movlt	r2, #1
 80076de:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80076e2:	9303      	strlt	r3, [sp, #12]
 80076e4:	bfa8      	it	ge
 80076e6:	6033      	strge	r3, [r6, #0]
 80076e8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80076ec:	4b98      	ldr	r3, [pc, #608]	@ (8007950 <_dtoa_r+0x2d0>)
 80076ee:	bfb8      	it	lt
 80076f0:	6032      	strlt	r2, [r6, #0]
 80076f2:	ea33 0308 	bics.w	r3, r3, r8
 80076f6:	d112      	bne.n	800771e <_dtoa_r+0x9e>
 80076f8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80076fc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80076fe:	6013      	str	r3, [r2, #0]
 8007700:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007704:	4323      	orrs	r3, r4
 8007706:	f000 8550 	beq.w	80081aa <_dtoa_r+0xb2a>
 800770a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800770c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8007954 <_dtoa_r+0x2d4>
 8007710:	2b00      	cmp	r3, #0
 8007712:	f000 8552 	beq.w	80081ba <_dtoa_r+0xb3a>
 8007716:	f10a 0303 	add.w	r3, sl, #3
 800771a:	f000 bd4c 	b.w	80081b6 <_dtoa_r+0xb36>
 800771e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007722:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007726:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800772a:	2200      	movs	r2, #0
 800772c:	2300      	movs	r3, #0
 800772e:	f7f9 f945 	bl	80009bc <__aeabi_dcmpeq>
 8007732:	4607      	mov	r7, r0
 8007734:	b158      	cbz	r0, 800774e <_dtoa_r+0xce>
 8007736:	2301      	movs	r3, #1
 8007738:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800773a:	6013      	str	r3, [r2, #0]
 800773c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800773e:	b113      	cbz	r3, 8007746 <_dtoa_r+0xc6>
 8007740:	4b85      	ldr	r3, [pc, #532]	@ (8007958 <_dtoa_r+0x2d8>)
 8007742:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007744:	6013      	str	r3, [r2, #0]
 8007746:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800795c <_dtoa_r+0x2dc>
 800774a:	f000 bd36 	b.w	80081ba <_dtoa_r+0xb3a>
 800774e:	ab14      	add	r3, sp, #80	@ 0x50
 8007750:	9301      	str	r3, [sp, #4]
 8007752:	ab15      	add	r3, sp, #84	@ 0x54
 8007754:	9300      	str	r3, [sp, #0]
 8007756:	4658      	mov	r0, fp
 8007758:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800775c:	f001 fa30 	bl	8008bc0 <__d2b>
 8007760:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007764:	4681      	mov	r9, r0
 8007766:	2e00      	cmp	r6, #0
 8007768:	d077      	beq.n	800785a <_dtoa_r+0x1da>
 800776a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800776e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007770:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007774:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007778:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800777c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007780:	9712      	str	r7, [sp, #72]	@ 0x48
 8007782:	4619      	mov	r1, r3
 8007784:	2200      	movs	r2, #0
 8007786:	4b76      	ldr	r3, [pc, #472]	@ (8007960 <_dtoa_r+0x2e0>)
 8007788:	f7f8 fcf8 	bl	800017c <__aeabi_dsub>
 800778c:	a368      	add	r3, pc, #416	@ (adr r3, 8007930 <_dtoa_r+0x2b0>)
 800778e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007792:	f7f8 feab 	bl	80004ec <__aeabi_dmul>
 8007796:	a368      	add	r3, pc, #416	@ (adr r3, 8007938 <_dtoa_r+0x2b8>)
 8007798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779c:	f7f8 fcf0 	bl	8000180 <__adddf3>
 80077a0:	4604      	mov	r4, r0
 80077a2:	4630      	mov	r0, r6
 80077a4:	460d      	mov	r5, r1
 80077a6:	f7f8 fe37 	bl	8000418 <__aeabi_i2d>
 80077aa:	a365      	add	r3, pc, #404	@ (adr r3, 8007940 <_dtoa_r+0x2c0>)
 80077ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b0:	f7f8 fe9c 	bl	80004ec <__aeabi_dmul>
 80077b4:	4602      	mov	r2, r0
 80077b6:	460b      	mov	r3, r1
 80077b8:	4620      	mov	r0, r4
 80077ba:	4629      	mov	r1, r5
 80077bc:	f7f8 fce0 	bl	8000180 <__adddf3>
 80077c0:	4604      	mov	r4, r0
 80077c2:	460d      	mov	r5, r1
 80077c4:	f7f9 f942 	bl	8000a4c <__aeabi_d2iz>
 80077c8:	2200      	movs	r2, #0
 80077ca:	4607      	mov	r7, r0
 80077cc:	2300      	movs	r3, #0
 80077ce:	4620      	mov	r0, r4
 80077d0:	4629      	mov	r1, r5
 80077d2:	f7f9 f8fd 	bl	80009d0 <__aeabi_dcmplt>
 80077d6:	b140      	cbz	r0, 80077ea <_dtoa_r+0x16a>
 80077d8:	4638      	mov	r0, r7
 80077da:	f7f8 fe1d 	bl	8000418 <__aeabi_i2d>
 80077de:	4622      	mov	r2, r4
 80077e0:	462b      	mov	r3, r5
 80077e2:	f7f9 f8eb 	bl	80009bc <__aeabi_dcmpeq>
 80077e6:	b900      	cbnz	r0, 80077ea <_dtoa_r+0x16a>
 80077e8:	3f01      	subs	r7, #1
 80077ea:	2f16      	cmp	r7, #22
 80077ec:	d853      	bhi.n	8007896 <_dtoa_r+0x216>
 80077ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80077f2:	4b5c      	ldr	r3, [pc, #368]	@ (8007964 <_dtoa_r+0x2e4>)
 80077f4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80077f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077fc:	f7f9 f8e8 	bl	80009d0 <__aeabi_dcmplt>
 8007800:	2800      	cmp	r0, #0
 8007802:	d04a      	beq.n	800789a <_dtoa_r+0x21a>
 8007804:	2300      	movs	r3, #0
 8007806:	3f01      	subs	r7, #1
 8007808:	930f      	str	r3, [sp, #60]	@ 0x3c
 800780a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800780c:	1b9b      	subs	r3, r3, r6
 800780e:	1e5a      	subs	r2, r3, #1
 8007810:	bf46      	itte	mi
 8007812:	f1c3 0801 	rsbmi	r8, r3, #1
 8007816:	2300      	movmi	r3, #0
 8007818:	f04f 0800 	movpl.w	r8, #0
 800781c:	9209      	str	r2, [sp, #36]	@ 0x24
 800781e:	bf48      	it	mi
 8007820:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007822:	2f00      	cmp	r7, #0
 8007824:	db3b      	blt.n	800789e <_dtoa_r+0x21e>
 8007826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007828:	970e      	str	r7, [sp, #56]	@ 0x38
 800782a:	443b      	add	r3, r7
 800782c:	9309      	str	r3, [sp, #36]	@ 0x24
 800782e:	2300      	movs	r3, #0
 8007830:	930a      	str	r3, [sp, #40]	@ 0x28
 8007832:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007834:	2b09      	cmp	r3, #9
 8007836:	d866      	bhi.n	8007906 <_dtoa_r+0x286>
 8007838:	2b05      	cmp	r3, #5
 800783a:	bfc4      	itt	gt
 800783c:	3b04      	subgt	r3, #4
 800783e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007840:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007842:	bfc8      	it	gt
 8007844:	2400      	movgt	r4, #0
 8007846:	f1a3 0302 	sub.w	r3, r3, #2
 800784a:	bfd8      	it	le
 800784c:	2401      	movle	r4, #1
 800784e:	2b03      	cmp	r3, #3
 8007850:	d864      	bhi.n	800791c <_dtoa_r+0x29c>
 8007852:	e8df f003 	tbb	[pc, r3]
 8007856:	382b      	.short	0x382b
 8007858:	5636      	.short	0x5636
 800785a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800785e:	441e      	add	r6, r3
 8007860:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007864:	2b20      	cmp	r3, #32
 8007866:	bfc1      	itttt	gt
 8007868:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800786c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007870:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007874:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007878:	bfd6      	itet	le
 800787a:	f1c3 0320 	rsble	r3, r3, #32
 800787e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007882:	fa04 f003 	lslle.w	r0, r4, r3
 8007886:	f7f8 fdb7 	bl	80003f8 <__aeabi_ui2d>
 800788a:	2201      	movs	r2, #1
 800788c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007890:	3e01      	subs	r6, #1
 8007892:	9212      	str	r2, [sp, #72]	@ 0x48
 8007894:	e775      	b.n	8007782 <_dtoa_r+0x102>
 8007896:	2301      	movs	r3, #1
 8007898:	e7b6      	b.n	8007808 <_dtoa_r+0x188>
 800789a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800789c:	e7b5      	b.n	800780a <_dtoa_r+0x18a>
 800789e:	427b      	negs	r3, r7
 80078a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80078a2:	2300      	movs	r3, #0
 80078a4:	eba8 0807 	sub.w	r8, r8, r7
 80078a8:	930e      	str	r3, [sp, #56]	@ 0x38
 80078aa:	e7c2      	b.n	8007832 <_dtoa_r+0x1b2>
 80078ac:	2300      	movs	r3, #0
 80078ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80078b0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	dc35      	bgt.n	8007922 <_dtoa_r+0x2a2>
 80078b6:	2301      	movs	r3, #1
 80078b8:	461a      	mov	r2, r3
 80078ba:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80078be:	9221      	str	r2, [sp, #132]	@ 0x84
 80078c0:	e00b      	b.n	80078da <_dtoa_r+0x25a>
 80078c2:	2301      	movs	r3, #1
 80078c4:	e7f3      	b.n	80078ae <_dtoa_r+0x22e>
 80078c6:	2300      	movs	r3, #0
 80078c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80078ca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80078cc:	18fb      	adds	r3, r7, r3
 80078ce:	9308      	str	r3, [sp, #32]
 80078d0:	3301      	adds	r3, #1
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	9307      	str	r3, [sp, #28]
 80078d6:	bfb8      	it	lt
 80078d8:	2301      	movlt	r3, #1
 80078da:	2100      	movs	r1, #0
 80078dc:	2204      	movs	r2, #4
 80078de:	f8db 001c 	ldr.w	r0, [fp, #28]
 80078e2:	f102 0514 	add.w	r5, r2, #20
 80078e6:	429d      	cmp	r5, r3
 80078e8:	d91f      	bls.n	800792a <_dtoa_r+0x2aa>
 80078ea:	6041      	str	r1, [r0, #4]
 80078ec:	4658      	mov	r0, fp
 80078ee:	f000 fd8d 	bl	800840c <_Balloc>
 80078f2:	4682      	mov	sl, r0
 80078f4:	2800      	cmp	r0, #0
 80078f6:	d139      	bne.n	800796c <_dtoa_r+0x2ec>
 80078f8:	4602      	mov	r2, r0
 80078fa:	f240 11af 	movw	r1, #431	@ 0x1af
 80078fe:	4b1a      	ldr	r3, [pc, #104]	@ (8007968 <_dtoa_r+0x2e8>)
 8007900:	e6d2      	b.n	80076a8 <_dtoa_r+0x28>
 8007902:	2301      	movs	r3, #1
 8007904:	e7e0      	b.n	80078c8 <_dtoa_r+0x248>
 8007906:	2401      	movs	r4, #1
 8007908:	2300      	movs	r3, #0
 800790a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800790c:	9320      	str	r3, [sp, #128]	@ 0x80
 800790e:	f04f 33ff 	mov.w	r3, #4294967295
 8007912:	2200      	movs	r2, #0
 8007914:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007918:	2312      	movs	r3, #18
 800791a:	e7d0      	b.n	80078be <_dtoa_r+0x23e>
 800791c:	2301      	movs	r3, #1
 800791e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007920:	e7f5      	b.n	800790e <_dtoa_r+0x28e>
 8007922:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007924:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007928:	e7d7      	b.n	80078da <_dtoa_r+0x25a>
 800792a:	3101      	adds	r1, #1
 800792c:	0052      	lsls	r2, r2, #1
 800792e:	e7d8      	b.n	80078e2 <_dtoa_r+0x262>
 8007930:	636f4361 	.word	0x636f4361
 8007934:	3fd287a7 	.word	0x3fd287a7
 8007938:	8b60c8b3 	.word	0x8b60c8b3
 800793c:	3fc68a28 	.word	0x3fc68a28
 8007940:	509f79fb 	.word	0x509f79fb
 8007944:	3fd34413 	.word	0x3fd34413
 8007948:	0800ad58 	.word	0x0800ad58
 800794c:	0800ad6f 	.word	0x0800ad6f
 8007950:	7ff00000 	.word	0x7ff00000
 8007954:	0800ad54 	.word	0x0800ad54
 8007958:	0800ad23 	.word	0x0800ad23
 800795c:	0800ad22 	.word	0x0800ad22
 8007960:	3ff80000 	.word	0x3ff80000
 8007964:	0800ae68 	.word	0x0800ae68
 8007968:	0800adc7 	.word	0x0800adc7
 800796c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007970:	6018      	str	r0, [r3, #0]
 8007972:	9b07      	ldr	r3, [sp, #28]
 8007974:	2b0e      	cmp	r3, #14
 8007976:	f200 80a4 	bhi.w	8007ac2 <_dtoa_r+0x442>
 800797a:	2c00      	cmp	r4, #0
 800797c:	f000 80a1 	beq.w	8007ac2 <_dtoa_r+0x442>
 8007980:	2f00      	cmp	r7, #0
 8007982:	dd33      	ble.n	80079ec <_dtoa_r+0x36c>
 8007984:	4b86      	ldr	r3, [pc, #536]	@ (8007ba0 <_dtoa_r+0x520>)
 8007986:	f007 020f 	and.w	r2, r7, #15
 800798a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800798e:	05f8      	lsls	r0, r7, #23
 8007990:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007994:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007998:	ea4f 1427 	mov.w	r4, r7, asr #4
 800799c:	d516      	bpl.n	80079cc <_dtoa_r+0x34c>
 800799e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80079a2:	4b80      	ldr	r3, [pc, #512]	@ (8007ba4 <_dtoa_r+0x524>)
 80079a4:	2603      	movs	r6, #3
 80079a6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80079aa:	f7f8 fec9 	bl	8000740 <__aeabi_ddiv>
 80079ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079b2:	f004 040f 	and.w	r4, r4, #15
 80079b6:	4d7b      	ldr	r5, [pc, #492]	@ (8007ba4 <_dtoa_r+0x524>)
 80079b8:	b954      	cbnz	r4, 80079d0 <_dtoa_r+0x350>
 80079ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079c2:	f7f8 febd 	bl	8000740 <__aeabi_ddiv>
 80079c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079ca:	e028      	b.n	8007a1e <_dtoa_r+0x39e>
 80079cc:	2602      	movs	r6, #2
 80079ce:	e7f2      	b.n	80079b6 <_dtoa_r+0x336>
 80079d0:	07e1      	lsls	r1, r4, #31
 80079d2:	d508      	bpl.n	80079e6 <_dtoa_r+0x366>
 80079d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80079dc:	f7f8 fd86 	bl	80004ec <__aeabi_dmul>
 80079e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80079e4:	3601      	adds	r6, #1
 80079e6:	1064      	asrs	r4, r4, #1
 80079e8:	3508      	adds	r5, #8
 80079ea:	e7e5      	b.n	80079b8 <_dtoa_r+0x338>
 80079ec:	f000 80d2 	beq.w	8007b94 <_dtoa_r+0x514>
 80079f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80079f4:	427c      	negs	r4, r7
 80079f6:	4b6a      	ldr	r3, [pc, #424]	@ (8007ba0 <_dtoa_r+0x520>)
 80079f8:	f004 020f 	and.w	r2, r4, #15
 80079fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a04:	f7f8 fd72 	bl	80004ec <__aeabi_dmul>
 8007a08:	2602      	movs	r6, #2
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a10:	4d64      	ldr	r5, [pc, #400]	@ (8007ba4 <_dtoa_r+0x524>)
 8007a12:	1124      	asrs	r4, r4, #4
 8007a14:	2c00      	cmp	r4, #0
 8007a16:	f040 80b2 	bne.w	8007b7e <_dtoa_r+0x4fe>
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1d3      	bne.n	80079c6 <_dtoa_r+0x346>
 8007a1e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007a22:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	f000 80b7 	beq.w	8007b98 <_dtoa_r+0x518>
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	4620      	mov	r0, r4
 8007a2e:	4629      	mov	r1, r5
 8007a30:	4b5d      	ldr	r3, [pc, #372]	@ (8007ba8 <_dtoa_r+0x528>)
 8007a32:	f7f8 ffcd 	bl	80009d0 <__aeabi_dcmplt>
 8007a36:	2800      	cmp	r0, #0
 8007a38:	f000 80ae 	beq.w	8007b98 <_dtoa_r+0x518>
 8007a3c:	9b07      	ldr	r3, [sp, #28]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	f000 80aa 	beq.w	8007b98 <_dtoa_r+0x518>
 8007a44:	9b08      	ldr	r3, [sp, #32]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	dd37      	ble.n	8007aba <_dtoa_r+0x43a>
 8007a4a:	1e7b      	subs	r3, r7, #1
 8007a4c:	4620      	mov	r0, r4
 8007a4e:	9304      	str	r3, [sp, #16]
 8007a50:	2200      	movs	r2, #0
 8007a52:	4629      	mov	r1, r5
 8007a54:	4b55      	ldr	r3, [pc, #340]	@ (8007bac <_dtoa_r+0x52c>)
 8007a56:	f7f8 fd49 	bl	80004ec <__aeabi_dmul>
 8007a5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a5e:	9c08      	ldr	r4, [sp, #32]
 8007a60:	3601      	adds	r6, #1
 8007a62:	4630      	mov	r0, r6
 8007a64:	f7f8 fcd8 	bl	8000418 <__aeabi_i2d>
 8007a68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a6c:	f7f8 fd3e 	bl	80004ec <__aeabi_dmul>
 8007a70:	2200      	movs	r2, #0
 8007a72:	4b4f      	ldr	r3, [pc, #316]	@ (8007bb0 <_dtoa_r+0x530>)
 8007a74:	f7f8 fb84 	bl	8000180 <__adddf3>
 8007a78:	4605      	mov	r5, r0
 8007a7a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007a7e:	2c00      	cmp	r4, #0
 8007a80:	f040 809a 	bne.w	8007bb8 <_dtoa_r+0x538>
 8007a84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	4b4a      	ldr	r3, [pc, #296]	@ (8007bb4 <_dtoa_r+0x534>)
 8007a8c:	f7f8 fb76 	bl	800017c <__aeabi_dsub>
 8007a90:	4602      	mov	r2, r0
 8007a92:	460b      	mov	r3, r1
 8007a94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007a98:	462a      	mov	r2, r5
 8007a9a:	4633      	mov	r3, r6
 8007a9c:	f7f8 ffb6 	bl	8000a0c <__aeabi_dcmpgt>
 8007aa0:	2800      	cmp	r0, #0
 8007aa2:	f040 828e 	bne.w	8007fc2 <_dtoa_r+0x942>
 8007aa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007aaa:	462a      	mov	r2, r5
 8007aac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007ab0:	f7f8 ff8e 	bl	80009d0 <__aeabi_dcmplt>
 8007ab4:	2800      	cmp	r0, #0
 8007ab6:	f040 8127 	bne.w	8007d08 <_dtoa_r+0x688>
 8007aba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007abe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007ac2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	f2c0 8163 	blt.w	8007d90 <_dtoa_r+0x710>
 8007aca:	2f0e      	cmp	r7, #14
 8007acc:	f300 8160 	bgt.w	8007d90 <_dtoa_r+0x710>
 8007ad0:	4b33      	ldr	r3, [pc, #204]	@ (8007ba0 <_dtoa_r+0x520>)
 8007ad2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007ad6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007ada:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007ade:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	da03      	bge.n	8007aec <_dtoa_r+0x46c>
 8007ae4:	9b07      	ldr	r3, [sp, #28]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	f340 8100 	ble.w	8007cec <_dtoa_r+0x66c>
 8007aec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007af0:	4656      	mov	r6, sl
 8007af2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007af6:	4620      	mov	r0, r4
 8007af8:	4629      	mov	r1, r5
 8007afa:	f7f8 fe21 	bl	8000740 <__aeabi_ddiv>
 8007afe:	f7f8 ffa5 	bl	8000a4c <__aeabi_d2iz>
 8007b02:	4680      	mov	r8, r0
 8007b04:	f7f8 fc88 	bl	8000418 <__aeabi_i2d>
 8007b08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b0c:	f7f8 fcee 	bl	80004ec <__aeabi_dmul>
 8007b10:	4602      	mov	r2, r0
 8007b12:	460b      	mov	r3, r1
 8007b14:	4620      	mov	r0, r4
 8007b16:	4629      	mov	r1, r5
 8007b18:	f7f8 fb30 	bl	800017c <__aeabi_dsub>
 8007b1c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007b20:	9d07      	ldr	r5, [sp, #28]
 8007b22:	f806 4b01 	strb.w	r4, [r6], #1
 8007b26:	eba6 040a 	sub.w	r4, r6, sl
 8007b2a:	42a5      	cmp	r5, r4
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	460b      	mov	r3, r1
 8007b30:	f040 8116 	bne.w	8007d60 <_dtoa_r+0x6e0>
 8007b34:	f7f8 fb24 	bl	8000180 <__adddf3>
 8007b38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b3c:	4604      	mov	r4, r0
 8007b3e:	460d      	mov	r5, r1
 8007b40:	f7f8 ff64 	bl	8000a0c <__aeabi_dcmpgt>
 8007b44:	2800      	cmp	r0, #0
 8007b46:	f040 80f8 	bne.w	8007d3a <_dtoa_r+0x6ba>
 8007b4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b4e:	4620      	mov	r0, r4
 8007b50:	4629      	mov	r1, r5
 8007b52:	f7f8 ff33 	bl	80009bc <__aeabi_dcmpeq>
 8007b56:	b118      	cbz	r0, 8007b60 <_dtoa_r+0x4e0>
 8007b58:	f018 0f01 	tst.w	r8, #1
 8007b5c:	f040 80ed 	bne.w	8007d3a <_dtoa_r+0x6ba>
 8007b60:	4649      	mov	r1, r9
 8007b62:	4658      	mov	r0, fp
 8007b64:	f000 fc92 	bl	800848c <_Bfree>
 8007b68:	2300      	movs	r3, #0
 8007b6a:	7033      	strb	r3, [r6, #0]
 8007b6c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007b6e:	3701      	adds	r7, #1
 8007b70:	601f      	str	r7, [r3, #0]
 8007b72:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	f000 8320 	beq.w	80081ba <_dtoa_r+0xb3a>
 8007b7a:	601e      	str	r6, [r3, #0]
 8007b7c:	e31d      	b.n	80081ba <_dtoa_r+0xb3a>
 8007b7e:	07e2      	lsls	r2, r4, #31
 8007b80:	d505      	bpl.n	8007b8e <_dtoa_r+0x50e>
 8007b82:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007b86:	f7f8 fcb1 	bl	80004ec <__aeabi_dmul>
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	3601      	adds	r6, #1
 8007b8e:	1064      	asrs	r4, r4, #1
 8007b90:	3508      	adds	r5, #8
 8007b92:	e73f      	b.n	8007a14 <_dtoa_r+0x394>
 8007b94:	2602      	movs	r6, #2
 8007b96:	e742      	b.n	8007a1e <_dtoa_r+0x39e>
 8007b98:	9c07      	ldr	r4, [sp, #28]
 8007b9a:	9704      	str	r7, [sp, #16]
 8007b9c:	e761      	b.n	8007a62 <_dtoa_r+0x3e2>
 8007b9e:	bf00      	nop
 8007ba0:	0800ae68 	.word	0x0800ae68
 8007ba4:	0800ae40 	.word	0x0800ae40
 8007ba8:	3ff00000 	.word	0x3ff00000
 8007bac:	40240000 	.word	0x40240000
 8007bb0:	401c0000 	.word	0x401c0000
 8007bb4:	40140000 	.word	0x40140000
 8007bb8:	4b70      	ldr	r3, [pc, #448]	@ (8007d7c <_dtoa_r+0x6fc>)
 8007bba:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007bbc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007bc0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007bc4:	4454      	add	r4, sl
 8007bc6:	2900      	cmp	r1, #0
 8007bc8:	d045      	beq.n	8007c56 <_dtoa_r+0x5d6>
 8007bca:	2000      	movs	r0, #0
 8007bcc:	496c      	ldr	r1, [pc, #432]	@ (8007d80 <_dtoa_r+0x700>)
 8007bce:	f7f8 fdb7 	bl	8000740 <__aeabi_ddiv>
 8007bd2:	4633      	mov	r3, r6
 8007bd4:	462a      	mov	r2, r5
 8007bd6:	f7f8 fad1 	bl	800017c <__aeabi_dsub>
 8007bda:	4656      	mov	r6, sl
 8007bdc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007be0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007be4:	f7f8 ff32 	bl	8000a4c <__aeabi_d2iz>
 8007be8:	4605      	mov	r5, r0
 8007bea:	f7f8 fc15 	bl	8000418 <__aeabi_i2d>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bf6:	f7f8 fac1 	bl	800017c <__aeabi_dsub>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	3530      	adds	r5, #48	@ 0x30
 8007c00:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007c04:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007c08:	f806 5b01 	strb.w	r5, [r6], #1
 8007c0c:	f7f8 fee0 	bl	80009d0 <__aeabi_dcmplt>
 8007c10:	2800      	cmp	r0, #0
 8007c12:	d163      	bne.n	8007cdc <_dtoa_r+0x65c>
 8007c14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c18:	2000      	movs	r0, #0
 8007c1a:	495a      	ldr	r1, [pc, #360]	@ (8007d84 <_dtoa_r+0x704>)
 8007c1c:	f7f8 faae 	bl	800017c <__aeabi_dsub>
 8007c20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007c24:	f7f8 fed4 	bl	80009d0 <__aeabi_dcmplt>
 8007c28:	2800      	cmp	r0, #0
 8007c2a:	f040 8087 	bne.w	8007d3c <_dtoa_r+0x6bc>
 8007c2e:	42a6      	cmp	r6, r4
 8007c30:	f43f af43 	beq.w	8007aba <_dtoa_r+0x43a>
 8007c34:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007c38:	2200      	movs	r2, #0
 8007c3a:	4b53      	ldr	r3, [pc, #332]	@ (8007d88 <_dtoa_r+0x708>)
 8007c3c:	f7f8 fc56 	bl	80004ec <__aeabi_dmul>
 8007c40:	2200      	movs	r2, #0
 8007c42:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007c46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c4a:	4b4f      	ldr	r3, [pc, #316]	@ (8007d88 <_dtoa_r+0x708>)
 8007c4c:	f7f8 fc4e 	bl	80004ec <__aeabi_dmul>
 8007c50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c54:	e7c4      	b.n	8007be0 <_dtoa_r+0x560>
 8007c56:	4631      	mov	r1, r6
 8007c58:	4628      	mov	r0, r5
 8007c5a:	f7f8 fc47 	bl	80004ec <__aeabi_dmul>
 8007c5e:	4656      	mov	r6, sl
 8007c60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007c64:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007c66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c6a:	f7f8 feef 	bl	8000a4c <__aeabi_d2iz>
 8007c6e:	4605      	mov	r5, r0
 8007c70:	f7f8 fbd2 	bl	8000418 <__aeabi_i2d>
 8007c74:	4602      	mov	r2, r0
 8007c76:	460b      	mov	r3, r1
 8007c78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c7c:	f7f8 fa7e 	bl	800017c <__aeabi_dsub>
 8007c80:	4602      	mov	r2, r0
 8007c82:	460b      	mov	r3, r1
 8007c84:	3530      	adds	r5, #48	@ 0x30
 8007c86:	f806 5b01 	strb.w	r5, [r6], #1
 8007c8a:	42a6      	cmp	r6, r4
 8007c8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007c90:	f04f 0200 	mov.w	r2, #0
 8007c94:	d124      	bne.n	8007ce0 <_dtoa_r+0x660>
 8007c96:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007c9a:	4b39      	ldr	r3, [pc, #228]	@ (8007d80 <_dtoa_r+0x700>)
 8007c9c:	f7f8 fa70 	bl	8000180 <__adddf3>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ca8:	f7f8 feb0 	bl	8000a0c <__aeabi_dcmpgt>
 8007cac:	2800      	cmp	r0, #0
 8007cae:	d145      	bne.n	8007d3c <_dtoa_r+0x6bc>
 8007cb0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007cb4:	2000      	movs	r0, #0
 8007cb6:	4932      	ldr	r1, [pc, #200]	@ (8007d80 <_dtoa_r+0x700>)
 8007cb8:	f7f8 fa60 	bl	800017c <__aeabi_dsub>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cc4:	f7f8 fe84 	bl	80009d0 <__aeabi_dcmplt>
 8007cc8:	2800      	cmp	r0, #0
 8007cca:	f43f aef6 	beq.w	8007aba <_dtoa_r+0x43a>
 8007cce:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007cd0:	1e73      	subs	r3, r6, #1
 8007cd2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007cd4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007cd8:	2b30      	cmp	r3, #48	@ 0x30
 8007cda:	d0f8      	beq.n	8007cce <_dtoa_r+0x64e>
 8007cdc:	9f04      	ldr	r7, [sp, #16]
 8007cde:	e73f      	b.n	8007b60 <_dtoa_r+0x4e0>
 8007ce0:	4b29      	ldr	r3, [pc, #164]	@ (8007d88 <_dtoa_r+0x708>)
 8007ce2:	f7f8 fc03 	bl	80004ec <__aeabi_dmul>
 8007ce6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007cea:	e7bc      	b.n	8007c66 <_dtoa_r+0x5e6>
 8007cec:	d10c      	bne.n	8007d08 <_dtoa_r+0x688>
 8007cee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	4b25      	ldr	r3, [pc, #148]	@ (8007d8c <_dtoa_r+0x70c>)
 8007cf6:	f7f8 fbf9 	bl	80004ec <__aeabi_dmul>
 8007cfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007cfe:	f7f8 fe7b 	bl	80009f8 <__aeabi_dcmpge>
 8007d02:	2800      	cmp	r0, #0
 8007d04:	f000 815b 	beq.w	8007fbe <_dtoa_r+0x93e>
 8007d08:	2400      	movs	r4, #0
 8007d0a:	4625      	mov	r5, r4
 8007d0c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007d0e:	4656      	mov	r6, sl
 8007d10:	43db      	mvns	r3, r3
 8007d12:	9304      	str	r3, [sp, #16]
 8007d14:	2700      	movs	r7, #0
 8007d16:	4621      	mov	r1, r4
 8007d18:	4658      	mov	r0, fp
 8007d1a:	f000 fbb7 	bl	800848c <_Bfree>
 8007d1e:	2d00      	cmp	r5, #0
 8007d20:	d0dc      	beq.n	8007cdc <_dtoa_r+0x65c>
 8007d22:	b12f      	cbz	r7, 8007d30 <_dtoa_r+0x6b0>
 8007d24:	42af      	cmp	r7, r5
 8007d26:	d003      	beq.n	8007d30 <_dtoa_r+0x6b0>
 8007d28:	4639      	mov	r1, r7
 8007d2a:	4658      	mov	r0, fp
 8007d2c:	f000 fbae 	bl	800848c <_Bfree>
 8007d30:	4629      	mov	r1, r5
 8007d32:	4658      	mov	r0, fp
 8007d34:	f000 fbaa 	bl	800848c <_Bfree>
 8007d38:	e7d0      	b.n	8007cdc <_dtoa_r+0x65c>
 8007d3a:	9704      	str	r7, [sp, #16]
 8007d3c:	4633      	mov	r3, r6
 8007d3e:	461e      	mov	r6, r3
 8007d40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d44:	2a39      	cmp	r2, #57	@ 0x39
 8007d46:	d107      	bne.n	8007d58 <_dtoa_r+0x6d8>
 8007d48:	459a      	cmp	sl, r3
 8007d4a:	d1f8      	bne.n	8007d3e <_dtoa_r+0x6be>
 8007d4c:	9a04      	ldr	r2, [sp, #16]
 8007d4e:	3201      	adds	r2, #1
 8007d50:	9204      	str	r2, [sp, #16]
 8007d52:	2230      	movs	r2, #48	@ 0x30
 8007d54:	f88a 2000 	strb.w	r2, [sl]
 8007d58:	781a      	ldrb	r2, [r3, #0]
 8007d5a:	3201      	adds	r2, #1
 8007d5c:	701a      	strb	r2, [r3, #0]
 8007d5e:	e7bd      	b.n	8007cdc <_dtoa_r+0x65c>
 8007d60:	2200      	movs	r2, #0
 8007d62:	4b09      	ldr	r3, [pc, #36]	@ (8007d88 <_dtoa_r+0x708>)
 8007d64:	f7f8 fbc2 	bl	80004ec <__aeabi_dmul>
 8007d68:	2200      	movs	r2, #0
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	4604      	mov	r4, r0
 8007d6e:	460d      	mov	r5, r1
 8007d70:	f7f8 fe24 	bl	80009bc <__aeabi_dcmpeq>
 8007d74:	2800      	cmp	r0, #0
 8007d76:	f43f aebc 	beq.w	8007af2 <_dtoa_r+0x472>
 8007d7a:	e6f1      	b.n	8007b60 <_dtoa_r+0x4e0>
 8007d7c:	0800ae68 	.word	0x0800ae68
 8007d80:	3fe00000 	.word	0x3fe00000
 8007d84:	3ff00000 	.word	0x3ff00000
 8007d88:	40240000 	.word	0x40240000
 8007d8c:	40140000 	.word	0x40140000
 8007d90:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007d92:	2a00      	cmp	r2, #0
 8007d94:	f000 80db 	beq.w	8007f4e <_dtoa_r+0x8ce>
 8007d98:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007d9a:	2a01      	cmp	r2, #1
 8007d9c:	f300 80bf 	bgt.w	8007f1e <_dtoa_r+0x89e>
 8007da0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007da2:	2a00      	cmp	r2, #0
 8007da4:	f000 80b7 	beq.w	8007f16 <_dtoa_r+0x896>
 8007da8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007dac:	4646      	mov	r6, r8
 8007dae:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007db0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007db2:	2101      	movs	r1, #1
 8007db4:	441a      	add	r2, r3
 8007db6:	4658      	mov	r0, fp
 8007db8:	4498      	add	r8, r3
 8007dba:	9209      	str	r2, [sp, #36]	@ 0x24
 8007dbc:	f000 fc64 	bl	8008688 <__i2b>
 8007dc0:	4605      	mov	r5, r0
 8007dc2:	b15e      	cbz	r6, 8007ddc <_dtoa_r+0x75c>
 8007dc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	dd08      	ble.n	8007ddc <_dtoa_r+0x75c>
 8007dca:	42b3      	cmp	r3, r6
 8007dcc:	bfa8      	it	ge
 8007dce:	4633      	movge	r3, r6
 8007dd0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007dd2:	eba8 0803 	sub.w	r8, r8, r3
 8007dd6:	1af6      	subs	r6, r6, r3
 8007dd8:	1ad3      	subs	r3, r2, r3
 8007dda:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ddc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007dde:	b1f3      	cbz	r3, 8007e1e <_dtoa_r+0x79e>
 8007de0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	f000 80b7 	beq.w	8007f56 <_dtoa_r+0x8d6>
 8007de8:	b18c      	cbz	r4, 8007e0e <_dtoa_r+0x78e>
 8007dea:	4629      	mov	r1, r5
 8007dec:	4622      	mov	r2, r4
 8007dee:	4658      	mov	r0, fp
 8007df0:	f000 fd08 	bl	8008804 <__pow5mult>
 8007df4:	464a      	mov	r2, r9
 8007df6:	4601      	mov	r1, r0
 8007df8:	4605      	mov	r5, r0
 8007dfa:	4658      	mov	r0, fp
 8007dfc:	f000 fc5a 	bl	80086b4 <__multiply>
 8007e00:	4649      	mov	r1, r9
 8007e02:	9004      	str	r0, [sp, #16]
 8007e04:	4658      	mov	r0, fp
 8007e06:	f000 fb41 	bl	800848c <_Bfree>
 8007e0a:	9b04      	ldr	r3, [sp, #16]
 8007e0c:	4699      	mov	r9, r3
 8007e0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e10:	1b1a      	subs	r2, r3, r4
 8007e12:	d004      	beq.n	8007e1e <_dtoa_r+0x79e>
 8007e14:	4649      	mov	r1, r9
 8007e16:	4658      	mov	r0, fp
 8007e18:	f000 fcf4 	bl	8008804 <__pow5mult>
 8007e1c:	4681      	mov	r9, r0
 8007e1e:	2101      	movs	r1, #1
 8007e20:	4658      	mov	r0, fp
 8007e22:	f000 fc31 	bl	8008688 <__i2b>
 8007e26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e28:	4604      	mov	r4, r0
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	f000 81c9 	beq.w	80081c2 <_dtoa_r+0xb42>
 8007e30:	461a      	mov	r2, r3
 8007e32:	4601      	mov	r1, r0
 8007e34:	4658      	mov	r0, fp
 8007e36:	f000 fce5 	bl	8008804 <__pow5mult>
 8007e3a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007e3c:	4604      	mov	r4, r0
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	f300 808f 	bgt.w	8007f62 <_dtoa_r+0x8e2>
 8007e44:	9b02      	ldr	r3, [sp, #8]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	f040 8087 	bne.w	8007f5a <_dtoa_r+0x8da>
 8007e4c:	9b03      	ldr	r3, [sp, #12]
 8007e4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	f040 8083 	bne.w	8007f5e <_dtoa_r+0x8de>
 8007e58:	9b03      	ldr	r3, [sp, #12]
 8007e5a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007e5e:	0d1b      	lsrs	r3, r3, #20
 8007e60:	051b      	lsls	r3, r3, #20
 8007e62:	b12b      	cbz	r3, 8007e70 <_dtoa_r+0x7f0>
 8007e64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e66:	f108 0801 	add.w	r8, r8, #1
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e6e:	2301      	movs	r3, #1
 8007e70:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	f000 81aa 	beq.w	80081ce <_dtoa_r+0xb4e>
 8007e7a:	6923      	ldr	r3, [r4, #16]
 8007e7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007e80:	6918      	ldr	r0, [r3, #16]
 8007e82:	f000 fbb5 	bl	80085f0 <__hi0bits>
 8007e86:	f1c0 0020 	rsb	r0, r0, #32
 8007e8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e8c:	4418      	add	r0, r3
 8007e8e:	f010 001f 	ands.w	r0, r0, #31
 8007e92:	d071      	beq.n	8007f78 <_dtoa_r+0x8f8>
 8007e94:	f1c0 0320 	rsb	r3, r0, #32
 8007e98:	2b04      	cmp	r3, #4
 8007e9a:	dd65      	ble.n	8007f68 <_dtoa_r+0x8e8>
 8007e9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e9e:	f1c0 001c 	rsb	r0, r0, #28
 8007ea2:	4403      	add	r3, r0
 8007ea4:	4480      	add	r8, r0
 8007ea6:	4406      	add	r6, r0
 8007ea8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007eaa:	f1b8 0f00 	cmp.w	r8, #0
 8007eae:	dd05      	ble.n	8007ebc <_dtoa_r+0x83c>
 8007eb0:	4649      	mov	r1, r9
 8007eb2:	4642      	mov	r2, r8
 8007eb4:	4658      	mov	r0, fp
 8007eb6:	f000 fcff 	bl	80088b8 <__lshift>
 8007eba:	4681      	mov	r9, r0
 8007ebc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	dd05      	ble.n	8007ece <_dtoa_r+0x84e>
 8007ec2:	4621      	mov	r1, r4
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	4658      	mov	r0, fp
 8007ec8:	f000 fcf6 	bl	80088b8 <__lshift>
 8007ecc:	4604      	mov	r4, r0
 8007ece:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d053      	beq.n	8007f7c <_dtoa_r+0x8fc>
 8007ed4:	4621      	mov	r1, r4
 8007ed6:	4648      	mov	r0, r9
 8007ed8:	f000 fd5a 	bl	8008990 <__mcmp>
 8007edc:	2800      	cmp	r0, #0
 8007ede:	da4d      	bge.n	8007f7c <_dtoa_r+0x8fc>
 8007ee0:	1e7b      	subs	r3, r7, #1
 8007ee2:	4649      	mov	r1, r9
 8007ee4:	9304      	str	r3, [sp, #16]
 8007ee6:	220a      	movs	r2, #10
 8007ee8:	2300      	movs	r3, #0
 8007eea:	4658      	mov	r0, fp
 8007eec:	f000 faf0 	bl	80084d0 <__multadd>
 8007ef0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ef2:	4681      	mov	r9, r0
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	f000 816c 	beq.w	80081d2 <_dtoa_r+0xb52>
 8007efa:	2300      	movs	r3, #0
 8007efc:	4629      	mov	r1, r5
 8007efe:	220a      	movs	r2, #10
 8007f00:	4658      	mov	r0, fp
 8007f02:	f000 fae5 	bl	80084d0 <__multadd>
 8007f06:	9b08      	ldr	r3, [sp, #32]
 8007f08:	4605      	mov	r5, r0
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	dc61      	bgt.n	8007fd2 <_dtoa_r+0x952>
 8007f0e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007f10:	2b02      	cmp	r3, #2
 8007f12:	dc3b      	bgt.n	8007f8c <_dtoa_r+0x90c>
 8007f14:	e05d      	b.n	8007fd2 <_dtoa_r+0x952>
 8007f16:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007f18:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007f1c:	e746      	b.n	8007dac <_dtoa_r+0x72c>
 8007f1e:	9b07      	ldr	r3, [sp, #28]
 8007f20:	1e5c      	subs	r4, r3, #1
 8007f22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f24:	42a3      	cmp	r3, r4
 8007f26:	bfbf      	itttt	lt
 8007f28:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007f2a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8007f2c:	1ae3      	sublt	r3, r4, r3
 8007f2e:	18d2      	addlt	r2, r2, r3
 8007f30:	bfa8      	it	ge
 8007f32:	1b1c      	subge	r4, r3, r4
 8007f34:	9b07      	ldr	r3, [sp, #28]
 8007f36:	bfbe      	ittt	lt
 8007f38:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007f3a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8007f3c:	2400      	movlt	r4, #0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	bfb5      	itete	lt
 8007f42:	eba8 0603 	sublt.w	r6, r8, r3
 8007f46:	4646      	movge	r6, r8
 8007f48:	2300      	movlt	r3, #0
 8007f4a:	9b07      	ldrge	r3, [sp, #28]
 8007f4c:	e730      	b.n	8007db0 <_dtoa_r+0x730>
 8007f4e:	4646      	mov	r6, r8
 8007f50:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007f52:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007f54:	e735      	b.n	8007dc2 <_dtoa_r+0x742>
 8007f56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007f58:	e75c      	b.n	8007e14 <_dtoa_r+0x794>
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	e788      	b.n	8007e70 <_dtoa_r+0x7f0>
 8007f5e:	9b02      	ldr	r3, [sp, #8]
 8007f60:	e786      	b.n	8007e70 <_dtoa_r+0x7f0>
 8007f62:	2300      	movs	r3, #0
 8007f64:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f66:	e788      	b.n	8007e7a <_dtoa_r+0x7fa>
 8007f68:	d09f      	beq.n	8007eaa <_dtoa_r+0x82a>
 8007f6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f6c:	331c      	adds	r3, #28
 8007f6e:	441a      	add	r2, r3
 8007f70:	4498      	add	r8, r3
 8007f72:	441e      	add	r6, r3
 8007f74:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f76:	e798      	b.n	8007eaa <_dtoa_r+0x82a>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	e7f6      	b.n	8007f6a <_dtoa_r+0x8ea>
 8007f7c:	9b07      	ldr	r3, [sp, #28]
 8007f7e:	9704      	str	r7, [sp, #16]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	dc20      	bgt.n	8007fc6 <_dtoa_r+0x946>
 8007f84:	9308      	str	r3, [sp, #32]
 8007f86:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007f88:	2b02      	cmp	r3, #2
 8007f8a:	dd1e      	ble.n	8007fca <_dtoa_r+0x94a>
 8007f8c:	9b08      	ldr	r3, [sp, #32]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	f47f aebc 	bne.w	8007d0c <_dtoa_r+0x68c>
 8007f94:	4621      	mov	r1, r4
 8007f96:	2205      	movs	r2, #5
 8007f98:	4658      	mov	r0, fp
 8007f9a:	f000 fa99 	bl	80084d0 <__multadd>
 8007f9e:	4601      	mov	r1, r0
 8007fa0:	4604      	mov	r4, r0
 8007fa2:	4648      	mov	r0, r9
 8007fa4:	f000 fcf4 	bl	8008990 <__mcmp>
 8007fa8:	2800      	cmp	r0, #0
 8007faa:	f77f aeaf 	ble.w	8007d0c <_dtoa_r+0x68c>
 8007fae:	2331      	movs	r3, #49	@ 0x31
 8007fb0:	4656      	mov	r6, sl
 8007fb2:	f806 3b01 	strb.w	r3, [r6], #1
 8007fb6:	9b04      	ldr	r3, [sp, #16]
 8007fb8:	3301      	adds	r3, #1
 8007fba:	9304      	str	r3, [sp, #16]
 8007fbc:	e6aa      	b.n	8007d14 <_dtoa_r+0x694>
 8007fbe:	9c07      	ldr	r4, [sp, #28]
 8007fc0:	9704      	str	r7, [sp, #16]
 8007fc2:	4625      	mov	r5, r4
 8007fc4:	e7f3      	b.n	8007fae <_dtoa_r+0x92e>
 8007fc6:	9b07      	ldr	r3, [sp, #28]
 8007fc8:	9308      	str	r3, [sp, #32]
 8007fca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	f000 8104 	beq.w	80081da <_dtoa_r+0xb5a>
 8007fd2:	2e00      	cmp	r6, #0
 8007fd4:	dd05      	ble.n	8007fe2 <_dtoa_r+0x962>
 8007fd6:	4629      	mov	r1, r5
 8007fd8:	4632      	mov	r2, r6
 8007fda:	4658      	mov	r0, fp
 8007fdc:	f000 fc6c 	bl	80088b8 <__lshift>
 8007fe0:	4605      	mov	r5, r0
 8007fe2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d05a      	beq.n	800809e <_dtoa_r+0xa1e>
 8007fe8:	4658      	mov	r0, fp
 8007fea:	6869      	ldr	r1, [r5, #4]
 8007fec:	f000 fa0e 	bl	800840c <_Balloc>
 8007ff0:	4606      	mov	r6, r0
 8007ff2:	b928      	cbnz	r0, 8008000 <_dtoa_r+0x980>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007ffa:	4b83      	ldr	r3, [pc, #524]	@ (8008208 <_dtoa_r+0xb88>)
 8007ffc:	f7ff bb54 	b.w	80076a8 <_dtoa_r+0x28>
 8008000:	692a      	ldr	r2, [r5, #16]
 8008002:	f105 010c 	add.w	r1, r5, #12
 8008006:	3202      	adds	r2, #2
 8008008:	0092      	lsls	r2, r2, #2
 800800a:	300c      	adds	r0, #12
 800800c:	f001 ff5e 	bl	8009ecc <memcpy>
 8008010:	2201      	movs	r2, #1
 8008012:	4631      	mov	r1, r6
 8008014:	4658      	mov	r0, fp
 8008016:	f000 fc4f 	bl	80088b8 <__lshift>
 800801a:	462f      	mov	r7, r5
 800801c:	4605      	mov	r5, r0
 800801e:	f10a 0301 	add.w	r3, sl, #1
 8008022:	9307      	str	r3, [sp, #28]
 8008024:	9b08      	ldr	r3, [sp, #32]
 8008026:	4453      	add	r3, sl
 8008028:	930b      	str	r3, [sp, #44]	@ 0x2c
 800802a:	9b02      	ldr	r3, [sp, #8]
 800802c:	f003 0301 	and.w	r3, r3, #1
 8008030:	930a      	str	r3, [sp, #40]	@ 0x28
 8008032:	9b07      	ldr	r3, [sp, #28]
 8008034:	4621      	mov	r1, r4
 8008036:	3b01      	subs	r3, #1
 8008038:	4648      	mov	r0, r9
 800803a:	9302      	str	r3, [sp, #8]
 800803c:	f7ff fa98 	bl	8007570 <quorem>
 8008040:	4639      	mov	r1, r7
 8008042:	9008      	str	r0, [sp, #32]
 8008044:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008048:	4648      	mov	r0, r9
 800804a:	f000 fca1 	bl	8008990 <__mcmp>
 800804e:	462a      	mov	r2, r5
 8008050:	9009      	str	r0, [sp, #36]	@ 0x24
 8008052:	4621      	mov	r1, r4
 8008054:	4658      	mov	r0, fp
 8008056:	f000 fcb7 	bl	80089c8 <__mdiff>
 800805a:	68c2      	ldr	r2, [r0, #12]
 800805c:	4606      	mov	r6, r0
 800805e:	bb02      	cbnz	r2, 80080a2 <_dtoa_r+0xa22>
 8008060:	4601      	mov	r1, r0
 8008062:	4648      	mov	r0, r9
 8008064:	f000 fc94 	bl	8008990 <__mcmp>
 8008068:	4602      	mov	r2, r0
 800806a:	4631      	mov	r1, r6
 800806c:	4658      	mov	r0, fp
 800806e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008070:	f000 fa0c 	bl	800848c <_Bfree>
 8008074:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008076:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008078:	9e07      	ldr	r6, [sp, #28]
 800807a:	ea43 0102 	orr.w	r1, r3, r2
 800807e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008080:	4319      	orrs	r1, r3
 8008082:	d110      	bne.n	80080a6 <_dtoa_r+0xa26>
 8008084:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008088:	d029      	beq.n	80080de <_dtoa_r+0xa5e>
 800808a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800808c:	2b00      	cmp	r3, #0
 800808e:	dd02      	ble.n	8008096 <_dtoa_r+0xa16>
 8008090:	9b08      	ldr	r3, [sp, #32]
 8008092:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008096:	9b02      	ldr	r3, [sp, #8]
 8008098:	f883 8000 	strb.w	r8, [r3]
 800809c:	e63b      	b.n	8007d16 <_dtoa_r+0x696>
 800809e:	4628      	mov	r0, r5
 80080a0:	e7bb      	b.n	800801a <_dtoa_r+0x99a>
 80080a2:	2201      	movs	r2, #1
 80080a4:	e7e1      	b.n	800806a <_dtoa_r+0x9ea>
 80080a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	db04      	blt.n	80080b6 <_dtoa_r+0xa36>
 80080ac:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80080ae:	430b      	orrs	r3, r1
 80080b0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80080b2:	430b      	orrs	r3, r1
 80080b4:	d120      	bne.n	80080f8 <_dtoa_r+0xa78>
 80080b6:	2a00      	cmp	r2, #0
 80080b8:	dded      	ble.n	8008096 <_dtoa_r+0xa16>
 80080ba:	4649      	mov	r1, r9
 80080bc:	2201      	movs	r2, #1
 80080be:	4658      	mov	r0, fp
 80080c0:	f000 fbfa 	bl	80088b8 <__lshift>
 80080c4:	4621      	mov	r1, r4
 80080c6:	4681      	mov	r9, r0
 80080c8:	f000 fc62 	bl	8008990 <__mcmp>
 80080cc:	2800      	cmp	r0, #0
 80080ce:	dc03      	bgt.n	80080d8 <_dtoa_r+0xa58>
 80080d0:	d1e1      	bne.n	8008096 <_dtoa_r+0xa16>
 80080d2:	f018 0f01 	tst.w	r8, #1
 80080d6:	d0de      	beq.n	8008096 <_dtoa_r+0xa16>
 80080d8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80080dc:	d1d8      	bne.n	8008090 <_dtoa_r+0xa10>
 80080de:	2339      	movs	r3, #57	@ 0x39
 80080e0:	9a02      	ldr	r2, [sp, #8]
 80080e2:	7013      	strb	r3, [r2, #0]
 80080e4:	4633      	mov	r3, r6
 80080e6:	461e      	mov	r6, r3
 80080e8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80080ec:	3b01      	subs	r3, #1
 80080ee:	2a39      	cmp	r2, #57	@ 0x39
 80080f0:	d052      	beq.n	8008198 <_dtoa_r+0xb18>
 80080f2:	3201      	adds	r2, #1
 80080f4:	701a      	strb	r2, [r3, #0]
 80080f6:	e60e      	b.n	8007d16 <_dtoa_r+0x696>
 80080f8:	2a00      	cmp	r2, #0
 80080fa:	dd07      	ble.n	800810c <_dtoa_r+0xa8c>
 80080fc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008100:	d0ed      	beq.n	80080de <_dtoa_r+0xa5e>
 8008102:	9a02      	ldr	r2, [sp, #8]
 8008104:	f108 0301 	add.w	r3, r8, #1
 8008108:	7013      	strb	r3, [r2, #0]
 800810a:	e604      	b.n	8007d16 <_dtoa_r+0x696>
 800810c:	9b07      	ldr	r3, [sp, #28]
 800810e:	9a07      	ldr	r2, [sp, #28]
 8008110:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008114:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008116:	4293      	cmp	r3, r2
 8008118:	d028      	beq.n	800816c <_dtoa_r+0xaec>
 800811a:	4649      	mov	r1, r9
 800811c:	2300      	movs	r3, #0
 800811e:	220a      	movs	r2, #10
 8008120:	4658      	mov	r0, fp
 8008122:	f000 f9d5 	bl	80084d0 <__multadd>
 8008126:	42af      	cmp	r7, r5
 8008128:	4681      	mov	r9, r0
 800812a:	f04f 0300 	mov.w	r3, #0
 800812e:	f04f 020a 	mov.w	r2, #10
 8008132:	4639      	mov	r1, r7
 8008134:	4658      	mov	r0, fp
 8008136:	d107      	bne.n	8008148 <_dtoa_r+0xac8>
 8008138:	f000 f9ca 	bl	80084d0 <__multadd>
 800813c:	4607      	mov	r7, r0
 800813e:	4605      	mov	r5, r0
 8008140:	9b07      	ldr	r3, [sp, #28]
 8008142:	3301      	adds	r3, #1
 8008144:	9307      	str	r3, [sp, #28]
 8008146:	e774      	b.n	8008032 <_dtoa_r+0x9b2>
 8008148:	f000 f9c2 	bl	80084d0 <__multadd>
 800814c:	4629      	mov	r1, r5
 800814e:	4607      	mov	r7, r0
 8008150:	2300      	movs	r3, #0
 8008152:	220a      	movs	r2, #10
 8008154:	4658      	mov	r0, fp
 8008156:	f000 f9bb 	bl	80084d0 <__multadd>
 800815a:	4605      	mov	r5, r0
 800815c:	e7f0      	b.n	8008140 <_dtoa_r+0xac0>
 800815e:	9b08      	ldr	r3, [sp, #32]
 8008160:	2700      	movs	r7, #0
 8008162:	2b00      	cmp	r3, #0
 8008164:	bfcc      	ite	gt
 8008166:	461e      	movgt	r6, r3
 8008168:	2601      	movle	r6, #1
 800816a:	4456      	add	r6, sl
 800816c:	4649      	mov	r1, r9
 800816e:	2201      	movs	r2, #1
 8008170:	4658      	mov	r0, fp
 8008172:	f000 fba1 	bl	80088b8 <__lshift>
 8008176:	4621      	mov	r1, r4
 8008178:	4681      	mov	r9, r0
 800817a:	f000 fc09 	bl	8008990 <__mcmp>
 800817e:	2800      	cmp	r0, #0
 8008180:	dcb0      	bgt.n	80080e4 <_dtoa_r+0xa64>
 8008182:	d102      	bne.n	800818a <_dtoa_r+0xb0a>
 8008184:	f018 0f01 	tst.w	r8, #1
 8008188:	d1ac      	bne.n	80080e4 <_dtoa_r+0xa64>
 800818a:	4633      	mov	r3, r6
 800818c:	461e      	mov	r6, r3
 800818e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008192:	2a30      	cmp	r2, #48	@ 0x30
 8008194:	d0fa      	beq.n	800818c <_dtoa_r+0xb0c>
 8008196:	e5be      	b.n	8007d16 <_dtoa_r+0x696>
 8008198:	459a      	cmp	sl, r3
 800819a:	d1a4      	bne.n	80080e6 <_dtoa_r+0xa66>
 800819c:	9b04      	ldr	r3, [sp, #16]
 800819e:	3301      	adds	r3, #1
 80081a0:	9304      	str	r3, [sp, #16]
 80081a2:	2331      	movs	r3, #49	@ 0x31
 80081a4:	f88a 3000 	strb.w	r3, [sl]
 80081a8:	e5b5      	b.n	8007d16 <_dtoa_r+0x696>
 80081aa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80081ac:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800820c <_dtoa_r+0xb8c>
 80081b0:	b11b      	cbz	r3, 80081ba <_dtoa_r+0xb3a>
 80081b2:	f10a 0308 	add.w	r3, sl, #8
 80081b6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80081b8:	6013      	str	r3, [r2, #0]
 80081ba:	4650      	mov	r0, sl
 80081bc:	b017      	add	sp, #92	@ 0x5c
 80081be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081c2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	f77f ae3d 	ble.w	8007e44 <_dtoa_r+0x7c4>
 80081ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80081ce:	2001      	movs	r0, #1
 80081d0:	e65b      	b.n	8007e8a <_dtoa_r+0x80a>
 80081d2:	9b08      	ldr	r3, [sp, #32]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	f77f aed6 	ble.w	8007f86 <_dtoa_r+0x906>
 80081da:	4656      	mov	r6, sl
 80081dc:	4621      	mov	r1, r4
 80081de:	4648      	mov	r0, r9
 80081e0:	f7ff f9c6 	bl	8007570 <quorem>
 80081e4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80081e8:	9b08      	ldr	r3, [sp, #32]
 80081ea:	f806 8b01 	strb.w	r8, [r6], #1
 80081ee:	eba6 020a 	sub.w	r2, r6, sl
 80081f2:	4293      	cmp	r3, r2
 80081f4:	ddb3      	ble.n	800815e <_dtoa_r+0xade>
 80081f6:	4649      	mov	r1, r9
 80081f8:	2300      	movs	r3, #0
 80081fa:	220a      	movs	r2, #10
 80081fc:	4658      	mov	r0, fp
 80081fe:	f000 f967 	bl	80084d0 <__multadd>
 8008202:	4681      	mov	r9, r0
 8008204:	e7ea      	b.n	80081dc <_dtoa_r+0xb5c>
 8008206:	bf00      	nop
 8008208:	0800adc7 	.word	0x0800adc7
 800820c:	0800ad4b 	.word	0x0800ad4b

08008210 <_free_r>:
 8008210:	b538      	push	{r3, r4, r5, lr}
 8008212:	4605      	mov	r5, r0
 8008214:	2900      	cmp	r1, #0
 8008216:	d040      	beq.n	800829a <_free_r+0x8a>
 8008218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800821c:	1f0c      	subs	r4, r1, #4
 800821e:	2b00      	cmp	r3, #0
 8008220:	bfb8      	it	lt
 8008222:	18e4      	addlt	r4, r4, r3
 8008224:	f000 f8e6 	bl	80083f4 <__malloc_lock>
 8008228:	4a1c      	ldr	r2, [pc, #112]	@ (800829c <_free_r+0x8c>)
 800822a:	6813      	ldr	r3, [r2, #0]
 800822c:	b933      	cbnz	r3, 800823c <_free_r+0x2c>
 800822e:	6063      	str	r3, [r4, #4]
 8008230:	6014      	str	r4, [r2, #0]
 8008232:	4628      	mov	r0, r5
 8008234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008238:	f000 b8e2 	b.w	8008400 <__malloc_unlock>
 800823c:	42a3      	cmp	r3, r4
 800823e:	d908      	bls.n	8008252 <_free_r+0x42>
 8008240:	6820      	ldr	r0, [r4, #0]
 8008242:	1821      	adds	r1, r4, r0
 8008244:	428b      	cmp	r3, r1
 8008246:	bf01      	itttt	eq
 8008248:	6819      	ldreq	r1, [r3, #0]
 800824a:	685b      	ldreq	r3, [r3, #4]
 800824c:	1809      	addeq	r1, r1, r0
 800824e:	6021      	streq	r1, [r4, #0]
 8008250:	e7ed      	b.n	800822e <_free_r+0x1e>
 8008252:	461a      	mov	r2, r3
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	b10b      	cbz	r3, 800825c <_free_r+0x4c>
 8008258:	42a3      	cmp	r3, r4
 800825a:	d9fa      	bls.n	8008252 <_free_r+0x42>
 800825c:	6811      	ldr	r1, [r2, #0]
 800825e:	1850      	adds	r0, r2, r1
 8008260:	42a0      	cmp	r0, r4
 8008262:	d10b      	bne.n	800827c <_free_r+0x6c>
 8008264:	6820      	ldr	r0, [r4, #0]
 8008266:	4401      	add	r1, r0
 8008268:	1850      	adds	r0, r2, r1
 800826a:	4283      	cmp	r3, r0
 800826c:	6011      	str	r1, [r2, #0]
 800826e:	d1e0      	bne.n	8008232 <_free_r+0x22>
 8008270:	6818      	ldr	r0, [r3, #0]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	4408      	add	r0, r1
 8008276:	6010      	str	r0, [r2, #0]
 8008278:	6053      	str	r3, [r2, #4]
 800827a:	e7da      	b.n	8008232 <_free_r+0x22>
 800827c:	d902      	bls.n	8008284 <_free_r+0x74>
 800827e:	230c      	movs	r3, #12
 8008280:	602b      	str	r3, [r5, #0]
 8008282:	e7d6      	b.n	8008232 <_free_r+0x22>
 8008284:	6820      	ldr	r0, [r4, #0]
 8008286:	1821      	adds	r1, r4, r0
 8008288:	428b      	cmp	r3, r1
 800828a:	bf01      	itttt	eq
 800828c:	6819      	ldreq	r1, [r3, #0]
 800828e:	685b      	ldreq	r3, [r3, #4]
 8008290:	1809      	addeq	r1, r1, r0
 8008292:	6021      	streq	r1, [r4, #0]
 8008294:	6063      	str	r3, [r4, #4]
 8008296:	6054      	str	r4, [r2, #4]
 8008298:	e7cb      	b.n	8008232 <_free_r+0x22>
 800829a:	bd38      	pop	{r3, r4, r5, pc}
 800829c:	200005b4 	.word	0x200005b4

080082a0 <malloc>:
 80082a0:	4b02      	ldr	r3, [pc, #8]	@ (80082ac <malloc+0xc>)
 80082a2:	4601      	mov	r1, r0
 80082a4:	6818      	ldr	r0, [r3, #0]
 80082a6:	f000 b825 	b.w	80082f4 <_malloc_r>
 80082aa:	bf00      	nop
 80082ac:	20000018 	.word	0x20000018

080082b0 <sbrk_aligned>:
 80082b0:	b570      	push	{r4, r5, r6, lr}
 80082b2:	4e0f      	ldr	r6, [pc, #60]	@ (80082f0 <sbrk_aligned+0x40>)
 80082b4:	460c      	mov	r4, r1
 80082b6:	6831      	ldr	r1, [r6, #0]
 80082b8:	4605      	mov	r5, r0
 80082ba:	b911      	cbnz	r1, 80082c2 <sbrk_aligned+0x12>
 80082bc:	f001 fdf6 	bl	8009eac <_sbrk_r>
 80082c0:	6030      	str	r0, [r6, #0]
 80082c2:	4621      	mov	r1, r4
 80082c4:	4628      	mov	r0, r5
 80082c6:	f001 fdf1 	bl	8009eac <_sbrk_r>
 80082ca:	1c43      	adds	r3, r0, #1
 80082cc:	d103      	bne.n	80082d6 <sbrk_aligned+0x26>
 80082ce:	f04f 34ff 	mov.w	r4, #4294967295
 80082d2:	4620      	mov	r0, r4
 80082d4:	bd70      	pop	{r4, r5, r6, pc}
 80082d6:	1cc4      	adds	r4, r0, #3
 80082d8:	f024 0403 	bic.w	r4, r4, #3
 80082dc:	42a0      	cmp	r0, r4
 80082de:	d0f8      	beq.n	80082d2 <sbrk_aligned+0x22>
 80082e0:	1a21      	subs	r1, r4, r0
 80082e2:	4628      	mov	r0, r5
 80082e4:	f001 fde2 	bl	8009eac <_sbrk_r>
 80082e8:	3001      	adds	r0, #1
 80082ea:	d1f2      	bne.n	80082d2 <sbrk_aligned+0x22>
 80082ec:	e7ef      	b.n	80082ce <sbrk_aligned+0x1e>
 80082ee:	bf00      	nop
 80082f0:	200005b0 	.word	0x200005b0

080082f4 <_malloc_r>:
 80082f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082f8:	1ccd      	adds	r5, r1, #3
 80082fa:	f025 0503 	bic.w	r5, r5, #3
 80082fe:	3508      	adds	r5, #8
 8008300:	2d0c      	cmp	r5, #12
 8008302:	bf38      	it	cc
 8008304:	250c      	movcc	r5, #12
 8008306:	2d00      	cmp	r5, #0
 8008308:	4606      	mov	r6, r0
 800830a:	db01      	blt.n	8008310 <_malloc_r+0x1c>
 800830c:	42a9      	cmp	r1, r5
 800830e:	d904      	bls.n	800831a <_malloc_r+0x26>
 8008310:	230c      	movs	r3, #12
 8008312:	6033      	str	r3, [r6, #0]
 8008314:	2000      	movs	r0, #0
 8008316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800831a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80083f0 <_malloc_r+0xfc>
 800831e:	f000 f869 	bl	80083f4 <__malloc_lock>
 8008322:	f8d8 3000 	ldr.w	r3, [r8]
 8008326:	461c      	mov	r4, r3
 8008328:	bb44      	cbnz	r4, 800837c <_malloc_r+0x88>
 800832a:	4629      	mov	r1, r5
 800832c:	4630      	mov	r0, r6
 800832e:	f7ff ffbf 	bl	80082b0 <sbrk_aligned>
 8008332:	1c43      	adds	r3, r0, #1
 8008334:	4604      	mov	r4, r0
 8008336:	d158      	bne.n	80083ea <_malloc_r+0xf6>
 8008338:	f8d8 4000 	ldr.w	r4, [r8]
 800833c:	4627      	mov	r7, r4
 800833e:	2f00      	cmp	r7, #0
 8008340:	d143      	bne.n	80083ca <_malloc_r+0xd6>
 8008342:	2c00      	cmp	r4, #0
 8008344:	d04b      	beq.n	80083de <_malloc_r+0xea>
 8008346:	6823      	ldr	r3, [r4, #0]
 8008348:	4639      	mov	r1, r7
 800834a:	4630      	mov	r0, r6
 800834c:	eb04 0903 	add.w	r9, r4, r3
 8008350:	f001 fdac 	bl	8009eac <_sbrk_r>
 8008354:	4581      	cmp	r9, r0
 8008356:	d142      	bne.n	80083de <_malloc_r+0xea>
 8008358:	6821      	ldr	r1, [r4, #0]
 800835a:	4630      	mov	r0, r6
 800835c:	1a6d      	subs	r5, r5, r1
 800835e:	4629      	mov	r1, r5
 8008360:	f7ff ffa6 	bl	80082b0 <sbrk_aligned>
 8008364:	3001      	adds	r0, #1
 8008366:	d03a      	beq.n	80083de <_malloc_r+0xea>
 8008368:	6823      	ldr	r3, [r4, #0]
 800836a:	442b      	add	r3, r5
 800836c:	6023      	str	r3, [r4, #0]
 800836e:	f8d8 3000 	ldr.w	r3, [r8]
 8008372:	685a      	ldr	r2, [r3, #4]
 8008374:	bb62      	cbnz	r2, 80083d0 <_malloc_r+0xdc>
 8008376:	f8c8 7000 	str.w	r7, [r8]
 800837a:	e00f      	b.n	800839c <_malloc_r+0xa8>
 800837c:	6822      	ldr	r2, [r4, #0]
 800837e:	1b52      	subs	r2, r2, r5
 8008380:	d420      	bmi.n	80083c4 <_malloc_r+0xd0>
 8008382:	2a0b      	cmp	r2, #11
 8008384:	d917      	bls.n	80083b6 <_malloc_r+0xc2>
 8008386:	1961      	adds	r1, r4, r5
 8008388:	42a3      	cmp	r3, r4
 800838a:	6025      	str	r5, [r4, #0]
 800838c:	bf18      	it	ne
 800838e:	6059      	strne	r1, [r3, #4]
 8008390:	6863      	ldr	r3, [r4, #4]
 8008392:	bf08      	it	eq
 8008394:	f8c8 1000 	streq.w	r1, [r8]
 8008398:	5162      	str	r2, [r4, r5]
 800839a:	604b      	str	r3, [r1, #4]
 800839c:	4630      	mov	r0, r6
 800839e:	f000 f82f 	bl	8008400 <__malloc_unlock>
 80083a2:	f104 000b 	add.w	r0, r4, #11
 80083a6:	1d23      	adds	r3, r4, #4
 80083a8:	f020 0007 	bic.w	r0, r0, #7
 80083ac:	1ac2      	subs	r2, r0, r3
 80083ae:	bf1c      	itt	ne
 80083b0:	1a1b      	subne	r3, r3, r0
 80083b2:	50a3      	strne	r3, [r4, r2]
 80083b4:	e7af      	b.n	8008316 <_malloc_r+0x22>
 80083b6:	6862      	ldr	r2, [r4, #4]
 80083b8:	42a3      	cmp	r3, r4
 80083ba:	bf0c      	ite	eq
 80083bc:	f8c8 2000 	streq.w	r2, [r8]
 80083c0:	605a      	strne	r2, [r3, #4]
 80083c2:	e7eb      	b.n	800839c <_malloc_r+0xa8>
 80083c4:	4623      	mov	r3, r4
 80083c6:	6864      	ldr	r4, [r4, #4]
 80083c8:	e7ae      	b.n	8008328 <_malloc_r+0x34>
 80083ca:	463c      	mov	r4, r7
 80083cc:	687f      	ldr	r7, [r7, #4]
 80083ce:	e7b6      	b.n	800833e <_malloc_r+0x4a>
 80083d0:	461a      	mov	r2, r3
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	42a3      	cmp	r3, r4
 80083d6:	d1fb      	bne.n	80083d0 <_malloc_r+0xdc>
 80083d8:	2300      	movs	r3, #0
 80083da:	6053      	str	r3, [r2, #4]
 80083dc:	e7de      	b.n	800839c <_malloc_r+0xa8>
 80083de:	230c      	movs	r3, #12
 80083e0:	4630      	mov	r0, r6
 80083e2:	6033      	str	r3, [r6, #0]
 80083e4:	f000 f80c 	bl	8008400 <__malloc_unlock>
 80083e8:	e794      	b.n	8008314 <_malloc_r+0x20>
 80083ea:	6005      	str	r5, [r0, #0]
 80083ec:	e7d6      	b.n	800839c <_malloc_r+0xa8>
 80083ee:	bf00      	nop
 80083f0:	200005b4 	.word	0x200005b4

080083f4 <__malloc_lock>:
 80083f4:	4801      	ldr	r0, [pc, #4]	@ (80083fc <__malloc_lock+0x8>)
 80083f6:	f7ff b8a6 	b.w	8007546 <__retarget_lock_acquire_recursive>
 80083fa:	bf00      	nop
 80083fc:	200005ac 	.word	0x200005ac

08008400 <__malloc_unlock>:
 8008400:	4801      	ldr	r0, [pc, #4]	@ (8008408 <__malloc_unlock+0x8>)
 8008402:	f7ff b8a1 	b.w	8007548 <__retarget_lock_release_recursive>
 8008406:	bf00      	nop
 8008408:	200005ac 	.word	0x200005ac

0800840c <_Balloc>:
 800840c:	b570      	push	{r4, r5, r6, lr}
 800840e:	69c6      	ldr	r6, [r0, #28]
 8008410:	4604      	mov	r4, r0
 8008412:	460d      	mov	r5, r1
 8008414:	b976      	cbnz	r6, 8008434 <_Balloc+0x28>
 8008416:	2010      	movs	r0, #16
 8008418:	f7ff ff42 	bl	80082a0 <malloc>
 800841c:	4602      	mov	r2, r0
 800841e:	61e0      	str	r0, [r4, #28]
 8008420:	b920      	cbnz	r0, 800842c <_Balloc+0x20>
 8008422:	216b      	movs	r1, #107	@ 0x6b
 8008424:	4b17      	ldr	r3, [pc, #92]	@ (8008484 <_Balloc+0x78>)
 8008426:	4818      	ldr	r0, [pc, #96]	@ (8008488 <_Balloc+0x7c>)
 8008428:	f001 fd64 	bl	8009ef4 <__assert_func>
 800842c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008430:	6006      	str	r6, [r0, #0]
 8008432:	60c6      	str	r6, [r0, #12]
 8008434:	69e6      	ldr	r6, [r4, #28]
 8008436:	68f3      	ldr	r3, [r6, #12]
 8008438:	b183      	cbz	r3, 800845c <_Balloc+0x50>
 800843a:	69e3      	ldr	r3, [r4, #28]
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008442:	b9b8      	cbnz	r0, 8008474 <_Balloc+0x68>
 8008444:	2101      	movs	r1, #1
 8008446:	fa01 f605 	lsl.w	r6, r1, r5
 800844a:	1d72      	adds	r2, r6, #5
 800844c:	4620      	mov	r0, r4
 800844e:	0092      	lsls	r2, r2, #2
 8008450:	f001 fd6e 	bl	8009f30 <_calloc_r>
 8008454:	b160      	cbz	r0, 8008470 <_Balloc+0x64>
 8008456:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800845a:	e00e      	b.n	800847a <_Balloc+0x6e>
 800845c:	2221      	movs	r2, #33	@ 0x21
 800845e:	2104      	movs	r1, #4
 8008460:	4620      	mov	r0, r4
 8008462:	f001 fd65 	bl	8009f30 <_calloc_r>
 8008466:	69e3      	ldr	r3, [r4, #28]
 8008468:	60f0      	str	r0, [r6, #12]
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d1e4      	bne.n	800843a <_Balloc+0x2e>
 8008470:	2000      	movs	r0, #0
 8008472:	bd70      	pop	{r4, r5, r6, pc}
 8008474:	6802      	ldr	r2, [r0, #0]
 8008476:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800847a:	2300      	movs	r3, #0
 800847c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008480:	e7f7      	b.n	8008472 <_Balloc+0x66>
 8008482:	bf00      	nop
 8008484:	0800ad58 	.word	0x0800ad58
 8008488:	0800add8 	.word	0x0800add8

0800848c <_Bfree>:
 800848c:	b570      	push	{r4, r5, r6, lr}
 800848e:	69c6      	ldr	r6, [r0, #28]
 8008490:	4605      	mov	r5, r0
 8008492:	460c      	mov	r4, r1
 8008494:	b976      	cbnz	r6, 80084b4 <_Bfree+0x28>
 8008496:	2010      	movs	r0, #16
 8008498:	f7ff ff02 	bl	80082a0 <malloc>
 800849c:	4602      	mov	r2, r0
 800849e:	61e8      	str	r0, [r5, #28]
 80084a0:	b920      	cbnz	r0, 80084ac <_Bfree+0x20>
 80084a2:	218f      	movs	r1, #143	@ 0x8f
 80084a4:	4b08      	ldr	r3, [pc, #32]	@ (80084c8 <_Bfree+0x3c>)
 80084a6:	4809      	ldr	r0, [pc, #36]	@ (80084cc <_Bfree+0x40>)
 80084a8:	f001 fd24 	bl	8009ef4 <__assert_func>
 80084ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084b0:	6006      	str	r6, [r0, #0]
 80084b2:	60c6      	str	r6, [r0, #12]
 80084b4:	b13c      	cbz	r4, 80084c6 <_Bfree+0x3a>
 80084b6:	69eb      	ldr	r3, [r5, #28]
 80084b8:	6862      	ldr	r2, [r4, #4]
 80084ba:	68db      	ldr	r3, [r3, #12]
 80084bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80084c0:	6021      	str	r1, [r4, #0]
 80084c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80084c6:	bd70      	pop	{r4, r5, r6, pc}
 80084c8:	0800ad58 	.word	0x0800ad58
 80084cc:	0800add8 	.word	0x0800add8

080084d0 <__multadd>:
 80084d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084d4:	4607      	mov	r7, r0
 80084d6:	460c      	mov	r4, r1
 80084d8:	461e      	mov	r6, r3
 80084da:	2000      	movs	r0, #0
 80084dc:	690d      	ldr	r5, [r1, #16]
 80084de:	f101 0c14 	add.w	ip, r1, #20
 80084e2:	f8dc 3000 	ldr.w	r3, [ip]
 80084e6:	3001      	adds	r0, #1
 80084e8:	b299      	uxth	r1, r3
 80084ea:	fb02 6101 	mla	r1, r2, r1, r6
 80084ee:	0c1e      	lsrs	r6, r3, #16
 80084f0:	0c0b      	lsrs	r3, r1, #16
 80084f2:	fb02 3306 	mla	r3, r2, r6, r3
 80084f6:	b289      	uxth	r1, r1
 80084f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80084fc:	4285      	cmp	r5, r0
 80084fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008502:	f84c 1b04 	str.w	r1, [ip], #4
 8008506:	dcec      	bgt.n	80084e2 <__multadd+0x12>
 8008508:	b30e      	cbz	r6, 800854e <__multadd+0x7e>
 800850a:	68a3      	ldr	r3, [r4, #8]
 800850c:	42ab      	cmp	r3, r5
 800850e:	dc19      	bgt.n	8008544 <__multadd+0x74>
 8008510:	6861      	ldr	r1, [r4, #4]
 8008512:	4638      	mov	r0, r7
 8008514:	3101      	adds	r1, #1
 8008516:	f7ff ff79 	bl	800840c <_Balloc>
 800851a:	4680      	mov	r8, r0
 800851c:	b928      	cbnz	r0, 800852a <__multadd+0x5a>
 800851e:	4602      	mov	r2, r0
 8008520:	21ba      	movs	r1, #186	@ 0xba
 8008522:	4b0c      	ldr	r3, [pc, #48]	@ (8008554 <__multadd+0x84>)
 8008524:	480c      	ldr	r0, [pc, #48]	@ (8008558 <__multadd+0x88>)
 8008526:	f001 fce5 	bl	8009ef4 <__assert_func>
 800852a:	6922      	ldr	r2, [r4, #16]
 800852c:	f104 010c 	add.w	r1, r4, #12
 8008530:	3202      	adds	r2, #2
 8008532:	0092      	lsls	r2, r2, #2
 8008534:	300c      	adds	r0, #12
 8008536:	f001 fcc9 	bl	8009ecc <memcpy>
 800853a:	4621      	mov	r1, r4
 800853c:	4638      	mov	r0, r7
 800853e:	f7ff ffa5 	bl	800848c <_Bfree>
 8008542:	4644      	mov	r4, r8
 8008544:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008548:	3501      	adds	r5, #1
 800854a:	615e      	str	r6, [r3, #20]
 800854c:	6125      	str	r5, [r4, #16]
 800854e:	4620      	mov	r0, r4
 8008550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008554:	0800adc7 	.word	0x0800adc7
 8008558:	0800add8 	.word	0x0800add8

0800855c <__s2b>:
 800855c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008560:	4615      	mov	r5, r2
 8008562:	2209      	movs	r2, #9
 8008564:	461f      	mov	r7, r3
 8008566:	3308      	adds	r3, #8
 8008568:	460c      	mov	r4, r1
 800856a:	fb93 f3f2 	sdiv	r3, r3, r2
 800856e:	4606      	mov	r6, r0
 8008570:	2201      	movs	r2, #1
 8008572:	2100      	movs	r1, #0
 8008574:	429a      	cmp	r2, r3
 8008576:	db09      	blt.n	800858c <__s2b+0x30>
 8008578:	4630      	mov	r0, r6
 800857a:	f7ff ff47 	bl	800840c <_Balloc>
 800857e:	b940      	cbnz	r0, 8008592 <__s2b+0x36>
 8008580:	4602      	mov	r2, r0
 8008582:	21d3      	movs	r1, #211	@ 0xd3
 8008584:	4b18      	ldr	r3, [pc, #96]	@ (80085e8 <__s2b+0x8c>)
 8008586:	4819      	ldr	r0, [pc, #100]	@ (80085ec <__s2b+0x90>)
 8008588:	f001 fcb4 	bl	8009ef4 <__assert_func>
 800858c:	0052      	lsls	r2, r2, #1
 800858e:	3101      	adds	r1, #1
 8008590:	e7f0      	b.n	8008574 <__s2b+0x18>
 8008592:	9b08      	ldr	r3, [sp, #32]
 8008594:	2d09      	cmp	r5, #9
 8008596:	6143      	str	r3, [r0, #20]
 8008598:	f04f 0301 	mov.w	r3, #1
 800859c:	6103      	str	r3, [r0, #16]
 800859e:	dd16      	ble.n	80085ce <__s2b+0x72>
 80085a0:	f104 0909 	add.w	r9, r4, #9
 80085a4:	46c8      	mov	r8, r9
 80085a6:	442c      	add	r4, r5
 80085a8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80085ac:	4601      	mov	r1, r0
 80085ae:	220a      	movs	r2, #10
 80085b0:	4630      	mov	r0, r6
 80085b2:	3b30      	subs	r3, #48	@ 0x30
 80085b4:	f7ff ff8c 	bl	80084d0 <__multadd>
 80085b8:	45a0      	cmp	r8, r4
 80085ba:	d1f5      	bne.n	80085a8 <__s2b+0x4c>
 80085bc:	f1a5 0408 	sub.w	r4, r5, #8
 80085c0:	444c      	add	r4, r9
 80085c2:	1b2d      	subs	r5, r5, r4
 80085c4:	1963      	adds	r3, r4, r5
 80085c6:	42bb      	cmp	r3, r7
 80085c8:	db04      	blt.n	80085d4 <__s2b+0x78>
 80085ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085ce:	2509      	movs	r5, #9
 80085d0:	340a      	adds	r4, #10
 80085d2:	e7f6      	b.n	80085c2 <__s2b+0x66>
 80085d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80085d8:	4601      	mov	r1, r0
 80085da:	220a      	movs	r2, #10
 80085dc:	4630      	mov	r0, r6
 80085de:	3b30      	subs	r3, #48	@ 0x30
 80085e0:	f7ff ff76 	bl	80084d0 <__multadd>
 80085e4:	e7ee      	b.n	80085c4 <__s2b+0x68>
 80085e6:	bf00      	nop
 80085e8:	0800adc7 	.word	0x0800adc7
 80085ec:	0800add8 	.word	0x0800add8

080085f0 <__hi0bits>:
 80085f0:	4603      	mov	r3, r0
 80085f2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80085f6:	bf3a      	itte	cc
 80085f8:	0403      	lslcc	r3, r0, #16
 80085fa:	2010      	movcc	r0, #16
 80085fc:	2000      	movcs	r0, #0
 80085fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008602:	bf3c      	itt	cc
 8008604:	021b      	lslcc	r3, r3, #8
 8008606:	3008      	addcc	r0, #8
 8008608:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800860c:	bf3c      	itt	cc
 800860e:	011b      	lslcc	r3, r3, #4
 8008610:	3004      	addcc	r0, #4
 8008612:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008616:	bf3c      	itt	cc
 8008618:	009b      	lslcc	r3, r3, #2
 800861a:	3002      	addcc	r0, #2
 800861c:	2b00      	cmp	r3, #0
 800861e:	db05      	blt.n	800862c <__hi0bits+0x3c>
 8008620:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008624:	f100 0001 	add.w	r0, r0, #1
 8008628:	bf08      	it	eq
 800862a:	2020      	moveq	r0, #32
 800862c:	4770      	bx	lr

0800862e <__lo0bits>:
 800862e:	6803      	ldr	r3, [r0, #0]
 8008630:	4602      	mov	r2, r0
 8008632:	f013 0007 	ands.w	r0, r3, #7
 8008636:	d00b      	beq.n	8008650 <__lo0bits+0x22>
 8008638:	07d9      	lsls	r1, r3, #31
 800863a:	d421      	bmi.n	8008680 <__lo0bits+0x52>
 800863c:	0798      	lsls	r0, r3, #30
 800863e:	bf49      	itett	mi
 8008640:	085b      	lsrmi	r3, r3, #1
 8008642:	089b      	lsrpl	r3, r3, #2
 8008644:	2001      	movmi	r0, #1
 8008646:	6013      	strmi	r3, [r2, #0]
 8008648:	bf5c      	itt	pl
 800864a:	2002      	movpl	r0, #2
 800864c:	6013      	strpl	r3, [r2, #0]
 800864e:	4770      	bx	lr
 8008650:	b299      	uxth	r1, r3
 8008652:	b909      	cbnz	r1, 8008658 <__lo0bits+0x2a>
 8008654:	2010      	movs	r0, #16
 8008656:	0c1b      	lsrs	r3, r3, #16
 8008658:	b2d9      	uxtb	r1, r3
 800865a:	b909      	cbnz	r1, 8008660 <__lo0bits+0x32>
 800865c:	3008      	adds	r0, #8
 800865e:	0a1b      	lsrs	r3, r3, #8
 8008660:	0719      	lsls	r1, r3, #28
 8008662:	bf04      	itt	eq
 8008664:	091b      	lsreq	r3, r3, #4
 8008666:	3004      	addeq	r0, #4
 8008668:	0799      	lsls	r1, r3, #30
 800866a:	bf04      	itt	eq
 800866c:	089b      	lsreq	r3, r3, #2
 800866e:	3002      	addeq	r0, #2
 8008670:	07d9      	lsls	r1, r3, #31
 8008672:	d403      	bmi.n	800867c <__lo0bits+0x4e>
 8008674:	085b      	lsrs	r3, r3, #1
 8008676:	f100 0001 	add.w	r0, r0, #1
 800867a:	d003      	beq.n	8008684 <__lo0bits+0x56>
 800867c:	6013      	str	r3, [r2, #0]
 800867e:	4770      	bx	lr
 8008680:	2000      	movs	r0, #0
 8008682:	4770      	bx	lr
 8008684:	2020      	movs	r0, #32
 8008686:	4770      	bx	lr

08008688 <__i2b>:
 8008688:	b510      	push	{r4, lr}
 800868a:	460c      	mov	r4, r1
 800868c:	2101      	movs	r1, #1
 800868e:	f7ff febd 	bl	800840c <_Balloc>
 8008692:	4602      	mov	r2, r0
 8008694:	b928      	cbnz	r0, 80086a2 <__i2b+0x1a>
 8008696:	f240 1145 	movw	r1, #325	@ 0x145
 800869a:	4b04      	ldr	r3, [pc, #16]	@ (80086ac <__i2b+0x24>)
 800869c:	4804      	ldr	r0, [pc, #16]	@ (80086b0 <__i2b+0x28>)
 800869e:	f001 fc29 	bl	8009ef4 <__assert_func>
 80086a2:	2301      	movs	r3, #1
 80086a4:	6144      	str	r4, [r0, #20]
 80086a6:	6103      	str	r3, [r0, #16]
 80086a8:	bd10      	pop	{r4, pc}
 80086aa:	bf00      	nop
 80086ac:	0800adc7 	.word	0x0800adc7
 80086b0:	0800add8 	.word	0x0800add8

080086b4 <__multiply>:
 80086b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086b8:	4614      	mov	r4, r2
 80086ba:	690a      	ldr	r2, [r1, #16]
 80086bc:	6923      	ldr	r3, [r4, #16]
 80086be:	460f      	mov	r7, r1
 80086c0:	429a      	cmp	r2, r3
 80086c2:	bfa2      	ittt	ge
 80086c4:	4623      	movge	r3, r4
 80086c6:	460c      	movge	r4, r1
 80086c8:	461f      	movge	r7, r3
 80086ca:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80086ce:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80086d2:	68a3      	ldr	r3, [r4, #8]
 80086d4:	6861      	ldr	r1, [r4, #4]
 80086d6:	eb0a 0609 	add.w	r6, sl, r9
 80086da:	42b3      	cmp	r3, r6
 80086dc:	b085      	sub	sp, #20
 80086de:	bfb8      	it	lt
 80086e0:	3101      	addlt	r1, #1
 80086e2:	f7ff fe93 	bl	800840c <_Balloc>
 80086e6:	b930      	cbnz	r0, 80086f6 <__multiply+0x42>
 80086e8:	4602      	mov	r2, r0
 80086ea:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80086ee:	4b43      	ldr	r3, [pc, #268]	@ (80087fc <__multiply+0x148>)
 80086f0:	4843      	ldr	r0, [pc, #268]	@ (8008800 <__multiply+0x14c>)
 80086f2:	f001 fbff 	bl	8009ef4 <__assert_func>
 80086f6:	f100 0514 	add.w	r5, r0, #20
 80086fa:	462b      	mov	r3, r5
 80086fc:	2200      	movs	r2, #0
 80086fe:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008702:	4543      	cmp	r3, r8
 8008704:	d321      	bcc.n	800874a <__multiply+0x96>
 8008706:	f107 0114 	add.w	r1, r7, #20
 800870a:	f104 0214 	add.w	r2, r4, #20
 800870e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008712:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008716:	9302      	str	r3, [sp, #8]
 8008718:	1b13      	subs	r3, r2, r4
 800871a:	3b15      	subs	r3, #21
 800871c:	f023 0303 	bic.w	r3, r3, #3
 8008720:	3304      	adds	r3, #4
 8008722:	f104 0715 	add.w	r7, r4, #21
 8008726:	42ba      	cmp	r2, r7
 8008728:	bf38      	it	cc
 800872a:	2304      	movcc	r3, #4
 800872c:	9301      	str	r3, [sp, #4]
 800872e:	9b02      	ldr	r3, [sp, #8]
 8008730:	9103      	str	r1, [sp, #12]
 8008732:	428b      	cmp	r3, r1
 8008734:	d80c      	bhi.n	8008750 <__multiply+0x9c>
 8008736:	2e00      	cmp	r6, #0
 8008738:	dd03      	ble.n	8008742 <__multiply+0x8e>
 800873a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800873e:	2b00      	cmp	r3, #0
 8008740:	d05a      	beq.n	80087f8 <__multiply+0x144>
 8008742:	6106      	str	r6, [r0, #16]
 8008744:	b005      	add	sp, #20
 8008746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800874a:	f843 2b04 	str.w	r2, [r3], #4
 800874e:	e7d8      	b.n	8008702 <__multiply+0x4e>
 8008750:	f8b1 a000 	ldrh.w	sl, [r1]
 8008754:	f1ba 0f00 	cmp.w	sl, #0
 8008758:	d023      	beq.n	80087a2 <__multiply+0xee>
 800875a:	46a9      	mov	r9, r5
 800875c:	f04f 0c00 	mov.w	ip, #0
 8008760:	f104 0e14 	add.w	lr, r4, #20
 8008764:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008768:	f8d9 3000 	ldr.w	r3, [r9]
 800876c:	fa1f fb87 	uxth.w	fp, r7
 8008770:	b29b      	uxth	r3, r3
 8008772:	fb0a 330b 	mla	r3, sl, fp, r3
 8008776:	4463      	add	r3, ip
 8008778:	f8d9 c000 	ldr.w	ip, [r9]
 800877c:	0c3f      	lsrs	r7, r7, #16
 800877e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008782:	fb0a c707 	mla	r7, sl, r7, ip
 8008786:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800878a:	b29b      	uxth	r3, r3
 800878c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008790:	4572      	cmp	r2, lr
 8008792:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008796:	f849 3b04 	str.w	r3, [r9], #4
 800879a:	d8e3      	bhi.n	8008764 <__multiply+0xb0>
 800879c:	9b01      	ldr	r3, [sp, #4]
 800879e:	f845 c003 	str.w	ip, [r5, r3]
 80087a2:	9b03      	ldr	r3, [sp, #12]
 80087a4:	3104      	adds	r1, #4
 80087a6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80087aa:	f1b9 0f00 	cmp.w	r9, #0
 80087ae:	d021      	beq.n	80087f4 <__multiply+0x140>
 80087b0:	46ae      	mov	lr, r5
 80087b2:	f04f 0a00 	mov.w	sl, #0
 80087b6:	682b      	ldr	r3, [r5, #0]
 80087b8:	f104 0c14 	add.w	ip, r4, #20
 80087bc:	f8bc b000 	ldrh.w	fp, [ip]
 80087c0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	fb09 770b 	mla	r7, r9, fp, r7
 80087ca:	4457      	add	r7, sl
 80087cc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80087d0:	f84e 3b04 	str.w	r3, [lr], #4
 80087d4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80087d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80087dc:	f8be 3000 	ldrh.w	r3, [lr]
 80087e0:	4562      	cmp	r2, ip
 80087e2:	fb09 330a 	mla	r3, r9, sl, r3
 80087e6:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80087ea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80087ee:	d8e5      	bhi.n	80087bc <__multiply+0x108>
 80087f0:	9f01      	ldr	r7, [sp, #4]
 80087f2:	51eb      	str	r3, [r5, r7]
 80087f4:	3504      	adds	r5, #4
 80087f6:	e79a      	b.n	800872e <__multiply+0x7a>
 80087f8:	3e01      	subs	r6, #1
 80087fa:	e79c      	b.n	8008736 <__multiply+0x82>
 80087fc:	0800adc7 	.word	0x0800adc7
 8008800:	0800add8 	.word	0x0800add8

08008804 <__pow5mult>:
 8008804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008808:	4615      	mov	r5, r2
 800880a:	f012 0203 	ands.w	r2, r2, #3
 800880e:	4607      	mov	r7, r0
 8008810:	460e      	mov	r6, r1
 8008812:	d007      	beq.n	8008824 <__pow5mult+0x20>
 8008814:	4c25      	ldr	r4, [pc, #148]	@ (80088ac <__pow5mult+0xa8>)
 8008816:	3a01      	subs	r2, #1
 8008818:	2300      	movs	r3, #0
 800881a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800881e:	f7ff fe57 	bl	80084d0 <__multadd>
 8008822:	4606      	mov	r6, r0
 8008824:	10ad      	asrs	r5, r5, #2
 8008826:	d03d      	beq.n	80088a4 <__pow5mult+0xa0>
 8008828:	69fc      	ldr	r4, [r7, #28]
 800882a:	b97c      	cbnz	r4, 800884c <__pow5mult+0x48>
 800882c:	2010      	movs	r0, #16
 800882e:	f7ff fd37 	bl	80082a0 <malloc>
 8008832:	4602      	mov	r2, r0
 8008834:	61f8      	str	r0, [r7, #28]
 8008836:	b928      	cbnz	r0, 8008844 <__pow5mult+0x40>
 8008838:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800883c:	4b1c      	ldr	r3, [pc, #112]	@ (80088b0 <__pow5mult+0xac>)
 800883e:	481d      	ldr	r0, [pc, #116]	@ (80088b4 <__pow5mult+0xb0>)
 8008840:	f001 fb58 	bl	8009ef4 <__assert_func>
 8008844:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008848:	6004      	str	r4, [r0, #0]
 800884a:	60c4      	str	r4, [r0, #12]
 800884c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008850:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008854:	b94c      	cbnz	r4, 800886a <__pow5mult+0x66>
 8008856:	f240 2171 	movw	r1, #625	@ 0x271
 800885a:	4638      	mov	r0, r7
 800885c:	f7ff ff14 	bl	8008688 <__i2b>
 8008860:	2300      	movs	r3, #0
 8008862:	4604      	mov	r4, r0
 8008864:	f8c8 0008 	str.w	r0, [r8, #8]
 8008868:	6003      	str	r3, [r0, #0]
 800886a:	f04f 0900 	mov.w	r9, #0
 800886e:	07eb      	lsls	r3, r5, #31
 8008870:	d50a      	bpl.n	8008888 <__pow5mult+0x84>
 8008872:	4631      	mov	r1, r6
 8008874:	4622      	mov	r2, r4
 8008876:	4638      	mov	r0, r7
 8008878:	f7ff ff1c 	bl	80086b4 <__multiply>
 800887c:	4680      	mov	r8, r0
 800887e:	4631      	mov	r1, r6
 8008880:	4638      	mov	r0, r7
 8008882:	f7ff fe03 	bl	800848c <_Bfree>
 8008886:	4646      	mov	r6, r8
 8008888:	106d      	asrs	r5, r5, #1
 800888a:	d00b      	beq.n	80088a4 <__pow5mult+0xa0>
 800888c:	6820      	ldr	r0, [r4, #0]
 800888e:	b938      	cbnz	r0, 80088a0 <__pow5mult+0x9c>
 8008890:	4622      	mov	r2, r4
 8008892:	4621      	mov	r1, r4
 8008894:	4638      	mov	r0, r7
 8008896:	f7ff ff0d 	bl	80086b4 <__multiply>
 800889a:	6020      	str	r0, [r4, #0]
 800889c:	f8c0 9000 	str.w	r9, [r0]
 80088a0:	4604      	mov	r4, r0
 80088a2:	e7e4      	b.n	800886e <__pow5mult+0x6a>
 80088a4:	4630      	mov	r0, r6
 80088a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088aa:	bf00      	nop
 80088ac:	0800ae34 	.word	0x0800ae34
 80088b0:	0800ad58 	.word	0x0800ad58
 80088b4:	0800add8 	.word	0x0800add8

080088b8 <__lshift>:
 80088b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088bc:	460c      	mov	r4, r1
 80088be:	4607      	mov	r7, r0
 80088c0:	4691      	mov	r9, r2
 80088c2:	6923      	ldr	r3, [r4, #16]
 80088c4:	6849      	ldr	r1, [r1, #4]
 80088c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80088ca:	68a3      	ldr	r3, [r4, #8]
 80088cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80088d0:	f108 0601 	add.w	r6, r8, #1
 80088d4:	42b3      	cmp	r3, r6
 80088d6:	db0b      	blt.n	80088f0 <__lshift+0x38>
 80088d8:	4638      	mov	r0, r7
 80088da:	f7ff fd97 	bl	800840c <_Balloc>
 80088de:	4605      	mov	r5, r0
 80088e0:	b948      	cbnz	r0, 80088f6 <__lshift+0x3e>
 80088e2:	4602      	mov	r2, r0
 80088e4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80088e8:	4b27      	ldr	r3, [pc, #156]	@ (8008988 <__lshift+0xd0>)
 80088ea:	4828      	ldr	r0, [pc, #160]	@ (800898c <__lshift+0xd4>)
 80088ec:	f001 fb02 	bl	8009ef4 <__assert_func>
 80088f0:	3101      	adds	r1, #1
 80088f2:	005b      	lsls	r3, r3, #1
 80088f4:	e7ee      	b.n	80088d4 <__lshift+0x1c>
 80088f6:	2300      	movs	r3, #0
 80088f8:	f100 0114 	add.w	r1, r0, #20
 80088fc:	f100 0210 	add.w	r2, r0, #16
 8008900:	4618      	mov	r0, r3
 8008902:	4553      	cmp	r3, sl
 8008904:	db33      	blt.n	800896e <__lshift+0xb6>
 8008906:	6920      	ldr	r0, [r4, #16]
 8008908:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800890c:	f104 0314 	add.w	r3, r4, #20
 8008910:	f019 091f 	ands.w	r9, r9, #31
 8008914:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008918:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800891c:	d02b      	beq.n	8008976 <__lshift+0xbe>
 800891e:	468a      	mov	sl, r1
 8008920:	2200      	movs	r2, #0
 8008922:	f1c9 0e20 	rsb	lr, r9, #32
 8008926:	6818      	ldr	r0, [r3, #0]
 8008928:	fa00 f009 	lsl.w	r0, r0, r9
 800892c:	4310      	orrs	r0, r2
 800892e:	f84a 0b04 	str.w	r0, [sl], #4
 8008932:	f853 2b04 	ldr.w	r2, [r3], #4
 8008936:	459c      	cmp	ip, r3
 8008938:	fa22 f20e 	lsr.w	r2, r2, lr
 800893c:	d8f3      	bhi.n	8008926 <__lshift+0x6e>
 800893e:	ebac 0304 	sub.w	r3, ip, r4
 8008942:	3b15      	subs	r3, #21
 8008944:	f023 0303 	bic.w	r3, r3, #3
 8008948:	3304      	adds	r3, #4
 800894a:	f104 0015 	add.w	r0, r4, #21
 800894e:	4584      	cmp	ip, r0
 8008950:	bf38      	it	cc
 8008952:	2304      	movcc	r3, #4
 8008954:	50ca      	str	r2, [r1, r3]
 8008956:	b10a      	cbz	r2, 800895c <__lshift+0xa4>
 8008958:	f108 0602 	add.w	r6, r8, #2
 800895c:	3e01      	subs	r6, #1
 800895e:	4638      	mov	r0, r7
 8008960:	4621      	mov	r1, r4
 8008962:	612e      	str	r6, [r5, #16]
 8008964:	f7ff fd92 	bl	800848c <_Bfree>
 8008968:	4628      	mov	r0, r5
 800896a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800896e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008972:	3301      	adds	r3, #1
 8008974:	e7c5      	b.n	8008902 <__lshift+0x4a>
 8008976:	3904      	subs	r1, #4
 8008978:	f853 2b04 	ldr.w	r2, [r3], #4
 800897c:	459c      	cmp	ip, r3
 800897e:	f841 2f04 	str.w	r2, [r1, #4]!
 8008982:	d8f9      	bhi.n	8008978 <__lshift+0xc0>
 8008984:	e7ea      	b.n	800895c <__lshift+0xa4>
 8008986:	bf00      	nop
 8008988:	0800adc7 	.word	0x0800adc7
 800898c:	0800add8 	.word	0x0800add8

08008990 <__mcmp>:
 8008990:	4603      	mov	r3, r0
 8008992:	690a      	ldr	r2, [r1, #16]
 8008994:	6900      	ldr	r0, [r0, #16]
 8008996:	b530      	push	{r4, r5, lr}
 8008998:	1a80      	subs	r0, r0, r2
 800899a:	d10e      	bne.n	80089ba <__mcmp+0x2a>
 800899c:	3314      	adds	r3, #20
 800899e:	3114      	adds	r1, #20
 80089a0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80089a4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80089a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80089ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80089b0:	4295      	cmp	r5, r2
 80089b2:	d003      	beq.n	80089bc <__mcmp+0x2c>
 80089b4:	d205      	bcs.n	80089c2 <__mcmp+0x32>
 80089b6:	f04f 30ff 	mov.w	r0, #4294967295
 80089ba:	bd30      	pop	{r4, r5, pc}
 80089bc:	42a3      	cmp	r3, r4
 80089be:	d3f3      	bcc.n	80089a8 <__mcmp+0x18>
 80089c0:	e7fb      	b.n	80089ba <__mcmp+0x2a>
 80089c2:	2001      	movs	r0, #1
 80089c4:	e7f9      	b.n	80089ba <__mcmp+0x2a>
	...

080089c8 <__mdiff>:
 80089c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089cc:	4689      	mov	r9, r1
 80089ce:	4606      	mov	r6, r0
 80089d0:	4611      	mov	r1, r2
 80089d2:	4648      	mov	r0, r9
 80089d4:	4614      	mov	r4, r2
 80089d6:	f7ff ffdb 	bl	8008990 <__mcmp>
 80089da:	1e05      	subs	r5, r0, #0
 80089dc:	d112      	bne.n	8008a04 <__mdiff+0x3c>
 80089de:	4629      	mov	r1, r5
 80089e0:	4630      	mov	r0, r6
 80089e2:	f7ff fd13 	bl	800840c <_Balloc>
 80089e6:	4602      	mov	r2, r0
 80089e8:	b928      	cbnz	r0, 80089f6 <__mdiff+0x2e>
 80089ea:	f240 2137 	movw	r1, #567	@ 0x237
 80089ee:	4b3e      	ldr	r3, [pc, #248]	@ (8008ae8 <__mdiff+0x120>)
 80089f0:	483e      	ldr	r0, [pc, #248]	@ (8008aec <__mdiff+0x124>)
 80089f2:	f001 fa7f 	bl	8009ef4 <__assert_func>
 80089f6:	2301      	movs	r3, #1
 80089f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80089fc:	4610      	mov	r0, r2
 80089fe:	b003      	add	sp, #12
 8008a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a04:	bfbc      	itt	lt
 8008a06:	464b      	movlt	r3, r9
 8008a08:	46a1      	movlt	r9, r4
 8008a0a:	4630      	mov	r0, r6
 8008a0c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008a10:	bfba      	itte	lt
 8008a12:	461c      	movlt	r4, r3
 8008a14:	2501      	movlt	r5, #1
 8008a16:	2500      	movge	r5, #0
 8008a18:	f7ff fcf8 	bl	800840c <_Balloc>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	b918      	cbnz	r0, 8008a28 <__mdiff+0x60>
 8008a20:	f240 2145 	movw	r1, #581	@ 0x245
 8008a24:	4b30      	ldr	r3, [pc, #192]	@ (8008ae8 <__mdiff+0x120>)
 8008a26:	e7e3      	b.n	80089f0 <__mdiff+0x28>
 8008a28:	f100 0b14 	add.w	fp, r0, #20
 8008a2c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008a30:	f109 0310 	add.w	r3, r9, #16
 8008a34:	60c5      	str	r5, [r0, #12]
 8008a36:	f04f 0c00 	mov.w	ip, #0
 8008a3a:	f109 0514 	add.w	r5, r9, #20
 8008a3e:	46d9      	mov	r9, fp
 8008a40:	6926      	ldr	r6, [r4, #16]
 8008a42:	f104 0e14 	add.w	lr, r4, #20
 8008a46:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008a4a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008a4e:	9301      	str	r3, [sp, #4]
 8008a50:	9b01      	ldr	r3, [sp, #4]
 8008a52:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008a56:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008a5a:	b281      	uxth	r1, r0
 8008a5c:	9301      	str	r3, [sp, #4]
 8008a5e:	fa1f f38a 	uxth.w	r3, sl
 8008a62:	1a5b      	subs	r3, r3, r1
 8008a64:	0c00      	lsrs	r0, r0, #16
 8008a66:	4463      	add	r3, ip
 8008a68:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008a6c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008a76:	4576      	cmp	r6, lr
 8008a78:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008a7c:	f849 3b04 	str.w	r3, [r9], #4
 8008a80:	d8e6      	bhi.n	8008a50 <__mdiff+0x88>
 8008a82:	1b33      	subs	r3, r6, r4
 8008a84:	3b15      	subs	r3, #21
 8008a86:	f023 0303 	bic.w	r3, r3, #3
 8008a8a:	3415      	adds	r4, #21
 8008a8c:	3304      	adds	r3, #4
 8008a8e:	42a6      	cmp	r6, r4
 8008a90:	bf38      	it	cc
 8008a92:	2304      	movcc	r3, #4
 8008a94:	441d      	add	r5, r3
 8008a96:	445b      	add	r3, fp
 8008a98:	461e      	mov	r6, r3
 8008a9a:	462c      	mov	r4, r5
 8008a9c:	4544      	cmp	r4, r8
 8008a9e:	d30e      	bcc.n	8008abe <__mdiff+0xf6>
 8008aa0:	f108 0103 	add.w	r1, r8, #3
 8008aa4:	1b49      	subs	r1, r1, r5
 8008aa6:	f021 0103 	bic.w	r1, r1, #3
 8008aaa:	3d03      	subs	r5, #3
 8008aac:	45a8      	cmp	r8, r5
 8008aae:	bf38      	it	cc
 8008ab0:	2100      	movcc	r1, #0
 8008ab2:	440b      	add	r3, r1
 8008ab4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008ab8:	b199      	cbz	r1, 8008ae2 <__mdiff+0x11a>
 8008aba:	6117      	str	r7, [r2, #16]
 8008abc:	e79e      	b.n	80089fc <__mdiff+0x34>
 8008abe:	46e6      	mov	lr, ip
 8008ac0:	f854 1b04 	ldr.w	r1, [r4], #4
 8008ac4:	fa1f fc81 	uxth.w	ip, r1
 8008ac8:	44f4      	add	ip, lr
 8008aca:	0c08      	lsrs	r0, r1, #16
 8008acc:	4471      	add	r1, lr
 8008ace:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008ad2:	b289      	uxth	r1, r1
 8008ad4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008ad8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008adc:	f846 1b04 	str.w	r1, [r6], #4
 8008ae0:	e7dc      	b.n	8008a9c <__mdiff+0xd4>
 8008ae2:	3f01      	subs	r7, #1
 8008ae4:	e7e6      	b.n	8008ab4 <__mdiff+0xec>
 8008ae6:	bf00      	nop
 8008ae8:	0800adc7 	.word	0x0800adc7
 8008aec:	0800add8 	.word	0x0800add8

08008af0 <__ulp>:
 8008af0:	4b0e      	ldr	r3, [pc, #56]	@ (8008b2c <__ulp+0x3c>)
 8008af2:	400b      	ands	r3, r1
 8008af4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	dc08      	bgt.n	8008b0e <__ulp+0x1e>
 8008afc:	425b      	negs	r3, r3
 8008afe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008b02:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008b06:	da04      	bge.n	8008b12 <__ulp+0x22>
 8008b08:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008b0c:	4113      	asrs	r3, r2
 8008b0e:	2200      	movs	r2, #0
 8008b10:	e008      	b.n	8008b24 <__ulp+0x34>
 8008b12:	f1a2 0314 	sub.w	r3, r2, #20
 8008b16:	2b1e      	cmp	r3, #30
 8008b18:	bfd6      	itet	le
 8008b1a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008b1e:	2201      	movgt	r2, #1
 8008b20:	40da      	lsrle	r2, r3
 8008b22:	2300      	movs	r3, #0
 8008b24:	4619      	mov	r1, r3
 8008b26:	4610      	mov	r0, r2
 8008b28:	4770      	bx	lr
 8008b2a:	bf00      	nop
 8008b2c:	7ff00000 	.word	0x7ff00000

08008b30 <__b2d>:
 8008b30:	6902      	ldr	r2, [r0, #16]
 8008b32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b34:	f100 0614 	add.w	r6, r0, #20
 8008b38:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8008b3c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8008b40:	4f1e      	ldr	r7, [pc, #120]	@ (8008bbc <__b2d+0x8c>)
 8008b42:	4620      	mov	r0, r4
 8008b44:	f7ff fd54 	bl	80085f0 <__hi0bits>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	f1c0 0020 	rsb	r0, r0, #32
 8008b4e:	2b0a      	cmp	r3, #10
 8008b50:	f1a2 0504 	sub.w	r5, r2, #4
 8008b54:	6008      	str	r0, [r1, #0]
 8008b56:	dc12      	bgt.n	8008b7e <__b2d+0x4e>
 8008b58:	42ae      	cmp	r6, r5
 8008b5a:	bf2c      	ite	cs
 8008b5c:	2200      	movcs	r2, #0
 8008b5e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008b62:	f1c3 0c0b 	rsb	ip, r3, #11
 8008b66:	3315      	adds	r3, #21
 8008b68:	fa24 fe0c 	lsr.w	lr, r4, ip
 8008b6c:	fa04 f303 	lsl.w	r3, r4, r3
 8008b70:	fa22 f20c 	lsr.w	r2, r2, ip
 8008b74:	ea4e 0107 	orr.w	r1, lr, r7
 8008b78:	431a      	orrs	r2, r3
 8008b7a:	4610      	mov	r0, r2
 8008b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b7e:	42ae      	cmp	r6, r5
 8008b80:	bf36      	itet	cc
 8008b82:	f1a2 0508 	subcc.w	r5, r2, #8
 8008b86:	2200      	movcs	r2, #0
 8008b88:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008b8c:	3b0b      	subs	r3, #11
 8008b8e:	d012      	beq.n	8008bb6 <__b2d+0x86>
 8008b90:	f1c3 0720 	rsb	r7, r3, #32
 8008b94:	fa22 f107 	lsr.w	r1, r2, r7
 8008b98:	409c      	lsls	r4, r3
 8008b9a:	430c      	orrs	r4, r1
 8008b9c:	42b5      	cmp	r5, r6
 8008b9e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8008ba2:	bf94      	ite	ls
 8008ba4:	2400      	movls	r4, #0
 8008ba6:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8008baa:	409a      	lsls	r2, r3
 8008bac:	40fc      	lsrs	r4, r7
 8008bae:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8008bb2:	4322      	orrs	r2, r4
 8008bb4:	e7e1      	b.n	8008b7a <__b2d+0x4a>
 8008bb6:	ea44 0107 	orr.w	r1, r4, r7
 8008bba:	e7de      	b.n	8008b7a <__b2d+0x4a>
 8008bbc:	3ff00000 	.word	0x3ff00000

08008bc0 <__d2b>:
 8008bc0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008bc4:	2101      	movs	r1, #1
 8008bc6:	4690      	mov	r8, r2
 8008bc8:	4699      	mov	r9, r3
 8008bca:	9e08      	ldr	r6, [sp, #32]
 8008bcc:	f7ff fc1e 	bl	800840c <_Balloc>
 8008bd0:	4604      	mov	r4, r0
 8008bd2:	b930      	cbnz	r0, 8008be2 <__d2b+0x22>
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	f240 310f 	movw	r1, #783	@ 0x30f
 8008bda:	4b23      	ldr	r3, [pc, #140]	@ (8008c68 <__d2b+0xa8>)
 8008bdc:	4823      	ldr	r0, [pc, #140]	@ (8008c6c <__d2b+0xac>)
 8008bde:	f001 f989 	bl	8009ef4 <__assert_func>
 8008be2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008be6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008bea:	b10d      	cbz	r5, 8008bf0 <__d2b+0x30>
 8008bec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008bf0:	9301      	str	r3, [sp, #4]
 8008bf2:	f1b8 0300 	subs.w	r3, r8, #0
 8008bf6:	d024      	beq.n	8008c42 <__d2b+0x82>
 8008bf8:	4668      	mov	r0, sp
 8008bfa:	9300      	str	r3, [sp, #0]
 8008bfc:	f7ff fd17 	bl	800862e <__lo0bits>
 8008c00:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008c04:	b1d8      	cbz	r0, 8008c3e <__d2b+0x7e>
 8008c06:	f1c0 0320 	rsb	r3, r0, #32
 8008c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c0e:	430b      	orrs	r3, r1
 8008c10:	40c2      	lsrs	r2, r0
 8008c12:	6163      	str	r3, [r4, #20]
 8008c14:	9201      	str	r2, [sp, #4]
 8008c16:	9b01      	ldr	r3, [sp, #4]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	bf0c      	ite	eq
 8008c1c:	2201      	moveq	r2, #1
 8008c1e:	2202      	movne	r2, #2
 8008c20:	61a3      	str	r3, [r4, #24]
 8008c22:	6122      	str	r2, [r4, #16]
 8008c24:	b1ad      	cbz	r5, 8008c52 <__d2b+0x92>
 8008c26:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008c2a:	4405      	add	r5, r0
 8008c2c:	6035      	str	r5, [r6, #0]
 8008c2e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008c32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c34:	6018      	str	r0, [r3, #0]
 8008c36:	4620      	mov	r0, r4
 8008c38:	b002      	add	sp, #8
 8008c3a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008c3e:	6161      	str	r1, [r4, #20]
 8008c40:	e7e9      	b.n	8008c16 <__d2b+0x56>
 8008c42:	a801      	add	r0, sp, #4
 8008c44:	f7ff fcf3 	bl	800862e <__lo0bits>
 8008c48:	9b01      	ldr	r3, [sp, #4]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	6163      	str	r3, [r4, #20]
 8008c4e:	3020      	adds	r0, #32
 8008c50:	e7e7      	b.n	8008c22 <__d2b+0x62>
 8008c52:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008c56:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008c5a:	6030      	str	r0, [r6, #0]
 8008c5c:	6918      	ldr	r0, [r3, #16]
 8008c5e:	f7ff fcc7 	bl	80085f0 <__hi0bits>
 8008c62:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008c66:	e7e4      	b.n	8008c32 <__d2b+0x72>
 8008c68:	0800adc7 	.word	0x0800adc7
 8008c6c:	0800add8 	.word	0x0800add8

08008c70 <__ratio>:
 8008c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c74:	b085      	sub	sp, #20
 8008c76:	e9cd 1000 	strd	r1, r0, [sp]
 8008c7a:	a902      	add	r1, sp, #8
 8008c7c:	f7ff ff58 	bl	8008b30 <__b2d>
 8008c80:	468b      	mov	fp, r1
 8008c82:	4606      	mov	r6, r0
 8008c84:	460f      	mov	r7, r1
 8008c86:	9800      	ldr	r0, [sp, #0]
 8008c88:	a903      	add	r1, sp, #12
 8008c8a:	f7ff ff51 	bl	8008b30 <__b2d>
 8008c8e:	460d      	mov	r5, r1
 8008c90:	9b01      	ldr	r3, [sp, #4]
 8008c92:	4689      	mov	r9, r1
 8008c94:	6919      	ldr	r1, [r3, #16]
 8008c96:	9b00      	ldr	r3, [sp, #0]
 8008c98:	4604      	mov	r4, r0
 8008c9a:	691b      	ldr	r3, [r3, #16]
 8008c9c:	4630      	mov	r0, r6
 8008c9e:	1ac9      	subs	r1, r1, r3
 8008ca0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008ca4:	1a9b      	subs	r3, r3, r2
 8008ca6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	bfcd      	iteet	gt
 8008cae:	463a      	movgt	r2, r7
 8008cb0:	462a      	movle	r2, r5
 8008cb2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008cb6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8008cba:	bfd8      	it	le
 8008cbc:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008cc0:	464b      	mov	r3, r9
 8008cc2:	4622      	mov	r2, r4
 8008cc4:	4659      	mov	r1, fp
 8008cc6:	f7f7 fd3b 	bl	8000740 <__aeabi_ddiv>
 8008cca:	b005      	add	sp, #20
 8008ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008cd0 <__copybits>:
 8008cd0:	3901      	subs	r1, #1
 8008cd2:	b570      	push	{r4, r5, r6, lr}
 8008cd4:	1149      	asrs	r1, r1, #5
 8008cd6:	6914      	ldr	r4, [r2, #16]
 8008cd8:	3101      	adds	r1, #1
 8008cda:	f102 0314 	add.w	r3, r2, #20
 8008cde:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008ce2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008ce6:	1f05      	subs	r5, r0, #4
 8008ce8:	42a3      	cmp	r3, r4
 8008cea:	d30c      	bcc.n	8008d06 <__copybits+0x36>
 8008cec:	1aa3      	subs	r3, r4, r2
 8008cee:	3b11      	subs	r3, #17
 8008cf0:	f023 0303 	bic.w	r3, r3, #3
 8008cf4:	3211      	adds	r2, #17
 8008cf6:	42a2      	cmp	r2, r4
 8008cf8:	bf88      	it	hi
 8008cfa:	2300      	movhi	r3, #0
 8008cfc:	4418      	add	r0, r3
 8008cfe:	2300      	movs	r3, #0
 8008d00:	4288      	cmp	r0, r1
 8008d02:	d305      	bcc.n	8008d10 <__copybits+0x40>
 8008d04:	bd70      	pop	{r4, r5, r6, pc}
 8008d06:	f853 6b04 	ldr.w	r6, [r3], #4
 8008d0a:	f845 6f04 	str.w	r6, [r5, #4]!
 8008d0e:	e7eb      	b.n	8008ce8 <__copybits+0x18>
 8008d10:	f840 3b04 	str.w	r3, [r0], #4
 8008d14:	e7f4      	b.n	8008d00 <__copybits+0x30>

08008d16 <__any_on>:
 8008d16:	f100 0214 	add.w	r2, r0, #20
 8008d1a:	6900      	ldr	r0, [r0, #16]
 8008d1c:	114b      	asrs	r3, r1, #5
 8008d1e:	4298      	cmp	r0, r3
 8008d20:	b510      	push	{r4, lr}
 8008d22:	db11      	blt.n	8008d48 <__any_on+0x32>
 8008d24:	dd0a      	ble.n	8008d3c <__any_on+0x26>
 8008d26:	f011 011f 	ands.w	r1, r1, #31
 8008d2a:	d007      	beq.n	8008d3c <__any_on+0x26>
 8008d2c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008d30:	fa24 f001 	lsr.w	r0, r4, r1
 8008d34:	fa00 f101 	lsl.w	r1, r0, r1
 8008d38:	428c      	cmp	r4, r1
 8008d3a:	d10b      	bne.n	8008d54 <__any_on+0x3e>
 8008d3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d803      	bhi.n	8008d4c <__any_on+0x36>
 8008d44:	2000      	movs	r0, #0
 8008d46:	bd10      	pop	{r4, pc}
 8008d48:	4603      	mov	r3, r0
 8008d4a:	e7f7      	b.n	8008d3c <__any_on+0x26>
 8008d4c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008d50:	2900      	cmp	r1, #0
 8008d52:	d0f5      	beq.n	8008d40 <__any_on+0x2a>
 8008d54:	2001      	movs	r0, #1
 8008d56:	e7f6      	b.n	8008d46 <__any_on+0x30>

08008d58 <sulp>:
 8008d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d5c:	460f      	mov	r7, r1
 8008d5e:	4690      	mov	r8, r2
 8008d60:	f7ff fec6 	bl	8008af0 <__ulp>
 8008d64:	4604      	mov	r4, r0
 8008d66:	460d      	mov	r5, r1
 8008d68:	f1b8 0f00 	cmp.w	r8, #0
 8008d6c:	d011      	beq.n	8008d92 <sulp+0x3a>
 8008d6e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008d72:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	dd0b      	ble.n	8008d92 <sulp+0x3a>
 8008d7a:	2400      	movs	r4, #0
 8008d7c:	051b      	lsls	r3, r3, #20
 8008d7e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008d82:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008d86:	4622      	mov	r2, r4
 8008d88:	462b      	mov	r3, r5
 8008d8a:	f7f7 fbaf 	bl	80004ec <__aeabi_dmul>
 8008d8e:	4604      	mov	r4, r0
 8008d90:	460d      	mov	r5, r1
 8008d92:	4620      	mov	r0, r4
 8008d94:	4629      	mov	r1, r5
 8008d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d9a:	0000      	movs	r0, r0
 8008d9c:	0000      	movs	r0, r0
	...

08008da0 <_strtod_l>:
 8008da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008da4:	b09f      	sub	sp, #124	@ 0x7c
 8008da6:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008da8:	2200      	movs	r2, #0
 8008daa:	460c      	mov	r4, r1
 8008dac:	921a      	str	r2, [sp, #104]	@ 0x68
 8008dae:	f04f 0a00 	mov.w	sl, #0
 8008db2:	f04f 0b00 	mov.w	fp, #0
 8008db6:	460a      	mov	r2, r1
 8008db8:	9005      	str	r0, [sp, #20]
 8008dba:	9219      	str	r2, [sp, #100]	@ 0x64
 8008dbc:	7811      	ldrb	r1, [r2, #0]
 8008dbe:	292b      	cmp	r1, #43	@ 0x2b
 8008dc0:	d048      	beq.n	8008e54 <_strtod_l+0xb4>
 8008dc2:	d836      	bhi.n	8008e32 <_strtod_l+0x92>
 8008dc4:	290d      	cmp	r1, #13
 8008dc6:	d830      	bhi.n	8008e2a <_strtod_l+0x8a>
 8008dc8:	2908      	cmp	r1, #8
 8008dca:	d830      	bhi.n	8008e2e <_strtod_l+0x8e>
 8008dcc:	2900      	cmp	r1, #0
 8008dce:	d039      	beq.n	8008e44 <_strtod_l+0xa4>
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008dd4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008dd6:	782a      	ldrb	r2, [r5, #0]
 8008dd8:	2a30      	cmp	r2, #48	@ 0x30
 8008dda:	f040 80b1 	bne.w	8008f40 <_strtod_l+0x1a0>
 8008dde:	786a      	ldrb	r2, [r5, #1]
 8008de0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008de4:	2a58      	cmp	r2, #88	@ 0x58
 8008de6:	d16c      	bne.n	8008ec2 <_strtod_l+0x122>
 8008de8:	9302      	str	r3, [sp, #8]
 8008dea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008dec:	4a8e      	ldr	r2, [pc, #568]	@ (8009028 <_strtod_l+0x288>)
 8008dee:	9301      	str	r3, [sp, #4]
 8008df0:	ab1a      	add	r3, sp, #104	@ 0x68
 8008df2:	9300      	str	r3, [sp, #0]
 8008df4:	9805      	ldr	r0, [sp, #20]
 8008df6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008df8:	a919      	add	r1, sp, #100	@ 0x64
 8008dfa:	f001 f915 	bl	800a028 <__gethex>
 8008dfe:	f010 060f 	ands.w	r6, r0, #15
 8008e02:	4604      	mov	r4, r0
 8008e04:	d005      	beq.n	8008e12 <_strtod_l+0x72>
 8008e06:	2e06      	cmp	r6, #6
 8008e08:	d126      	bne.n	8008e58 <_strtod_l+0xb8>
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	3501      	adds	r5, #1
 8008e0e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008e10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008e12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	f040 8584 	bne.w	8009922 <_strtod_l+0xb82>
 8008e1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e1c:	b1bb      	cbz	r3, 8008e4e <_strtod_l+0xae>
 8008e1e:	4650      	mov	r0, sl
 8008e20:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8008e24:	b01f      	add	sp, #124	@ 0x7c
 8008e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e2a:	2920      	cmp	r1, #32
 8008e2c:	d1d0      	bne.n	8008dd0 <_strtod_l+0x30>
 8008e2e:	3201      	adds	r2, #1
 8008e30:	e7c3      	b.n	8008dba <_strtod_l+0x1a>
 8008e32:	292d      	cmp	r1, #45	@ 0x2d
 8008e34:	d1cc      	bne.n	8008dd0 <_strtod_l+0x30>
 8008e36:	2101      	movs	r1, #1
 8008e38:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008e3a:	1c51      	adds	r1, r2, #1
 8008e3c:	9119      	str	r1, [sp, #100]	@ 0x64
 8008e3e:	7852      	ldrb	r2, [r2, #1]
 8008e40:	2a00      	cmp	r2, #0
 8008e42:	d1c7      	bne.n	8008dd4 <_strtod_l+0x34>
 8008e44:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008e46:	9419      	str	r4, [sp, #100]	@ 0x64
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	f040 8568 	bne.w	800991e <_strtod_l+0xb7e>
 8008e4e:	4650      	mov	r0, sl
 8008e50:	4659      	mov	r1, fp
 8008e52:	e7e7      	b.n	8008e24 <_strtod_l+0x84>
 8008e54:	2100      	movs	r1, #0
 8008e56:	e7ef      	b.n	8008e38 <_strtod_l+0x98>
 8008e58:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008e5a:	b13a      	cbz	r2, 8008e6c <_strtod_l+0xcc>
 8008e5c:	2135      	movs	r1, #53	@ 0x35
 8008e5e:	a81c      	add	r0, sp, #112	@ 0x70
 8008e60:	f7ff ff36 	bl	8008cd0 <__copybits>
 8008e64:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008e66:	9805      	ldr	r0, [sp, #20]
 8008e68:	f7ff fb10 	bl	800848c <_Bfree>
 8008e6c:	3e01      	subs	r6, #1
 8008e6e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008e70:	2e04      	cmp	r6, #4
 8008e72:	d806      	bhi.n	8008e82 <_strtod_l+0xe2>
 8008e74:	e8df f006 	tbb	[pc, r6]
 8008e78:	201d0314 	.word	0x201d0314
 8008e7c:	14          	.byte	0x14
 8008e7d:	00          	.byte	0x00
 8008e7e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008e82:	05e1      	lsls	r1, r4, #23
 8008e84:	bf48      	it	mi
 8008e86:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008e8a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008e8e:	0d1b      	lsrs	r3, r3, #20
 8008e90:	051b      	lsls	r3, r3, #20
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d1bd      	bne.n	8008e12 <_strtod_l+0x72>
 8008e96:	f7fe fb2b 	bl	80074f0 <__errno>
 8008e9a:	2322      	movs	r3, #34	@ 0x22
 8008e9c:	6003      	str	r3, [r0, #0]
 8008e9e:	e7b8      	b.n	8008e12 <_strtod_l+0x72>
 8008ea0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008ea4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008ea8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008eac:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008eb0:	e7e7      	b.n	8008e82 <_strtod_l+0xe2>
 8008eb2:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800902c <_strtod_l+0x28c>
 8008eb6:	e7e4      	b.n	8008e82 <_strtod_l+0xe2>
 8008eb8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008ebc:	f04f 3aff 	mov.w	sl, #4294967295
 8008ec0:	e7df      	b.n	8008e82 <_strtod_l+0xe2>
 8008ec2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008ec4:	1c5a      	adds	r2, r3, #1
 8008ec6:	9219      	str	r2, [sp, #100]	@ 0x64
 8008ec8:	785b      	ldrb	r3, [r3, #1]
 8008eca:	2b30      	cmp	r3, #48	@ 0x30
 8008ecc:	d0f9      	beq.n	8008ec2 <_strtod_l+0x122>
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d09f      	beq.n	8008e12 <_strtod_l+0x72>
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ed6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008ed8:	220a      	movs	r2, #10
 8008eda:	930c      	str	r3, [sp, #48]	@ 0x30
 8008edc:	2300      	movs	r3, #0
 8008ede:	461f      	mov	r7, r3
 8008ee0:	9308      	str	r3, [sp, #32]
 8008ee2:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ee4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008ee6:	7805      	ldrb	r5, [r0, #0]
 8008ee8:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008eec:	b2d9      	uxtb	r1, r3
 8008eee:	2909      	cmp	r1, #9
 8008ef0:	d928      	bls.n	8008f44 <_strtod_l+0x1a4>
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	494e      	ldr	r1, [pc, #312]	@ (8009030 <_strtod_l+0x290>)
 8008ef6:	f000 ffc7 	bl	8009e88 <strncmp>
 8008efa:	2800      	cmp	r0, #0
 8008efc:	d032      	beq.n	8008f64 <_strtod_l+0x1c4>
 8008efe:	2000      	movs	r0, #0
 8008f00:	462a      	mov	r2, r5
 8008f02:	4681      	mov	r9, r0
 8008f04:	463d      	mov	r5, r7
 8008f06:	4603      	mov	r3, r0
 8008f08:	2a65      	cmp	r2, #101	@ 0x65
 8008f0a:	d001      	beq.n	8008f10 <_strtod_l+0x170>
 8008f0c:	2a45      	cmp	r2, #69	@ 0x45
 8008f0e:	d114      	bne.n	8008f3a <_strtod_l+0x19a>
 8008f10:	b91d      	cbnz	r5, 8008f1a <_strtod_l+0x17a>
 8008f12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f14:	4302      	orrs	r2, r0
 8008f16:	d095      	beq.n	8008e44 <_strtod_l+0xa4>
 8008f18:	2500      	movs	r5, #0
 8008f1a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008f1c:	1c62      	adds	r2, r4, #1
 8008f1e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008f20:	7862      	ldrb	r2, [r4, #1]
 8008f22:	2a2b      	cmp	r2, #43	@ 0x2b
 8008f24:	d077      	beq.n	8009016 <_strtod_l+0x276>
 8008f26:	2a2d      	cmp	r2, #45	@ 0x2d
 8008f28:	d07b      	beq.n	8009022 <_strtod_l+0x282>
 8008f2a:	f04f 0c00 	mov.w	ip, #0
 8008f2e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008f32:	2909      	cmp	r1, #9
 8008f34:	f240 8082 	bls.w	800903c <_strtod_l+0x29c>
 8008f38:	9419      	str	r4, [sp, #100]	@ 0x64
 8008f3a:	f04f 0800 	mov.w	r8, #0
 8008f3e:	e0a2      	b.n	8009086 <_strtod_l+0x2e6>
 8008f40:	2300      	movs	r3, #0
 8008f42:	e7c7      	b.n	8008ed4 <_strtod_l+0x134>
 8008f44:	2f08      	cmp	r7, #8
 8008f46:	bfd5      	itete	le
 8008f48:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008f4a:	9908      	ldrgt	r1, [sp, #32]
 8008f4c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008f50:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008f54:	f100 0001 	add.w	r0, r0, #1
 8008f58:	bfd4      	ite	le
 8008f5a:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008f5c:	9308      	strgt	r3, [sp, #32]
 8008f5e:	3701      	adds	r7, #1
 8008f60:	9019      	str	r0, [sp, #100]	@ 0x64
 8008f62:	e7bf      	b.n	8008ee4 <_strtod_l+0x144>
 8008f64:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f66:	1c5a      	adds	r2, r3, #1
 8008f68:	9219      	str	r2, [sp, #100]	@ 0x64
 8008f6a:	785a      	ldrb	r2, [r3, #1]
 8008f6c:	b37f      	cbz	r7, 8008fce <_strtod_l+0x22e>
 8008f6e:	4681      	mov	r9, r0
 8008f70:	463d      	mov	r5, r7
 8008f72:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008f76:	2b09      	cmp	r3, #9
 8008f78:	d912      	bls.n	8008fa0 <_strtod_l+0x200>
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	e7c4      	b.n	8008f08 <_strtod_l+0x168>
 8008f7e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f80:	3001      	adds	r0, #1
 8008f82:	1c5a      	adds	r2, r3, #1
 8008f84:	9219      	str	r2, [sp, #100]	@ 0x64
 8008f86:	785a      	ldrb	r2, [r3, #1]
 8008f88:	2a30      	cmp	r2, #48	@ 0x30
 8008f8a:	d0f8      	beq.n	8008f7e <_strtod_l+0x1de>
 8008f8c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008f90:	2b08      	cmp	r3, #8
 8008f92:	f200 84cb 	bhi.w	800992c <_strtod_l+0xb8c>
 8008f96:	4681      	mov	r9, r0
 8008f98:	2000      	movs	r0, #0
 8008f9a:	4605      	mov	r5, r0
 8008f9c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f9e:	930c      	str	r3, [sp, #48]	@ 0x30
 8008fa0:	3a30      	subs	r2, #48	@ 0x30
 8008fa2:	f100 0301 	add.w	r3, r0, #1
 8008fa6:	d02a      	beq.n	8008ffe <_strtod_l+0x25e>
 8008fa8:	4499      	add	r9, r3
 8008faa:	210a      	movs	r1, #10
 8008fac:	462b      	mov	r3, r5
 8008fae:	eb00 0c05 	add.w	ip, r0, r5
 8008fb2:	4563      	cmp	r3, ip
 8008fb4:	d10d      	bne.n	8008fd2 <_strtod_l+0x232>
 8008fb6:	1c69      	adds	r1, r5, #1
 8008fb8:	4401      	add	r1, r0
 8008fba:	4428      	add	r0, r5
 8008fbc:	2808      	cmp	r0, #8
 8008fbe:	dc16      	bgt.n	8008fee <_strtod_l+0x24e>
 8008fc0:	230a      	movs	r3, #10
 8008fc2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008fc4:	fb03 2300 	mla	r3, r3, r0, r2
 8008fc8:	930a      	str	r3, [sp, #40]	@ 0x28
 8008fca:	2300      	movs	r3, #0
 8008fcc:	e018      	b.n	8009000 <_strtod_l+0x260>
 8008fce:	4638      	mov	r0, r7
 8008fd0:	e7da      	b.n	8008f88 <_strtod_l+0x1e8>
 8008fd2:	2b08      	cmp	r3, #8
 8008fd4:	f103 0301 	add.w	r3, r3, #1
 8008fd8:	dc03      	bgt.n	8008fe2 <_strtod_l+0x242>
 8008fda:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008fdc:	434e      	muls	r6, r1
 8008fde:	960a      	str	r6, [sp, #40]	@ 0x28
 8008fe0:	e7e7      	b.n	8008fb2 <_strtod_l+0x212>
 8008fe2:	2b10      	cmp	r3, #16
 8008fe4:	bfde      	ittt	le
 8008fe6:	9e08      	ldrle	r6, [sp, #32]
 8008fe8:	434e      	mulle	r6, r1
 8008fea:	9608      	strle	r6, [sp, #32]
 8008fec:	e7e1      	b.n	8008fb2 <_strtod_l+0x212>
 8008fee:	280f      	cmp	r0, #15
 8008ff0:	dceb      	bgt.n	8008fca <_strtod_l+0x22a>
 8008ff2:	230a      	movs	r3, #10
 8008ff4:	9808      	ldr	r0, [sp, #32]
 8008ff6:	fb03 2300 	mla	r3, r3, r0, r2
 8008ffa:	9308      	str	r3, [sp, #32]
 8008ffc:	e7e5      	b.n	8008fca <_strtod_l+0x22a>
 8008ffe:	4629      	mov	r1, r5
 8009000:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009002:	460d      	mov	r5, r1
 8009004:	1c50      	adds	r0, r2, #1
 8009006:	9019      	str	r0, [sp, #100]	@ 0x64
 8009008:	7852      	ldrb	r2, [r2, #1]
 800900a:	4618      	mov	r0, r3
 800900c:	e7b1      	b.n	8008f72 <_strtod_l+0x1d2>
 800900e:	f04f 0900 	mov.w	r9, #0
 8009012:	2301      	movs	r3, #1
 8009014:	e77d      	b.n	8008f12 <_strtod_l+0x172>
 8009016:	f04f 0c00 	mov.w	ip, #0
 800901a:	1ca2      	adds	r2, r4, #2
 800901c:	9219      	str	r2, [sp, #100]	@ 0x64
 800901e:	78a2      	ldrb	r2, [r4, #2]
 8009020:	e785      	b.n	8008f2e <_strtod_l+0x18e>
 8009022:	f04f 0c01 	mov.w	ip, #1
 8009026:	e7f8      	b.n	800901a <_strtod_l+0x27a>
 8009028:	0800af48 	.word	0x0800af48
 800902c:	7ff00000 	.word	0x7ff00000
 8009030:	0800af30 	.word	0x0800af30
 8009034:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009036:	1c51      	adds	r1, r2, #1
 8009038:	9119      	str	r1, [sp, #100]	@ 0x64
 800903a:	7852      	ldrb	r2, [r2, #1]
 800903c:	2a30      	cmp	r2, #48	@ 0x30
 800903e:	d0f9      	beq.n	8009034 <_strtod_l+0x294>
 8009040:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009044:	2908      	cmp	r1, #8
 8009046:	f63f af78 	bhi.w	8008f3a <_strtod_l+0x19a>
 800904a:	f04f 080a 	mov.w	r8, #10
 800904e:	3a30      	subs	r2, #48	@ 0x30
 8009050:	920e      	str	r2, [sp, #56]	@ 0x38
 8009052:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009054:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009056:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009058:	1c56      	adds	r6, r2, #1
 800905a:	9619      	str	r6, [sp, #100]	@ 0x64
 800905c:	7852      	ldrb	r2, [r2, #1]
 800905e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009062:	f1be 0f09 	cmp.w	lr, #9
 8009066:	d939      	bls.n	80090dc <_strtod_l+0x33c>
 8009068:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800906a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800906e:	1a76      	subs	r6, r6, r1
 8009070:	2e08      	cmp	r6, #8
 8009072:	dc03      	bgt.n	800907c <_strtod_l+0x2dc>
 8009074:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009076:	4588      	cmp	r8, r1
 8009078:	bfa8      	it	ge
 800907a:	4688      	movge	r8, r1
 800907c:	f1bc 0f00 	cmp.w	ip, #0
 8009080:	d001      	beq.n	8009086 <_strtod_l+0x2e6>
 8009082:	f1c8 0800 	rsb	r8, r8, #0
 8009086:	2d00      	cmp	r5, #0
 8009088:	d14e      	bne.n	8009128 <_strtod_l+0x388>
 800908a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800908c:	4308      	orrs	r0, r1
 800908e:	f47f aec0 	bne.w	8008e12 <_strtod_l+0x72>
 8009092:	2b00      	cmp	r3, #0
 8009094:	f47f aed6 	bne.w	8008e44 <_strtod_l+0xa4>
 8009098:	2a69      	cmp	r2, #105	@ 0x69
 800909a:	d028      	beq.n	80090ee <_strtod_l+0x34e>
 800909c:	dc25      	bgt.n	80090ea <_strtod_l+0x34a>
 800909e:	2a49      	cmp	r2, #73	@ 0x49
 80090a0:	d025      	beq.n	80090ee <_strtod_l+0x34e>
 80090a2:	2a4e      	cmp	r2, #78	@ 0x4e
 80090a4:	f47f aece 	bne.w	8008e44 <_strtod_l+0xa4>
 80090a8:	499a      	ldr	r1, [pc, #616]	@ (8009314 <_strtod_l+0x574>)
 80090aa:	a819      	add	r0, sp, #100	@ 0x64
 80090ac:	f001 f9de 	bl	800a46c <__match>
 80090b0:	2800      	cmp	r0, #0
 80090b2:	f43f aec7 	beq.w	8008e44 <_strtod_l+0xa4>
 80090b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	2b28      	cmp	r3, #40	@ 0x28
 80090bc:	d12e      	bne.n	800911c <_strtod_l+0x37c>
 80090be:	4996      	ldr	r1, [pc, #600]	@ (8009318 <_strtod_l+0x578>)
 80090c0:	aa1c      	add	r2, sp, #112	@ 0x70
 80090c2:	a819      	add	r0, sp, #100	@ 0x64
 80090c4:	f001 f9e6 	bl	800a494 <__hexnan>
 80090c8:	2805      	cmp	r0, #5
 80090ca:	d127      	bne.n	800911c <_strtod_l+0x37c>
 80090cc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80090ce:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80090d2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80090d6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80090da:	e69a      	b.n	8008e12 <_strtod_l+0x72>
 80090dc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80090de:	fb08 2101 	mla	r1, r8, r1, r2
 80090e2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80090e6:	920e      	str	r2, [sp, #56]	@ 0x38
 80090e8:	e7b5      	b.n	8009056 <_strtod_l+0x2b6>
 80090ea:	2a6e      	cmp	r2, #110	@ 0x6e
 80090ec:	e7da      	b.n	80090a4 <_strtod_l+0x304>
 80090ee:	498b      	ldr	r1, [pc, #556]	@ (800931c <_strtod_l+0x57c>)
 80090f0:	a819      	add	r0, sp, #100	@ 0x64
 80090f2:	f001 f9bb 	bl	800a46c <__match>
 80090f6:	2800      	cmp	r0, #0
 80090f8:	f43f aea4 	beq.w	8008e44 <_strtod_l+0xa4>
 80090fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80090fe:	4988      	ldr	r1, [pc, #544]	@ (8009320 <_strtod_l+0x580>)
 8009100:	3b01      	subs	r3, #1
 8009102:	a819      	add	r0, sp, #100	@ 0x64
 8009104:	9319      	str	r3, [sp, #100]	@ 0x64
 8009106:	f001 f9b1 	bl	800a46c <__match>
 800910a:	b910      	cbnz	r0, 8009112 <_strtod_l+0x372>
 800910c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800910e:	3301      	adds	r3, #1
 8009110:	9319      	str	r3, [sp, #100]	@ 0x64
 8009112:	f04f 0a00 	mov.w	sl, #0
 8009116:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8009324 <_strtod_l+0x584>
 800911a:	e67a      	b.n	8008e12 <_strtod_l+0x72>
 800911c:	4882      	ldr	r0, [pc, #520]	@ (8009328 <_strtod_l+0x588>)
 800911e:	f000 fee3 	bl	8009ee8 <nan>
 8009122:	4682      	mov	sl, r0
 8009124:	468b      	mov	fp, r1
 8009126:	e674      	b.n	8008e12 <_strtod_l+0x72>
 8009128:	eba8 0309 	sub.w	r3, r8, r9
 800912c:	2f00      	cmp	r7, #0
 800912e:	bf08      	it	eq
 8009130:	462f      	moveq	r7, r5
 8009132:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009134:	2d10      	cmp	r5, #16
 8009136:	462c      	mov	r4, r5
 8009138:	9309      	str	r3, [sp, #36]	@ 0x24
 800913a:	bfa8      	it	ge
 800913c:	2410      	movge	r4, #16
 800913e:	f7f7 f95b 	bl	80003f8 <__aeabi_ui2d>
 8009142:	2d09      	cmp	r5, #9
 8009144:	4682      	mov	sl, r0
 8009146:	468b      	mov	fp, r1
 8009148:	dc11      	bgt.n	800916e <_strtod_l+0x3ce>
 800914a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800914c:	2b00      	cmp	r3, #0
 800914e:	f43f ae60 	beq.w	8008e12 <_strtod_l+0x72>
 8009152:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009154:	dd76      	ble.n	8009244 <_strtod_l+0x4a4>
 8009156:	2b16      	cmp	r3, #22
 8009158:	dc5d      	bgt.n	8009216 <_strtod_l+0x476>
 800915a:	4974      	ldr	r1, [pc, #464]	@ (800932c <_strtod_l+0x58c>)
 800915c:	4652      	mov	r2, sl
 800915e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009162:	465b      	mov	r3, fp
 8009164:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009168:	f7f7 f9c0 	bl	80004ec <__aeabi_dmul>
 800916c:	e7d9      	b.n	8009122 <_strtod_l+0x382>
 800916e:	4b6f      	ldr	r3, [pc, #444]	@ (800932c <_strtod_l+0x58c>)
 8009170:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009174:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009178:	f7f7 f9b8 	bl	80004ec <__aeabi_dmul>
 800917c:	4682      	mov	sl, r0
 800917e:	9808      	ldr	r0, [sp, #32]
 8009180:	468b      	mov	fp, r1
 8009182:	f7f7 f939 	bl	80003f8 <__aeabi_ui2d>
 8009186:	4602      	mov	r2, r0
 8009188:	460b      	mov	r3, r1
 800918a:	4650      	mov	r0, sl
 800918c:	4659      	mov	r1, fp
 800918e:	f7f6 fff7 	bl	8000180 <__adddf3>
 8009192:	2d0f      	cmp	r5, #15
 8009194:	4682      	mov	sl, r0
 8009196:	468b      	mov	fp, r1
 8009198:	ddd7      	ble.n	800914a <_strtod_l+0x3aa>
 800919a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800919c:	1b2c      	subs	r4, r5, r4
 800919e:	441c      	add	r4, r3
 80091a0:	2c00      	cmp	r4, #0
 80091a2:	f340 8096 	ble.w	80092d2 <_strtod_l+0x532>
 80091a6:	f014 030f 	ands.w	r3, r4, #15
 80091aa:	d00a      	beq.n	80091c2 <_strtod_l+0x422>
 80091ac:	495f      	ldr	r1, [pc, #380]	@ (800932c <_strtod_l+0x58c>)
 80091ae:	4652      	mov	r2, sl
 80091b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80091b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091b8:	465b      	mov	r3, fp
 80091ba:	f7f7 f997 	bl	80004ec <__aeabi_dmul>
 80091be:	4682      	mov	sl, r0
 80091c0:	468b      	mov	fp, r1
 80091c2:	f034 040f 	bics.w	r4, r4, #15
 80091c6:	d073      	beq.n	80092b0 <_strtod_l+0x510>
 80091c8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80091cc:	dd48      	ble.n	8009260 <_strtod_l+0x4c0>
 80091ce:	2400      	movs	r4, #0
 80091d0:	46a0      	mov	r8, r4
 80091d2:	46a1      	mov	r9, r4
 80091d4:	940a      	str	r4, [sp, #40]	@ 0x28
 80091d6:	2322      	movs	r3, #34	@ 0x22
 80091d8:	f04f 0a00 	mov.w	sl, #0
 80091dc:	9a05      	ldr	r2, [sp, #20]
 80091de:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8009324 <_strtod_l+0x584>
 80091e2:	6013      	str	r3, [r2, #0]
 80091e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	f43f ae13 	beq.w	8008e12 <_strtod_l+0x72>
 80091ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80091ee:	9805      	ldr	r0, [sp, #20]
 80091f0:	f7ff f94c 	bl	800848c <_Bfree>
 80091f4:	4649      	mov	r1, r9
 80091f6:	9805      	ldr	r0, [sp, #20]
 80091f8:	f7ff f948 	bl	800848c <_Bfree>
 80091fc:	4641      	mov	r1, r8
 80091fe:	9805      	ldr	r0, [sp, #20]
 8009200:	f7ff f944 	bl	800848c <_Bfree>
 8009204:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009206:	9805      	ldr	r0, [sp, #20]
 8009208:	f7ff f940 	bl	800848c <_Bfree>
 800920c:	4621      	mov	r1, r4
 800920e:	9805      	ldr	r0, [sp, #20]
 8009210:	f7ff f93c 	bl	800848c <_Bfree>
 8009214:	e5fd      	b.n	8008e12 <_strtod_l+0x72>
 8009216:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009218:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800921c:	4293      	cmp	r3, r2
 800921e:	dbbc      	blt.n	800919a <_strtod_l+0x3fa>
 8009220:	4c42      	ldr	r4, [pc, #264]	@ (800932c <_strtod_l+0x58c>)
 8009222:	f1c5 050f 	rsb	r5, r5, #15
 8009226:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800922a:	4652      	mov	r2, sl
 800922c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009230:	465b      	mov	r3, fp
 8009232:	f7f7 f95b 	bl	80004ec <__aeabi_dmul>
 8009236:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009238:	1b5d      	subs	r5, r3, r5
 800923a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800923e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009242:	e791      	b.n	8009168 <_strtod_l+0x3c8>
 8009244:	3316      	adds	r3, #22
 8009246:	dba8      	blt.n	800919a <_strtod_l+0x3fa>
 8009248:	4b38      	ldr	r3, [pc, #224]	@ (800932c <_strtod_l+0x58c>)
 800924a:	eba9 0808 	sub.w	r8, r9, r8
 800924e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009252:	4650      	mov	r0, sl
 8009254:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009258:	4659      	mov	r1, fp
 800925a:	f7f7 fa71 	bl	8000740 <__aeabi_ddiv>
 800925e:	e760      	b.n	8009122 <_strtod_l+0x382>
 8009260:	4b33      	ldr	r3, [pc, #204]	@ (8009330 <_strtod_l+0x590>)
 8009262:	4650      	mov	r0, sl
 8009264:	9308      	str	r3, [sp, #32]
 8009266:	2300      	movs	r3, #0
 8009268:	4659      	mov	r1, fp
 800926a:	461e      	mov	r6, r3
 800926c:	1124      	asrs	r4, r4, #4
 800926e:	2c01      	cmp	r4, #1
 8009270:	dc21      	bgt.n	80092b6 <_strtod_l+0x516>
 8009272:	b10b      	cbz	r3, 8009278 <_strtod_l+0x4d8>
 8009274:	4682      	mov	sl, r0
 8009276:	468b      	mov	fp, r1
 8009278:	492d      	ldr	r1, [pc, #180]	@ (8009330 <_strtod_l+0x590>)
 800927a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800927e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009282:	4652      	mov	r2, sl
 8009284:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009288:	465b      	mov	r3, fp
 800928a:	f7f7 f92f 	bl	80004ec <__aeabi_dmul>
 800928e:	4b25      	ldr	r3, [pc, #148]	@ (8009324 <_strtod_l+0x584>)
 8009290:	460a      	mov	r2, r1
 8009292:	400b      	ands	r3, r1
 8009294:	4927      	ldr	r1, [pc, #156]	@ (8009334 <_strtod_l+0x594>)
 8009296:	4682      	mov	sl, r0
 8009298:	428b      	cmp	r3, r1
 800929a:	d898      	bhi.n	80091ce <_strtod_l+0x42e>
 800929c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80092a0:	428b      	cmp	r3, r1
 80092a2:	bf86      	itte	hi
 80092a4:	f04f 3aff 	movhi.w	sl, #4294967295
 80092a8:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8009338 <_strtod_l+0x598>
 80092ac:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80092b0:	2300      	movs	r3, #0
 80092b2:	9308      	str	r3, [sp, #32]
 80092b4:	e07a      	b.n	80093ac <_strtod_l+0x60c>
 80092b6:	07e2      	lsls	r2, r4, #31
 80092b8:	d505      	bpl.n	80092c6 <_strtod_l+0x526>
 80092ba:	9b08      	ldr	r3, [sp, #32]
 80092bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c0:	f7f7 f914 	bl	80004ec <__aeabi_dmul>
 80092c4:	2301      	movs	r3, #1
 80092c6:	9a08      	ldr	r2, [sp, #32]
 80092c8:	3601      	adds	r6, #1
 80092ca:	3208      	adds	r2, #8
 80092cc:	1064      	asrs	r4, r4, #1
 80092ce:	9208      	str	r2, [sp, #32]
 80092d0:	e7cd      	b.n	800926e <_strtod_l+0x4ce>
 80092d2:	d0ed      	beq.n	80092b0 <_strtod_l+0x510>
 80092d4:	4264      	negs	r4, r4
 80092d6:	f014 020f 	ands.w	r2, r4, #15
 80092da:	d00a      	beq.n	80092f2 <_strtod_l+0x552>
 80092dc:	4b13      	ldr	r3, [pc, #76]	@ (800932c <_strtod_l+0x58c>)
 80092de:	4650      	mov	r0, sl
 80092e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092e4:	4659      	mov	r1, fp
 80092e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ea:	f7f7 fa29 	bl	8000740 <__aeabi_ddiv>
 80092ee:	4682      	mov	sl, r0
 80092f0:	468b      	mov	fp, r1
 80092f2:	1124      	asrs	r4, r4, #4
 80092f4:	d0dc      	beq.n	80092b0 <_strtod_l+0x510>
 80092f6:	2c1f      	cmp	r4, #31
 80092f8:	dd20      	ble.n	800933c <_strtod_l+0x59c>
 80092fa:	2400      	movs	r4, #0
 80092fc:	46a0      	mov	r8, r4
 80092fe:	46a1      	mov	r9, r4
 8009300:	940a      	str	r4, [sp, #40]	@ 0x28
 8009302:	2322      	movs	r3, #34	@ 0x22
 8009304:	9a05      	ldr	r2, [sp, #20]
 8009306:	f04f 0a00 	mov.w	sl, #0
 800930a:	f04f 0b00 	mov.w	fp, #0
 800930e:	6013      	str	r3, [r2, #0]
 8009310:	e768      	b.n	80091e4 <_strtod_l+0x444>
 8009312:	bf00      	nop
 8009314:	0800ad1f 	.word	0x0800ad1f
 8009318:	0800af34 	.word	0x0800af34
 800931c:	0800ad17 	.word	0x0800ad17
 8009320:	0800ad4e 	.word	0x0800ad4e
 8009324:	7ff00000 	.word	0x7ff00000
 8009328:	0800b0dd 	.word	0x0800b0dd
 800932c:	0800ae68 	.word	0x0800ae68
 8009330:	0800ae40 	.word	0x0800ae40
 8009334:	7ca00000 	.word	0x7ca00000
 8009338:	7fefffff 	.word	0x7fefffff
 800933c:	f014 0310 	ands.w	r3, r4, #16
 8009340:	bf18      	it	ne
 8009342:	236a      	movne	r3, #106	@ 0x6a
 8009344:	4650      	mov	r0, sl
 8009346:	9308      	str	r3, [sp, #32]
 8009348:	4659      	mov	r1, fp
 800934a:	2300      	movs	r3, #0
 800934c:	4ea9      	ldr	r6, [pc, #676]	@ (80095f4 <_strtod_l+0x854>)
 800934e:	07e2      	lsls	r2, r4, #31
 8009350:	d504      	bpl.n	800935c <_strtod_l+0x5bc>
 8009352:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009356:	f7f7 f8c9 	bl	80004ec <__aeabi_dmul>
 800935a:	2301      	movs	r3, #1
 800935c:	1064      	asrs	r4, r4, #1
 800935e:	f106 0608 	add.w	r6, r6, #8
 8009362:	d1f4      	bne.n	800934e <_strtod_l+0x5ae>
 8009364:	b10b      	cbz	r3, 800936a <_strtod_l+0x5ca>
 8009366:	4682      	mov	sl, r0
 8009368:	468b      	mov	fp, r1
 800936a:	9b08      	ldr	r3, [sp, #32]
 800936c:	b1b3      	cbz	r3, 800939c <_strtod_l+0x5fc>
 800936e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009372:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009376:	2b00      	cmp	r3, #0
 8009378:	4659      	mov	r1, fp
 800937a:	dd0f      	ble.n	800939c <_strtod_l+0x5fc>
 800937c:	2b1f      	cmp	r3, #31
 800937e:	dd57      	ble.n	8009430 <_strtod_l+0x690>
 8009380:	2b34      	cmp	r3, #52	@ 0x34
 8009382:	bfd8      	it	le
 8009384:	f04f 33ff 	movle.w	r3, #4294967295
 8009388:	f04f 0a00 	mov.w	sl, #0
 800938c:	bfcf      	iteee	gt
 800938e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009392:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009396:	4093      	lslle	r3, r2
 8009398:	ea03 0b01 	andle.w	fp, r3, r1
 800939c:	2200      	movs	r2, #0
 800939e:	2300      	movs	r3, #0
 80093a0:	4650      	mov	r0, sl
 80093a2:	4659      	mov	r1, fp
 80093a4:	f7f7 fb0a 	bl	80009bc <__aeabi_dcmpeq>
 80093a8:	2800      	cmp	r0, #0
 80093aa:	d1a6      	bne.n	80092fa <_strtod_l+0x55a>
 80093ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093ae:	463a      	mov	r2, r7
 80093b0:	9300      	str	r3, [sp, #0]
 80093b2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80093b4:	462b      	mov	r3, r5
 80093b6:	9805      	ldr	r0, [sp, #20]
 80093b8:	f7ff f8d0 	bl	800855c <__s2b>
 80093bc:	900a      	str	r0, [sp, #40]	@ 0x28
 80093be:	2800      	cmp	r0, #0
 80093c0:	f43f af05 	beq.w	80091ce <_strtod_l+0x42e>
 80093c4:	2400      	movs	r4, #0
 80093c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80093c8:	eba9 0308 	sub.w	r3, r9, r8
 80093cc:	2a00      	cmp	r2, #0
 80093ce:	bfa8      	it	ge
 80093d0:	2300      	movge	r3, #0
 80093d2:	46a0      	mov	r8, r4
 80093d4:	9312      	str	r3, [sp, #72]	@ 0x48
 80093d6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80093da:	9316      	str	r3, [sp, #88]	@ 0x58
 80093dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093de:	9805      	ldr	r0, [sp, #20]
 80093e0:	6859      	ldr	r1, [r3, #4]
 80093e2:	f7ff f813 	bl	800840c <_Balloc>
 80093e6:	4681      	mov	r9, r0
 80093e8:	2800      	cmp	r0, #0
 80093ea:	f43f aef4 	beq.w	80091d6 <_strtod_l+0x436>
 80093ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093f0:	300c      	adds	r0, #12
 80093f2:	691a      	ldr	r2, [r3, #16]
 80093f4:	f103 010c 	add.w	r1, r3, #12
 80093f8:	3202      	adds	r2, #2
 80093fa:	0092      	lsls	r2, r2, #2
 80093fc:	f000 fd66 	bl	8009ecc <memcpy>
 8009400:	ab1c      	add	r3, sp, #112	@ 0x70
 8009402:	9301      	str	r3, [sp, #4]
 8009404:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009406:	9300      	str	r3, [sp, #0]
 8009408:	4652      	mov	r2, sl
 800940a:	465b      	mov	r3, fp
 800940c:	9805      	ldr	r0, [sp, #20]
 800940e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009412:	f7ff fbd5 	bl	8008bc0 <__d2b>
 8009416:	901a      	str	r0, [sp, #104]	@ 0x68
 8009418:	2800      	cmp	r0, #0
 800941a:	f43f aedc 	beq.w	80091d6 <_strtod_l+0x436>
 800941e:	2101      	movs	r1, #1
 8009420:	9805      	ldr	r0, [sp, #20]
 8009422:	f7ff f931 	bl	8008688 <__i2b>
 8009426:	4680      	mov	r8, r0
 8009428:	b948      	cbnz	r0, 800943e <_strtod_l+0x69e>
 800942a:	f04f 0800 	mov.w	r8, #0
 800942e:	e6d2      	b.n	80091d6 <_strtod_l+0x436>
 8009430:	f04f 32ff 	mov.w	r2, #4294967295
 8009434:	fa02 f303 	lsl.w	r3, r2, r3
 8009438:	ea03 0a0a 	and.w	sl, r3, sl
 800943c:	e7ae      	b.n	800939c <_strtod_l+0x5fc>
 800943e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009440:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009442:	2d00      	cmp	r5, #0
 8009444:	bfab      	itete	ge
 8009446:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009448:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800944a:	18ef      	addge	r7, r5, r3
 800944c:	1b5e      	sublt	r6, r3, r5
 800944e:	9b08      	ldr	r3, [sp, #32]
 8009450:	bfa8      	it	ge
 8009452:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009454:	eba5 0503 	sub.w	r5, r5, r3
 8009458:	4415      	add	r5, r2
 800945a:	4b67      	ldr	r3, [pc, #412]	@ (80095f8 <_strtod_l+0x858>)
 800945c:	f105 35ff 	add.w	r5, r5, #4294967295
 8009460:	bfb8      	it	lt
 8009462:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009464:	429d      	cmp	r5, r3
 8009466:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800946a:	da50      	bge.n	800950e <_strtod_l+0x76e>
 800946c:	1b5b      	subs	r3, r3, r5
 800946e:	2b1f      	cmp	r3, #31
 8009470:	f04f 0101 	mov.w	r1, #1
 8009474:	eba2 0203 	sub.w	r2, r2, r3
 8009478:	dc3d      	bgt.n	80094f6 <_strtod_l+0x756>
 800947a:	fa01 f303 	lsl.w	r3, r1, r3
 800947e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009480:	2300      	movs	r3, #0
 8009482:	9310      	str	r3, [sp, #64]	@ 0x40
 8009484:	18bd      	adds	r5, r7, r2
 8009486:	9b08      	ldr	r3, [sp, #32]
 8009488:	42af      	cmp	r7, r5
 800948a:	4416      	add	r6, r2
 800948c:	441e      	add	r6, r3
 800948e:	463b      	mov	r3, r7
 8009490:	bfa8      	it	ge
 8009492:	462b      	movge	r3, r5
 8009494:	42b3      	cmp	r3, r6
 8009496:	bfa8      	it	ge
 8009498:	4633      	movge	r3, r6
 800949a:	2b00      	cmp	r3, #0
 800949c:	bfc2      	ittt	gt
 800949e:	1aed      	subgt	r5, r5, r3
 80094a0:	1af6      	subgt	r6, r6, r3
 80094a2:	1aff      	subgt	r7, r7, r3
 80094a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	dd16      	ble.n	80094d8 <_strtod_l+0x738>
 80094aa:	4641      	mov	r1, r8
 80094ac:	461a      	mov	r2, r3
 80094ae:	9805      	ldr	r0, [sp, #20]
 80094b0:	f7ff f9a8 	bl	8008804 <__pow5mult>
 80094b4:	4680      	mov	r8, r0
 80094b6:	2800      	cmp	r0, #0
 80094b8:	d0b7      	beq.n	800942a <_strtod_l+0x68a>
 80094ba:	4601      	mov	r1, r0
 80094bc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80094be:	9805      	ldr	r0, [sp, #20]
 80094c0:	f7ff f8f8 	bl	80086b4 <__multiply>
 80094c4:	900e      	str	r0, [sp, #56]	@ 0x38
 80094c6:	2800      	cmp	r0, #0
 80094c8:	f43f ae85 	beq.w	80091d6 <_strtod_l+0x436>
 80094cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80094ce:	9805      	ldr	r0, [sp, #20]
 80094d0:	f7fe ffdc 	bl	800848c <_Bfree>
 80094d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80094d8:	2d00      	cmp	r5, #0
 80094da:	dc1d      	bgt.n	8009518 <_strtod_l+0x778>
 80094dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094de:	2b00      	cmp	r3, #0
 80094e0:	dd23      	ble.n	800952a <_strtod_l+0x78a>
 80094e2:	4649      	mov	r1, r9
 80094e4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80094e6:	9805      	ldr	r0, [sp, #20]
 80094e8:	f7ff f98c 	bl	8008804 <__pow5mult>
 80094ec:	4681      	mov	r9, r0
 80094ee:	b9e0      	cbnz	r0, 800952a <_strtod_l+0x78a>
 80094f0:	f04f 0900 	mov.w	r9, #0
 80094f4:	e66f      	b.n	80091d6 <_strtod_l+0x436>
 80094f6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80094fa:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80094fe:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009502:	35e2      	adds	r5, #226	@ 0xe2
 8009504:	fa01 f305 	lsl.w	r3, r1, r5
 8009508:	9310      	str	r3, [sp, #64]	@ 0x40
 800950a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800950c:	e7ba      	b.n	8009484 <_strtod_l+0x6e4>
 800950e:	2300      	movs	r3, #0
 8009510:	9310      	str	r3, [sp, #64]	@ 0x40
 8009512:	2301      	movs	r3, #1
 8009514:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009516:	e7b5      	b.n	8009484 <_strtod_l+0x6e4>
 8009518:	462a      	mov	r2, r5
 800951a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800951c:	9805      	ldr	r0, [sp, #20]
 800951e:	f7ff f9cb 	bl	80088b8 <__lshift>
 8009522:	901a      	str	r0, [sp, #104]	@ 0x68
 8009524:	2800      	cmp	r0, #0
 8009526:	d1d9      	bne.n	80094dc <_strtod_l+0x73c>
 8009528:	e655      	b.n	80091d6 <_strtod_l+0x436>
 800952a:	2e00      	cmp	r6, #0
 800952c:	dd07      	ble.n	800953e <_strtod_l+0x79e>
 800952e:	4649      	mov	r1, r9
 8009530:	4632      	mov	r2, r6
 8009532:	9805      	ldr	r0, [sp, #20]
 8009534:	f7ff f9c0 	bl	80088b8 <__lshift>
 8009538:	4681      	mov	r9, r0
 800953a:	2800      	cmp	r0, #0
 800953c:	d0d8      	beq.n	80094f0 <_strtod_l+0x750>
 800953e:	2f00      	cmp	r7, #0
 8009540:	dd08      	ble.n	8009554 <_strtod_l+0x7b4>
 8009542:	4641      	mov	r1, r8
 8009544:	463a      	mov	r2, r7
 8009546:	9805      	ldr	r0, [sp, #20]
 8009548:	f7ff f9b6 	bl	80088b8 <__lshift>
 800954c:	4680      	mov	r8, r0
 800954e:	2800      	cmp	r0, #0
 8009550:	f43f ae41 	beq.w	80091d6 <_strtod_l+0x436>
 8009554:	464a      	mov	r2, r9
 8009556:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009558:	9805      	ldr	r0, [sp, #20]
 800955a:	f7ff fa35 	bl	80089c8 <__mdiff>
 800955e:	4604      	mov	r4, r0
 8009560:	2800      	cmp	r0, #0
 8009562:	f43f ae38 	beq.w	80091d6 <_strtod_l+0x436>
 8009566:	68c3      	ldr	r3, [r0, #12]
 8009568:	4641      	mov	r1, r8
 800956a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800956c:	2300      	movs	r3, #0
 800956e:	60c3      	str	r3, [r0, #12]
 8009570:	f7ff fa0e 	bl	8008990 <__mcmp>
 8009574:	2800      	cmp	r0, #0
 8009576:	da45      	bge.n	8009604 <_strtod_l+0x864>
 8009578:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800957a:	ea53 030a 	orrs.w	r3, r3, sl
 800957e:	d16b      	bne.n	8009658 <_strtod_l+0x8b8>
 8009580:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009584:	2b00      	cmp	r3, #0
 8009586:	d167      	bne.n	8009658 <_strtod_l+0x8b8>
 8009588:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800958c:	0d1b      	lsrs	r3, r3, #20
 800958e:	051b      	lsls	r3, r3, #20
 8009590:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009594:	d960      	bls.n	8009658 <_strtod_l+0x8b8>
 8009596:	6963      	ldr	r3, [r4, #20]
 8009598:	b913      	cbnz	r3, 80095a0 <_strtod_l+0x800>
 800959a:	6923      	ldr	r3, [r4, #16]
 800959c:	2b01      	cmp	r3, #1
 800959e:	dd5b      	ble.n	8009658 <_strtod_l+0x8b8>
 80095a0:	4621      	mov	r1, r4
 80095a2:	2201      	movs	r2, #1
 80095a4:	9805      	ldr	r0, [sp, #20]
 80095a6:	f7ff f987 	bl	80088b8 <__lshift>
 80095aa:	4641      	mov	r1, r8
 80095ac:	4604      	mov	r4, r0
 80095ae:	f7ff f9ef 	bl	8008990 <__mcmp>
 80095b2:	2800      	cmp	r0, #0
 80095b4:	dd50      	ble.n	8009658 <_strtod_l+0x8b8>
 80095b6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80095ba:	9a08      	ldr	r2, [sp, #32]
 80095bc:	0d1b      	lsrs	r3, r3, #20
 80095be:	051b      	lsls	r3, r3, #20
 80095c0:	2a00      	cmp	r2, #0
 80095c2:	d06a      	beq.n	800969a <_strtod_l+0x8fa>
 80095c4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80095c8:	d867      	bhi.n	800969a <_strtod_l+0x8fa>
 80095ca:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80095ce:	f67f ae98 	bls.w	8009302 <_strtod_l+0x562>
 80095d2:	4650      	mov	r0, sl
 80095d4:	4659      	mov	r1, fp
 80095d6:	4b09      	ldr	r3, [pc, #36]	@ (80095fc <_strtod_l+0x85c>)
 80095d8:	2200      	movs	r2, #0
 80095da:	f7f6 ff87 	bl	80004ec <__aeabi_dmul>
 80095de:	4b08      	ldr	r3, [pc, #32]	@ (8009600 <_strtod_l+0x860>)
 80095e0:	4682      	mov	sl, r0
 80095e2:	400b      	ands	r3, r1
 80095e4:	468b      	mov	fp, r1
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	f47f ae00 	bne.w	80091ec <_strtod_l+0x44c>
 80095ec:	2322      	movs	r3, #34	@ 0x22
 80095ee:	9a05      	ldr	r2, [sp, #20]
 80095f0:	6013      	str	r3, [r2, #0]
 80095f2:	e5fb      	b.n	80091ec <_strtod_l+0x44c>
 80095f4:	0800af60 	.word	0x0800af60
 80095f8:	fffffc02 	.word	0xfffffc02
 80095fc:	39500000 	.word	0x39500000
 8009600:	7ff00000 	.word	0x7ff00000
 8009604:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009608:	d165      	bne.n	80096d6 <_strtod_l+0x936>
 800960a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800960c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009610:	b35a      	cbz	r2, 800966a <_strtod_l+0x8ca>
 8009612:	4a99      	ldr	r2, [pc, #612]	@ (8009878 <_strtod_l+0xad8>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d12b      	bne.n	8009670 <_strtod_l+0x8d0>
 8009618:	9b08      	ldr	r3, [sp, #32]
 800961a:	4651      	mov	r1, sl
 800961c:	b303      	cbz	r3, 8009660 <_strtod_l+0x8c0>
 800961e:	465a      	mov	r2, fp
 8009620:	4b96      	ldr	r3, [pc, #600]	@ (800987c <_strtod_l+0xadc>)
 8009622:	4013      	ands	r3, r2
 8009624:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009628:	f04f 32ff 	mov.w	r2, #4294967295
 800962c:	d81b      	bhi.n	8009666 <_strtod_l+0x8c6>
 800962e:	0d1b      	lsrs	r3, r3, #20
 8009630:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009634:	fa02 f303 	lsl.w	r3, r2, r3
 8009638:	4299      	cmp	r1, r3
 800963a:	d119      	bne.n	8009670 <_strtod_l+0x8d0>
 800963c:	4b90      	ldr	r3, [pc, #576]	@ (8009880 <_strtod_l+0xae0>)
 800963e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009640:	429a      	cmp	r2, r3
 8009642:	d102      	bne.n	800964a <_strtod_l+0x8aa>
 8009644:	3101      	adds	r1, #1
 8009646:	f43f adc6 	beq.w	80091d6 <_strtod_l+0x436>
 800964a:	f04f 0a00 	mov.w	sl, #0
 800964e:	4b8b      	ldr	r3, [pc, #556]	@ (800987c <_strtod_l+0xadc>)
 8009650:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009652:	401a      	ands	r2, r3
 8009654:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009658:	9b08      	ldr	r3, [sp, #32]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d1b9      	bne.n	80095d2 <_strtod_l+0x832>
 800965e:	e5c5      	b.n	80091ec <_strtod_l+0x44c>
 8009660:	f04f 33ff 	mov.w	r3, #4294967295
 8009664:	e7e8      	b.n	8009638 <_strtod_l+0x898>
 8009666:	4613      	mov	r3, r2
 8009668:	e7e6      	b.n	8009638 <_strtod_l+0x898>
 800966a:	ea53 030a 	orrs.w	r3, r3, sl
 800966e:	d0a2      	beq.n	80095b6 <_strtod_l+0x816>
 8009670:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009672:	b1db      	cbz	r3, 80096ac <_strtod_l+0x90c>
 8009674:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009676:	4213      	tst	r3, r2
 8009678:	d0ee      	beq.n	8009658 <_strtod_l+0x8b8>
 800967a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800967c:	4650      	mov	r0, sl
 800967e:	4659      	mov	r1, fp
 8009680:	9a08      	ldr	r2, [sp, #32]
 8009682:	b1bb      	cbz	r3, 80096b4 <_strtod_l+0x914>
 8009684:	f7ff fb68 	bl	8008d58 <sulp>
 8009688:	4602      	mov	r2, r0
 800968a:	460b      	mov	r3, r1
 800968c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009690:	f7f6 fd76 	bl	8000180 <__adddf3>
 8009694:	4682      	mov	sl, r0
 8009696:	468b      	mov	fp, r1
 8009698:	e7de      	b.n	8009658 <_strtod_l+0x8b8>
 800969a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800969e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80096a2:	f04f 3aff 	mov.w	sl, #4294967295
 80096a6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80096aa:	e7d5      	b.n	8009658 <_strtod_l+0x8b8>
 80096ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80096ae:	ea13 0f0a 	tst.w	r3, sl
 80096b2:	e7e1      	b.n	8009678 <_strtod_l+0x8d8>
 80096b4:	f7ff fb50 	bl	8008d58 <sulp>
 80096b8:	4602      	mov	r2, r0
 80096ba:	460b      	mov	r3, r1
 80096bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80096c0:	f7f6 fd5c 	bl	800017c <__aeabi_dsub>
 80096c4:	2200      	movs	r2, #0
 80096c6:	2300      	movs	r3, #0
 80096c8:	4682      	mov	sl, r0
 80096ca:	468b      	mov	fp, r1
 80096cc:	f7f7 f976 	bl	80009bc <__aeabi_dcmpeq>
 80096d0:	2800      	cmp	r0, #0
 80096d2:	d0c1      	beq.n	8009658 <_strtod_l+0x8b8>
 80096d4:	e615      	b.n	8009302 <_strtod_l+0x562>
 80096d6:	4641      	mov	r1, r8
 80096d8:	4620      	mov	r0, r4
 80096da:	f7ff fac9 	bl	8008c70 <__ratio>
 80096de:	2200      	movs	r2, #0
 80096e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80096e4:	4606      	mov	r6, r0
 80096e6:	460f      	mov	r7, r1
 80096e8:	f7f7 f97c 	bl	80009e4 <__aeabi_dcmple>
 80096ec:	2800      	cmp	r0, #0
 80096ee:	d06d      	beq.n	80097cc <_strtod_l+0xa2c>
 80096f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d178      	bne.n	80097e8 <_strtod_l+0xa48>
 80096f6:	f1ba 0f00 	cmp.w	sl, #0
 80096fa:	d156      	bne.n	80097aa <_strtod_l+0xa0a>
 80096fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80096fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009702:	2b00      	cmp	r3, #0
 8009704:	d158      	bne.n	80097b8 <_strtod_l+0xa18>
 8009706:	2200      	movs	r2, #0
 8009708:	4630      	mov	r0, r6
 800970a:	4639      	mov	r1, r7
 800970c:	4b5d      	ldr	r3, [pc, #372]	@ (8009884 <_strtod_l+0xae4>)
 800970e:	f7f7 f95f 	bl	80009d0 <__aeabi_dcmplt>
 8009712:	2800      	cmp	r0, #0
 8009714:	d157      	bne.n	80097c6 <_strtod_l+0xa26>
 8009716:	4630      	mov	r0, r6
 8009718:	4639      	mov	r1, r7
 800971a:	2200      	movs	r2, #0
 800971c:	4b5a      	ldr	r3, [pc, #360]	@ (8009888 <_strtod_l+0xae8>)
 800971e:	f7f6 fee5 	bl	80004ec <__aeabi_dmul>
 8009722:	4606      	mov	r6, r0
 8009724:	460f      	mov	r7, r1
 8009726:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800972a:	9606      	str	r6, [sp, #24]
 800972c:	9307      	str	r3, [sp, #28]
 800972e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009732:	4d52      	ldr	r5, [pc, #328]	@ (800987c <_strtod_l+0xadc>)
 8009734:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009738:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800973a:	401d      	ands	r5, r3
 800973c:	4b53      	ldr	r3, [pc, #332]	@ (800988c <_strtod_l+0xaec>)
 800973e:	429d      	cmp	r5, r3
 8009740:	f040 80aa 	bne.w	8009898 <_strtod_l+0xaf8>
 8009744:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009746:	4650      	mov	r0, sl
 8009748:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800974c:	4659      	mov	r1, fp
 800974e:	f7ff f9cf 	bl	8008af0 <__ulp>
 8009752:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009756:	f7f6 fec9 	bl	80004ec <__aeabi_dmul>
 800975a:	4652      	mov	r2, sl
 800975c:	465b      	mov	r3, fp
 800975e:	f7f6 fd0f 	bl	8000180 <__adddf3>
 8009762:	460b      	mov	r3, r1
 8009764:	4945      	ldr	r1, [pc, #276]	@ (800987c <_strtod_l+0xadc>)
 8009766:	4a4a      	ldr	r2, [pc, #296]	@ (8009890 <_strtod_l+0xaf0>)
 8009768:	4019      	ands	r1, r3
 800976a:	4291      	cmp	r1, r2
 800976c:	4682      	mov	sl, r0
 800976e:	d942      	bls.n	80097f6 <_strtod_l+0xa56>
 8009770:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009772:	4b43      	ldr	r3, [pc, #268]	@ (8009880 <_strtod_l+0xae0>)
 8009774:	429a      	cmp	r2, r3
 8009776:	d103      	bne.n	8009780 <_strtod_l+0x9e0>
 8009778:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800977a:	3301      	adds	r3, #1
 800977c:	f43f ad2b 	beq.w	80091d6 <_strtod_l+0x436>
 8009780:	f04f 3aff 	mov.w	sl, #4294967295
 8009784:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8009880 <_strtod_l+0xae0>
 8009788:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800978a:	9805      	ldr	r0, [sp, #20]
 800978c:	f7fe fe7e 	bl	800848c <_Bfree>
 8009790:	4649      	mov	r1, r9
 8009792:	9805      	ldr	r0, [sp, #20]
 8009794:	f7fe fe7a 	bl	800848c <_Bfree>
 8009798:	4641      	mov	r1, r8
 800979a:	9805      	ldr	r0, [sp, #20]
 800979c:	f7fe fe76 	bl	800848c <_Bfree>
 80097a0:	4621      	mov	r1, r4
 80097a2:	9805      	ldr	r0, [sp, #20]
 80097a4:	f7fe fe72 	bl	800848c <_Bfree>
 80097a8:	e618      	b.n	80093dc <_strtod_l+0x63c>
 80097aa:	f1ba 0f01 	cmp.w	sl, #1
 80097ae:	d103      	bne.n	80097b8 <_strtod_l+0xa18>
 80097b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	f43f ada5 	beq.w	8009302 <_strtod_l+0x562>
 80097b8:	2200      	movs	r2, #0
 80097ba:	4b36      	ldr	r3, [pc, #216]	@ (8009894 <_strtod_l+0xaf4>)
 80097bc:	2600      	movs	r6, #0
 80097be:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80097c2:	4f30      	ldr	r7, [pc, #192]	@ (8009884 <_strtod_l+0xae4>)
 80097c4:	e7b3      	b.n	800972e <_strtod_l+0x98e>
 80097c6:	2600      	movs	r6, #0
 80097c8:	4f2f      	ldr	r7, [pc, #188]	@ (8009888 <_strtod_l+0xae8>)
 80097ca:	e7ac      	b.n	8009726 <_strtod_l+0x986>
 80097cc:	4630      	mov	r0, r6
 80097ce:	4639      	mov	r1, r7
 80097d0:	4b2d      	ldr	r3, [pc, #180]	@ (8009888 <_strtod_l+0xae8>)
 80097d2:	2200      	movs	r2, #0
 80097d4:	f7f6 fe8a 	bl	80004ec <__aeabi_dmul>
 80097d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097da:	4606      	mov	r6, r0
 80097dc:	460f      	mov	r7, r1
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d0a1      	beq.n	8009726 <_strtod_l+0x986>
 80097e2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80097e6:	e7a2      	b.n	800972e <_strtod_l+0x98e>
 80097e8:	2200      	movs	r2, #0
 80097ea:	4b26      	ldr	r3, [pc, #152]	@ (8009884 <_strtod_l+0xae4>)
 80097ec:	4616      	mov	r6, r2
 80097ee:	461f      	mov	r7, r3
 80097f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80097f4:	e79b      	b.n	800972e <_strtod_l+0x98e>
 80097f6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80097fa:	9b08      	ldr	r3, [sp, #32]
 80097fc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009800:	2b00      	cmp	r3, #0
 8009802:	d1c1      	bne.n	8009788 <_strtod_l+0x9e8>
 8009804:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009808:	0d1b      	lsrs	r3, r3, #20
 800980a:	051b      	lsls	r3, r3, #20
 800980c:	429d      	cmp	r5, r3
 800980e:	d1bb      	bne.n	8009788 <_strtod_l+0x9e8>
 8009810:	4630      	mov	r0, r6
 8009812:	4639      	mov	r1, r7
 8009814:	f7f7 fc10 	bl	8001038 <__aeabi_d2lz>
 8009818:	f7f6 fe3a 	bl	8000490 <__aeabi_l2d>
 800981c:	4602      	mov	r2, r0
 800981e:	460b      	mov	r3, r1
 8009820:	4630      	mov	r0, r6
 8009822:	4639      	mov	r1, r7
 8009824:	f7f6 fcaa 	bl	800017c <__aeabi_dsub>
 8009828:	460b      	mov	r3, r1
 800982a:	4602      	mov	r2, r0
 800982c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009830:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009834:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009836:	ea46 060a 	orr.w	r6, r6, sl
 800983a:	431e      	orrs	r6, r3
 800983c:	d069      	beq.n	8009912 <_strtod_l+0xb72>
 800983e:	a30a      	add	r3, pc, #40	@ (adr r3, 8009868 <_strtod_l+0xac8>)
 8009840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009844:	f7f7 f8c4 	bl	80009d0 <__aeabi_dcmplt>
 8009848:	2800      	cmp	r0, #0
 800984a:	f47f accf 	bne.w	80091ec <_strtod_l+0x44c>
 800984e:	a308      	add	r3, pc, #32	@ (adr r3, 8009870 <_strtod_l+0xad0>)
 8009850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009854:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009858:	f7f7 f8d8 	bl	8000a0c <__aeabi_dcmpgt>
 800985c:	2800      	cmp	r0, #0
 800985e:	d093      	beq.n	8009788 <_strtod_l+0x9e8>
 8009860:	e4c4      	b.n	80091ec <_strtod_l+0x44c>
 8009862:	bf00      	nop
 8009864:	f3af 8000 	nop.w
 8009868:	94a03595 	.word	0x94a03595
 800986c:	3fdfffff 	.word	0x3fdfffff
 8009870:	35afe535 	.word	0x35afe535
 8009874:	3fe00000 	.word	0x3fe00000
 8009878:	000fffff 	.word	0x000fffff
 800987c:	7ff00000 	.word	0x7ff00000
 8009880:	7fefffff 	.word	0x7fefffff
 8009884:	3ff00000 	.word	0x3ff00000
 8009888:	3fe00000 	.word	0x3fe00000
 800988c:	7fe00000 	.word	0x7fe00000
 8009890:	7c9fffff 	.word	0x7c9fffff
 8009894:	bff00000 	.word	0xbff00000
 8009898:	9b08      	ldr	r3, [sp, #32]
 800989a:	b323      	cbz	r3, 80098e6 <_strtod_l+0xb46>
 800989c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80098a0:	d821      	bhi.n	80098e6 <_strtod_l+0xb46>
 80098a2:	a327      	add	r3, pc, #156	@ (adr r3, 8009940 <_strtod_l+0xba0>)
 80098a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a8:	4630      	mov	r0, r6
 80098aa:	4639      	mov	r1, r7
 80098ac:	f7f7 f89a 	bl	80009e4 <__aeabi_dcmple>
 80098b0:	b1a0      	cbz	r0, 80098dc <_strtod_l+0xb3c>
 80098b2:	4639      	mov	r1, r7
 80098b4:	4630      	mov	r0, r6
 80098b6:	f7f7 f8f1 	bl	8000a9c <__aeabi_d2uiz>
 80098ba:	2801      	cmp	r0, #1
 80098bc:	bf38      	it	cc
 80098be:	2001      	movcc	r0, #1
 80098c0:	f7f6 fd9a 	bl	80003f8 <__aeabi_ui2d>
 80098c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098c6:	4606      	mov	r6, r0
 80098c8:	460f      	mov	r7, r1
 80098ca:	b9fb      	cbnz	r3, 800990c <_strtod_l+0xb6c>
 80098cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80098d0:	9014      	str	r0, [sp, #80]	@ 0x50
 80098d2:	9315      	str	r3, [sp, #84]	@ 0x54
 80098d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80098d8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80098dc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80098de:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80098e2:	1b5b      	subs	r3, r3, r5
 80098e4:	9311      	str	r3, [sp, #68]	@ 0x44
 80098e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80098ea:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80098ee:	f7ff f8ff 	bl	8008af0 <__ulp>
 80098f2:	4602      	mov	r2, r0
 80098f4:	460b      	mov	r3, r1
 80098f6:	4650      	mov	r0, sl
 80098f8:	4659      	mov	r1, fp
 80098fa:	f7f6 fdf7 	bl	80004ec <__aeabi_dmul>
 80098fe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009902:	f7f6 fc3d 	bl	8000180 <__adddf3>
 8009906:	4682      	mov	sl, r0
 8009908:	468b      	mov	fp, r1
 800990a:	e776      	b.n	80097fa <_strtod_l+0xa5a>
 800990c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009910:	e7e0      	b.n	80098d4 <_strtod_l+0xb34>
 8009912:	a30d      	add	r3, pc, #52	@ (adr r3, 8009948 <_strtod_l+0xba8>)
 8009914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009918:	f7f7 f85a 	bl	80009d0 <__aeabi_dcmplt>
 800991c:	e79e      	b.n	800985c <_strtod_l+0xabc>
 800991e:	2300      	movs	r3, #0
 8009920:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009922:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009924:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009926:	6013      	str	r3, [r2, #0]
 8009928:	f7ff ba77 	b.w	8008e1a <_strtod_l+0x7a>
 800992c:	2a65      	cmp	r2, #101	@ 0x65
 800992e:	f43f ab6e 	beq.w	800900e <_strtod_l+0x26e>
 8009932:	2a45      	cmp	r2, #69	@ 0x45
 8009934:	f43f ab6b 	beq.w	800900e <_strtod_l+0x26e>
 8009938:	2301      	movs	r3, #1
 800993a:	f7ff bba6 	b.w	800908a <_strtod_l+0x2ea>
 800993e:	bf00      	nop
 8009940:	ffc00000 	.word	0xffc00000
 8009944:	41dfffff 	.word	0x41dfffff
 8009948:	94a03595 	.word	0x94a03595
 800994c:	3fcfffff 	.word	0x3fcfffff

08009950 <_strtod_r>:
 8009950:	4b01      	ldr	r3, [pc, #4]	@ (8009958 <_strtod_r+0x8>)
 8009952:	f7ff ba25 	b.w	8008da0 <_strtod_l>
 8009956:	bf00      	nop
 8009958:	20000068 	.word	0x20000068

0800995c <_strtol_l.constprop.0>:
 800995c:	2b24      	cmp	r3, #36	@ 0x24
 800995e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009962:	4686      	mov	lr, r0
 8009964:	4690      	mov	r8, r2
 8009966:	d801      	bhi.n	800996c <_strtol_l.constprop.0+0x10>
 8009968:	2b01      	cmp	r3, #1
 800996a:	d106      	bne.n	800997a <_strtol_l.constprop.0+0x1e>
 800996c:	f7fd fdc0 	bl	80074f0 <__errno>
 8009970:	2316      	movs	r3, #22
 8009972:	6003      	str	r3, [r0, #0]
 8009974:	2000      	movs	r0, #0
 8009976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800997a:	460d      	mov	r5, r1
 800997c:	4833      	ldr	r0, [pc, #204]	@ (8009a4c <_strtol_l.constprop.0+0xf0>)
 800997e:	462a      	mov	r2, r5
 8009980:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009984:	5d06      	ldrb	r6, [r0, r4]
 8009986:	f016 0608 	ands.w	r6, r6, #8
 800998a:	d1f8      	bne.n	800997e <_strtol_l.constprop.0+0x22>
 800998c:	2c2d      	cmp	r4, #45	@ 0x2d
 800998e:	d12d      	bne.n	80099ec <_strtol_l.constprop.0+0x90>
 8009990:	2601      	movs	r6, #1
 8009992:	782c      	ldrb	r4, [r5, #0]
 8009994:	1c95      	adds	r5, r2, #2
 8009996:	f033 0210 	bics.w	r2, r3, #16
 800999a:	d109      	bne.n	80099b0 <_strtol_l.constprop.0+0x54>
 800999c:	2c30      	cmp	r4, #48	@ 0x30
 800999e:	d12a      	bne.n	80099f6 <_strtol_l.constprop.0+0x9a>
 80099a0:	782a      	ldrb	r2, [r5, #0]
 80099a2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80099a6:	2a58      	cmp	r2, #88	@ 0x58
 80099a8:	d125      	bne.n	80099f6 <_strtol_l.constprop.0+0x9a>
 80099aa:	2310      	movs	r3, #16
 80099ac:	786c      	ldrb	r4, [r5, #1]
 80099ae:	3502      	adds	r5, #2
 80099b0:	2200      	movs	r2, #0
 80099b2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80099b6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80099ba:	fbbc f9f3 	udiv	r9, ip, r3
 80099be:	4610      	mov	r0, r2
 80099c0:	fb03 ca19 	mls	sl, r3, r9, ip
 80099c4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80099c8:	2f09      	cmp	r7, #9
 80099ca:	d81b      	bhi.n	8009a04 <_strtol_l.constprop.0+0xa8>
 80099cc:	463c      	mov	r4, r7
 80099ce:	42a3      	cmp	r3, r4
 80099d0:	dd27      	ble.n	8009a22 <_strtol_l.constprop.0+0xc6>
 80099d2:	1c57      	adds	r7, r2, #1
 80099d4:	d007      	beq.n	80099e6 <_strtol_l.constprop.0+0x8a>
 80099d6:	4581      	cmp	r9, r0
 80099d8:	d320      	bcc.n	8009a1c <_strtol_l.constprop.0+0xc0>
 80099da:	d101      	bne.n	80099e0 <_strtol_l.constprop.0+0x84>
 80099dc:	45a2      	cmp	sl, r4
 80099de:	db1d      	blt.n	8009a1c <_strtol_l.constprop.0+0xc0>
 80099e0:	2201      	movs	r2, #1
 80099e2:	fb00 4003 	mla	r0, r0, r3, r4
 80099e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80099ea:	e7eb      	b.n	80099c4 <_strtol_l.constprop.0+0x68>
 80099ec:	2c2b      	cmp	r4, #43	@ 0x2b
 80099ee:	bf04      	itt	eq
 80099f0:	782c      	ldrbeq	r4, [r5, #0]
 80099f2:	1c95      	addeq	r5, r2, #2
 80099f4:	e7cf      	b.n	8009996 <_strtol_l.constprop.0+0x3a>
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d1da      	bne.n	80099b0 <_strtol_l.constprop.0+0x54>
 80099fa:	2c30      	cmp	r4, #48	@ 0x30
 80099fc:	bf0c      	ite	eq
 80099fe:	2308      	moveq	r3, #8
 8009a00:	230a      	movne	r3, #10
 8009a02:	e7d5      	b.n	80099b0 <_strtol_l.constprop.0+0x54>
 8009a04:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009a08:	2f19      	cmp	r7, #25
 8009a0a:	d801      	bhi.n	8009a10 <_strtol_l.constprop.0+0xb4>
 8009a0c:	3c37      	subs	r4, #55	@ 0x37
 8009a0e:	e7de      	b.n	80099ce <_strtol_l.constprop.0+0x72>
 8009a10:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009a14:	2f19      	cmp	r7, #25
 8009a16:	d804      	bhi.n	8009a22 <_strtol_l.constprop.0+0xc6>
 8009a18:	3c57      	subs	r4, #87	@ 0x57
 8009a1a:	e7d8      	b.n	80099ce <_strtol_l.constprop.0+0x72>
 8009a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8009a20:	e7e1      	b.n	80099e6 <_strtol_l.constprop.0+0x8a>
 8009a22:	1c53      	adds	r3, r2, #1
 8009a24:	d108      	bne.n	8009a38 <_strtol_l.constprop.0+0xdc>
 8009a26:	2322      	movs	r3, #34	@ 0x22
 8009a28:	4660      	mov	r0, ip
 8009a2a:	f8ce 3000 	str.w	r3, [lr]
 8009a2e:	f1b8 0f00 	cmp.w	r8, #0
 8009a32:	d0a0      	beq.n	8009976 <_strtol_l.constprop.0+0x1a>
 8009a34:	1e69      	subs	r1, r5, #1
 8009a36:	e006      	b.n	8009a46 <_strtol_l.constprop.0+0xea>
 8009a38:	b106      	cbz	r6, 8009a3c <_strtol_l.constprop.0+0xe0>
 8009a3a:	4240      	negs	r0, r0
 8009a3c:	f1b8 0f00 	cmp.w	r8, #0
 8009a40:	d099      	beq.n	8009976 <_strtol_l.constprop.0+0x1a>
 8009a42:	2a00      	cmp	r2, #0
 8009a44:	d1f6      	bne.n	8009a34 <_strtol_l.constprop.0+0xd8>
 8009a46:	f8c8 1000 	str.w	r1, [r8]
 8009a4a:	e794      	b.n	8009976 <_strtol_l.constprop.0+0x1a>
 8009a4c:	0800af89 	.word	0x0800af89

08009a50 <_strtol_r>:
 8009a50:	f7ff bf84 	b.w	800995c <_strtol_l.constprop.0>

08009a54 <__ssputs_r>:
 8009a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a58:	461f      	mov	r7, r3
 8009a5a:	688e      	ldr	r6, [r1, #8]
 8009a5c:	4682      	mov	sl, r0
 8009a5e:	42be      	cmp	r6, r7
 8009a60:	460c      	mov	r4, r1
 8009a62:	4690      	mov	r8, r2
 8009a64:	680b      	ldr	r3, [r1, #0]
 8009a66:	d82d      	bhi.n	8009ac4 <__ssputs_r+0x70>
 8009a68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009a6c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009a70:	d026      	beq.n	8009ac0 <__ssputs_r+0x6c>
 8009a72:	6965      	ldr	r5, [r4, #20]
 8009a74:	6909      	ldr	r1, [r1, #16]
 8009a76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a7a:	eba3 0901 	sub.w	r9, r3, r1
 8009a7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009a82:	1c7b      	adds	r3, r7, #1
 8009a84:	444b      	add	r3, r9
 8009a86:	106d      	asrs	r5, r5, #1
 8009a88:	429d      	cmp	r5, r3
 8009a8a:	bf38      	it	cc
 8009a8c:	461d      	movcc	r5, r3
 8009a8e:	0553      	lsls	r3, r2, #21
 8009a90:	d527      	bpl.n	8009ae2 <__ssputs_r+0x8e>
 8009a92:	4629      	mov	r1, r5
 8009a94:	f7fe fc2e 	bl	80082f4 <_malloc_r>
 8009a98:	4606      	mov	r6, r0
 8009a9a:	b360      	cbz	r0, 8009af6 <__ssputs_r+0xa2>
 8009a9c:	464a      	mov	r2, r9
 8009a9e:	6921      	ldr	r1, [r4, #16]
 8009aa0:	f000 fa14 	bl	8009ecc <memcpy>
 8009aa4:	89a3      	ldrh	r3, [r4, #12]
 8009aa6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009aaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009aae:	81a3      	strh	r3, [r4, #12]
 8009ab0:	6126      	str	r6, [r4, #16]
 8009ab2:	444e      	add	r6, r9
 8009ab4:	6026      	str	r6, [r4, #0]
 8009ab6:	463e      	mov	r6, r7
 8009ab8:	6165      	str	r5, [r4, #20]
 8009aba:	eba5 0509 	sub.w	r5, r5, r9
 8009abe:	60a5      	str	r5, [r4, #8]
 8009ac0:	42be      	cmp	r6, r7
 8009ac2:	d900      	bls.n	8009ac6 <__ssputs_r+0x72>
 8009ac4:	463e      	mov	r6, r7
 8009ac6:	4632      	mov	r2, r6
 8009ac8:	4641      	mov	r1, r8
 8009aca:	6820      	ldr	r0, [r4, #0]
 8009acc:	f000 f9c2 	bl	8009e54 <memmove>
 8009ad0:	2000      	movs	r0, #0
 8009ad2:	68a3      	ldr	r3, [r4, #8]
 8009ad4:	1b9b      	subs	r3, r3, r6
 8009ad6:	60a3      	str	r3, [r4, #8]
 8009ad8:	6823      	ldr	r3, [r4, #0]
 8009ada:	4433      	add	r3, r6
 8009adc:	6023      	str	r3, [r4, #0]
 8009ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ae2:	462a      	mov	r2, r5
 8009ae4:	f000 fd83 	bl	800a5ee <_realloc_r>
 8009ae8:	4606      	mov	r6, r0
 8009aea:	2800      	cmp	r0, #0
 8009aec:	d1e0      	bne.n	8009ab0 <__ssputs_r+0x5c>
 8009aee:	4650      	mov	r0, sl
 8009af0:	6921      	ldr	r1, [r4, #16]
 8009af2:	f7fe fb8d 	bl	8008210 <_free_r>
 8009af6:	230c      	movs	r3, #12
 8009af8:	f8ca 3000 	str.w	r3, [sl]
 8009afc:	89a3      	ldrh	r3, [r4, #12]
 8009afe:	f04f 30ff 	mov.w	r0, #4294967295
 8009b02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b06:	81a3      	strh	r3, [r4, #12]
 8009b08:	e7e9      	b.n	8009ade <__ssputs_r+0x8a>
	...

08009b0c <_svfiprintf_r>:
 8009b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b10:	4698      	mov	r8, r3
 8009b12:	898b      	ldrh	r3, [r1, #12]
 8009b14:	4607      	mov	r7, r0
 8009b16:	061b      	lsls	r3, r3, #24
 8009b18:	460d      	mov	r5, r1
 8009b1a:	4614      	mov	r4, r2
 8009b1c:	b09d      	sub	sp, #116	@ 0x74
 8009b1e:	d510      	bpl.n	8009b42 <_svfiprintf_r+0x36>
 8009b20:	690b      	ldr	r3, [r1, #16]
 8009b22:	b973      	cbnz	r3, 8009b42 <_svfiprintf_r+0x36>
 8009b24:	2140      	movs	r1, #64	@ 0x40
 8009b26:	f7fe fbe5 	bl	80082f4 <_malloc_r>
 8009b2a:	6028      	str	r0, [r5, #0]
 8009b2c:	6128      	str	r0, [r5, #16]
 8009b2e:	b930      	cbnz	r0, 8009b3e <_svfiprintf_r+0x32>
 8009b30:	230c      	movs	r3, #12
 8009b32:	603b      	str	r3, [r7, #0]
 8009b34:	f04f 30ff 	mov.w	r0, #4294967295
 8009b38:	b01d      	add	sp, #116	@ 0x74
 8009b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b3e:	2340      	movs	r3, #64	@ 0x40
 8009b40:	616b      	str	r3, [r5, #20]
 8009b42:	2300      	movs	r3, #0
 8009b44:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b46:	2320      	movs	r3, #32
 8009b48:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009b4c:	2330      	movs	r3, #48	@ 0x30
 8009b4e:	f04f 0901 	mov.w	r9, #1
 8009b52:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b56:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009cf0 <_svfiprintf_r+0x1e4>
 8009b5a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009b5e:	4623      	mov	r3, r4
 8009b60:	469a      	mov	sl, r3
 8009b62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b66:	b10a      	cbz	r2, 8009b6c <_svfiprintf_r+0x60>
 8009b68:	2a25      	cmp	r2, #37	@ 0x25
 8009b6a:	d1f9      	bne.n	8009b60 <_svfiprintf_r+0x54>
 8009b6c:	ebba 0b04 	subs.w	fp, sl, r4
 8009b70:	d00b      	beq.n	8009b8a <_svfiprintf_r+0x7e>
 8009b72:	465b      	mov	r3, fp
 8009b74:	4622      	mov	r2, r4
 8009b76:	4629      	mov	r1, r5
 8009b78:	4638      	mov	r0, r7
 8009b7a:	f7ff ff6b 	bl	8009a54 <__ssputs_r>
 8009b7e:	3001      	adds	r0, #1
 8009b80:	f000 80a7 	beq.w	8009cd2 <_svfiprintf_r+0x1c6>
 8009b84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b86:	445a      	add	r2, fp
 8009b88:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b8a:	f89a 3000 	ldrb.w	r3, [sl]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	f000 809f 	beq.w	8009cd2 <_svfiprintf_r+0x1c6>
 8009b94:	2300      	movs	r3, #0
 8009b96:	f04f 32ff 	mov.w	r2, #4294967295
 8009b9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b9e:	f10a 0a01 	add.w	sl, sl, #1
 8009ba2:	9304      	str	r3, [sp, #16]
 8009ba4:	9307      	str	r3, [sp, #28]
 8009ba6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009baa:	931a      	str	r3, [sp, #104]	@ 0x68
 8009bac:	4654      	mov	r4, sl
 8009bae:	2205      	movs	r2, #5
 8009bb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bb4:	484e      	ldr	r0, [pc, #312]	@ (8009cf0 <_svfiprintf_r+0x1e4>)
 8009bb6:	f7fd fcc8 	bl	800754a <memchr>
 8009bba:	9a04      	ldr	r2, [sp, #16]
 8009bbc:	b9d8      	cbnz	r0, 8009bf6 <_svfiprintf_r+0xea>
 8009bbe:	06d0      	lsls	r0, r2, #27
 8009bc0:	bf44      	itt	mi
 8009bc2:	2320      	movmi	r3, #32
 8009bc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009bc8:	0711      	lsls	r1, r2, #28
 8009bca:	bf44      	itt	mi
 8009bcc:	232b      	movmi	r3, #43	@ 0x2b
 8009bce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009bd2:	f89a 3000 	ldrb.w	r3, [sl]
 8009bd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8009bd8:	d015      	beq.n	8009c06 <_svfiprintf_r+0xfa>
 8009bda:	4654      	mov	r4, sl
 8009bdc:	2000      	movs	r0, #0
 8009bde:	f04f 0c0a 	mov.w	ip, #10
 8009be2:	9a07      	ldr	r2, [sp, #28]
 8009be4:	4621      	mov	r1, r4
 8009be6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bea:	3b30      	subs	r3, #48	@ 0x30
 8009bec:	2b09      	cmp	r3, #9
 8009bee:	d94b      	bls.n	8009c88 <_svfiprintf_r+0x17c>
 8009bf0:	b1b0      	cbz	r0, 8009c20 <_svfiprintf_r+0x114>
 8009bf2:	9207      	str	r2, [sp, #28]
 8009bf4:	e014      	b.n	8009c20 <_svfiprintf_r+0x114>
 8009bf6:	eba0 0308 	sub.w	r3, r0, r8
 8009bfa:	fa09 f303 	lsl.w	r3, r9, r3
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	46a2      	mov	sl, r4
 8009c02:	9304      	str	r3, [sp, #16]
 8009c04:	e7d2      	b.n	8009bac <_svfiprintf_r+0xa0>
 8009c06:	9b03      	ldr	r3, [sp, #12]
 8009c08:	1d19      	adds	r1, r3, #4
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	9103      	str	r1, [sp, #12]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	bfbb      	ittet	lt
 8009c12:	425b      	neglt	r3, r3
 8009c14:	f042 0202 	orrlt.w	r2, r2, #2
 8009c18:	9307      	strge	r3, [sp, #28]
 8009c1a:	9307      	strlt	r3, [sp, #28]
 8009c1c:	bfb8      	it	lt
 8009c1e:	9204      	strlt	r2, [sp, #16]
 8009c20:	7823      	ldrb	r3, [r4, #0]
 8009c22:	2b2e      	cmp	r3, #46	@ 0x2e
 8009c24:	d10a      	bne.n	8009c3c <_svfiprintf_r+0x130>
 8009c26:	7863      	ldrb	r3, [r4, #1]
 8009c28:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c2a:	d132      	bne.n	8009c92 <_svfiprintf_r+0x186>
 8009c2c:	9b03      	ldr	r3, [sp, #12]
 8009c2e:	3402      	adds	r4, #2
 8009c30:	1d1a      	adds	r2, r3, #4
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	9203      	str	r2, [sp, #12]
 8009c36:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009c3a:	9305      	str	r3, [sp, #20]
 8009c3c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009cf4 <_svfiprintf_r+0x1e8>
 8009c40:	2203      	movs	r2, #3
 8009c42:	4650      	mov	r0, sl
 8009c44:	7821      	ldrb	r1, [r4, #0]
 8009c46:	f7fd fc80 	bl	800754a <memchr>
 8009c4a:	b138      	cbz	r0, 8009c5c <_svfiprintf_r+0x150>
 8009c4c:	2240      	movs	r2, #64	@ 0x40
 8009c4e:	9b04      	ldr	r3, [sp, #16]
 8009c50:	eba0 000a 	sub.w	r0, r0, sl
 8009c54:	4082      	lsls	r2, r0
 8009c56:	4313      	orrs	r3, r2
 8009c58:	3401      	adds	r4, #1
 8009c5a:	9304      	str	r3, [sp, #16]
 8009c5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c60:	2206      	movs	r2, #6
 8009c62:	4825      	ldr	r0, [pc, #148]	@ (8009cf8 <_svfiprintf_r+0x1ec>)
 8009c64:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009c68:	f7fd fc6f 	bl	800754a <memchr>
 8009c6c:	2800      	cmp	r0, #0
 8009c6e:	d036      	beq.n	8009cde <_svfiprintf_r+0x1d2>
 8009c70:	4b22      	ldr	r3, [pc, #136]	@ (8009cfc <_svfiprintf_r+0x1f0>)
 8009c72:	bb1b      	cbnz	r3, 8009cbc <_svfiprintf_r+0x1b0>
 8009c74:	9b03      	ldr	r3, [sp, #12]
 8009c76:	3307      	adds	r3, #7
 8009c78:	f023 0307 	bic.w	r3, r3, #7
 8009c7c:	3308      	adds	r3, #8
 8009c7e:	9303      	str	r3, [sp, #12]
 8009c80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c82:	4433      	add	r3, r6
 8009c84:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c86:	e76a      	b.n	8009b5e <_svfiprintf_r+0x52>
 8009c88:	460c      	mov	r4, r1
 8009c8a:	2001      	movs	r0, #1
 8009c8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c90:	e7a8      	b.n	8009be4 <_svfiprintf_r+0xd8>
 8009c92:	2300      	movs	r3, #0
 8009c94:	f04f 0c0a 	mov.w	ip, #10
 8009c98:	4619      	mov	r1, r3
 8009c9a:	3401      	adds	r4, #1
 8009c9c:	9305      	str	r3, [sp, #20]
 8009c9e:	4620      	mov	r0, r4
 8009ca0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ca4:	3a30      	subs	r2, #48	@ 0x30
 8009ca6:	2a09      	cmp	r2, #9
 8009ca8:	d903      	bls.n	8009cb2 <_svfiprintf_r+0x1a6>
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d0c6      	beq.n	8009c3c <_svfiprintf_r+0x130>
 8009cae:	9105      	str	r1, [sp, #20]
 8009cb0:	e7c4      	b.n	8009c3c <_svfiprintf_r+0x130>
 8009cb2:	4604      	mov	r4, r0
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8009cba:	e7f0      	b.n	8009c9e <_svfiprintf_r+0x192>
 8009cbc:	ab03      	add	r3, sp, #12
 8009cbe:	9300      	str	r3, [sp, #0]
 8009cc0:	462a      	mov	r2, r5
 8009cc2:	4638      	mov	r0, r7
 8009cc4:	4b0e      	ldr	r3, [pc, #56]	@ (8009d00 <_svfiprintf_r+0x1f4>)
 8009cc6:	a904      	add	r1, sp, #16
 8009cc8:	f7fc fccc 	bl	8006664 <_printf_float>
 8009ccc:	1c42      	adds	r2, r0, #1
 8009cce:	4606      	mov	r6, r0
 8009cd0:	d1d6      	bne.n	8009c80 <_svfiprintf_r+0x174>
 8009cd2:	89ab      	ldrh	r3, [r5, #12]
 8009cd4:	065b      	lsls	r3, r3, #25
 8009cd6:	f53f af2d 	bmi.w	8009b34 <_svfiprintf_r+0x28>
 8009cda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009cdc:	e72c      	b.n	8009b38 <_svfiprintf_r+0x2c>
 8009cde:	ab03      	add	r3, sp, #12
 8009ce0:	9300      	str	r3, [sp, #0]
 8009ce2:	462a      	mov	r2, r5
 8009ce4:	4638      	mov	r0, r7
 8009ce6:	4b06      	ldr	r3, [pc, #24]	@ (8009d00 <_svfiprintf_r+0x1f4>)
 8009ce8:	a904      	add	r1, sp, #16
 8009cea:	f7fc ff59 	bl	8006ba0 <_printf_i>
 8009cee:	e7ed      	b.n	8009ccc <_svfiprintf_r+0x1c0>
 8009cf0:	0800b089 	.word	0x0800b089
 8009cf4:	0800b08f 	.word	0x0800b08f
 8009cf8:	0800b093 	.word	0x0800b093
 8009cfc:	08006665 	.word	0x08006665
 8009d00:	08009a55 	.word	0x08009a55

08009d04 <__sflush_r>:
 8009d04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d0a:	0716      	lsls	r6, r2, #28
 8009d0c:	4605      	mov	r5, r0
 8009d0e:	460c      	mov	r4, r1
 8009d10:	d454      	bmi.n	8009dbc <__sflush_r+0xb8>
 8009d12:	684b      	ldr	r3, [r1, #4]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	dc02      	bgt.n	8009d1e <__sflush_r+0x1a>
 8009d18:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	dd48      	ble.n	8009db0 <__sflush_r+0xac>
 8009d1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009d20:	2e00      	cmp	r6, #0
 8009d22:	d045      	beq.n	8009db0 <__sflush_r+0xac>
 8009d24:	2300      	movs	r3, #0
 8009d26:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009d2a:	682f      	ldr	r7, [r5, #0]
 8009d2c:	6a21      	ldr	r1, [r4, #32]
 8009d2e:	602b      	str	r3, [r5, #0]
 8009d30:	d030      	beq.n	8009d94 <__sflush_r+0x90>
 8009d32:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009d34:	89a3      	ldrh	r3, [r4, #12]
 8009d36:	0759      	lsls	r1, r3, #29
 8009d38:	d505      	bpl.n	8009d46 <__sflush_r+0x42>
 8009d3a:	6863      	ldr	r3, [r4, #4]
 8009d3c:	1ad2      	subs	r2, r2, r3
 8009d3e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009d40:	b10b      	cbz	r3, 8009d46 <__sflush_r+0x42>
 8009d42:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009d44:	1ad2      	subs	r2, r2, r3
 8009d46:	2300      	movs	r3, #0
 8009d48:	4628      	mov	r0, r5
 8009d4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009d4c:	6a21      	ldr	r1, [r4, #32]
 8009d4e:	47b0      	blx	r6
 8009d50:	1c43      	adds	r3, r0, #1
 8009d52:	89a3      	ldrh	r3, [r4, #12]
 8009d54:	d106      	bne.n	8009d64 <__sflush_r+0x60>
 8009d56:	6829      	ldr	r1, [r5, #0]
 8009d58:	291d      	cmp	r1, #29
 8009d5a:	d82b      	bhi.n	8009db4 <__sflush_r+0xb0>
 8009d5c:	4a28      	ldr	r2, [pc, #160]	@ (8009e00 <__sflush_r+0xfc>)
 8009d5e:	410a      	asrs	r2, r1
 8009d60:	07d6      	lsls	r6, r2, #31
 8009d62:	d427      	bmi.n	8009db4 <__sflush_r+0xb0>
 8009d64:	2200      	movs	r2, #0
 8009d66:	6062      	str	r2, [r4, #4]
 8009d68:	6922      	ldr	r2, [r4, #16]
 8009d6a:	04d9      	lsls	r1, r3, #19
 8009d6c:	6022      	str	r2, [r4, #0]
 8009d6e:	d504      	bpl.n	8009d7a <__sflush_r+0x76>
 8009d70:	1c42      	adds	r2, r0, #1
 8009d72:	d101      	bne.n	8009d78 <__sflush_r+0x74>
 8009d74:	682b      	ldr	r3, [r5, #0]
 8009d76:	b903      	cbnz	r3, 8009d7a <__sflush_r+0x76>
 8009d78:	6560      	str	r0, [r4, #84]	@ 0x54
 8009d7a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009d7c:	602f      	str	r7, [r5, #0]
 8009d7e:	b1b9      	cbz	r1, 8009db0 <__sflush_r+0xac>
 8009d80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009d84:	4299      	cmp	r1, r3
 8009d86:	d002      	beq.n	8009d8e <__sflush_r+0x8a>
 8009d88:	4628      	mov	r0, r5
 8009d8a:	f7fe fa41 	bl	8008210 <_free_r>
 8009d8e:	2300      	movs	r3, #0
 8009d90:	6363      	str	r3, [r4, #52]	@ 0x34
 8009d92:	e00d      	b.n	8009db0 <__sflush_r+0xac>
 8009d94:	2301      	movs	r3, #1
 8009d96:	4628      	mov	r0, r5
 8009d98:	47b0      	blx	r6
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	1c50      	adds	r0, r2, #1
 8009d9e:	d1c9      	bne.n	8009d34 <__sflush_r+0x30>
 8009da0:	682b      	ldr	r3, [r5, #0]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d0c6      	beq.n	8009d34 <__sflush_r+0x30>
 8009da6:	2b1d      	cmp	r3, #29
 8009da8:	d001      	beq.n	8009dae <__sflush_r+0xaa>
 8009daa:	2b16      	cmp	r3, #22
 8009dac:	d11d      	bne.n	8009dea <__sflush_r+0xe6>
 8009dae:	602f      	str	r7, [r5, #0]
 8009db0:	2000      	movs	r0, #0
 8009db2:	e021      	b.n	8009df8 <__sflush_r+0xf4>
 8009db4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009db8:	b21b      	sxth	r3, r3
 8009dba:	e01a      	b.n	8009df2 <__sflush_r+0xee>
 8009dbc:	690f      	ldr	r7, [r1, #16]
 8009dbe:	2f00      	cmp	r7, #0
 8009dc0:	d0f6      	beq.n	8009db0 <__sflush_r+0xac>
 8009dc2:	0793      	lsls	r3, r2, #30
 8009dc4:	bf18      	it	ne
 8009dc6:	2300      	movne	r3, #0
 8009dc8:	680e      	ldr	r6, [r1, #0]
 8009dca:	bf08      	it	eq
 8009dcc:	694b      	ldreq	r3, [r1, #20]
 8009dce:	1bf6      	subs	r6, r6, r7
 8009dd0:	600f      	str	r7, [r1, #0]
 8009dd2:	608b      	str	r3, [r1, #8]
 8009dd4:	2e00      	cmp	r6, #0
 8009dd6:	ddeb      	ble.n	8009db0 <__sflush_r+0xac>
 8009dd8:	4633      	mov	r3, r6
 8009dda:	463a      	mov	r2, r7
 8009ddc:	4628      	mov	r0, r5
 8009dde:	6a21      	ldr	r1, [r4, #32]
 8009de0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009de4:	47e0      	blx	ip
 8009de6:	2800      	cmp	r0, #0
 8009de8:	dc07      	bgt.n	8009dfa <__sflush_r+0xf6>
 8009dea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009df2:	f04f 30ff 	mov.w	r0, #4294967295
 8009df6:	81a3      	strh	r3, [r4, #12]
 8009df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009dfa:	4407      	add	r7, r0
 8009dfc:	1a36      	subs	r6, r6, r0
 8009dfe:	e7e9      	b.n	8009dd4 <__sflush_r+0xd0>
 8009e00:	dfbffffe 	.word	0xdfbffffe

08009e04 <_fflush_r>:
 8009e04:	b538      	push	{r3, r4, r5, lr}
 8009e06:	690b      	ldr	r3, [r1, #16]
 8009e08:	4605      	mov	r5, r0
 8009e0a:	460c      	mov	r4, r1
 8009e0c:	b913      	cbnz	r3, 8009e14 <_fflush_r+0x10>
 8009e0e:	2500      	movs	r5, #0
 8009e10:	4628      	mov	r0, r5
 8009e12:	bd38      	pop	{r3, r4, r5, pc}
 8009e14:	b118      	cbz	r0, 8009e1e <_fflush_r+0x1a>
 8009e16:	6a03      	ldr	r3, [r0, #32]
 8009e18:	b90b      	cbnz	r3, 8009e1e <_fflush_r+0x1a>
 8009e1a:	f7fd fa7d 	bl	8007318 <__sinit>
 8009e1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d0f3      	beq.n	8009e0e <_fflush_r+0xa>
 8009e26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009e28:	07d0      	lsls	r0, r2, #31
 8009e2a:	d404      	bmi.n	8009e36 <_fflush_r+0x32>
 8009e2c:	0599      	lsls	r1, r3, #22
 8009e2e:	d402      	bmi.n	8009e36 <_fflush_r+0x32>
 8009e30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e32:	f7fd fb88 	bl	8007546 <__retarget_lock_acquire_recursive>
 8009e36:	4628      	mov	r0, r5
 8009e38:	4621      	mov	r1, r4
 8009e3a:	f7ff ff63 	bl	8009d04 <__sflush_r>
 8009e3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009e40:	4605      	mov	r5, r0
 8009e42:	07da      	lsls	r2, r3, #31
 8009e44:	d4e4      	bmi.n	8009e10 <_fflush_r+0xc>
 8009e46:	89a3      	ldrh	r3, [r4, #12]
 8009e48:	059b      	lsls	r3, r3, #22
 8009e4a:	d4e1      	bmi.n	8009e10 <_fflush_r+0xc>
 8009e4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e4e:	f7fd fb7b 	bl	8007548 <__retarget_lock_release_recursive>
 8009e52:	e7dd      	b.n	8009e10 <_fflush_r+0xc>

08009e54 <memmove>:
 8009e54:	4288      	cmp	r0, r1
 8009e56:	b510      	push	{r4, lr}
 8009e58:	eb01 0402 	add.w	r4, r1, r2
 8009e5c:	d902      	bls.n	8009e64 <memmove+0x10>
 8009e5e:	4284      	cmp	r4, r0
 8009e60:	4623      	mov	r3, r4
 8009e62:	d807      	bhi.n	8009e74 <memmove+0x20>
 8009e64:	1e43      	subs	r3, r0, #1
 8009e66:	42a1      	cmp	r1, r4
 8009e68:	d008      	beq.n	8009e7c <memmove+0x28>
 8009e6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e72:	e7f8      	b.n	8009e66 <memmove+0x12>
 8009e74:	4601      	mov	r1, r0
 8009e76:	4402      	add	r2, r0
 8009e78:	428a      	cmp	r2, r1
 8009e7a:	d100      	bne.n	8009e7e <memmove+0x2a>
 8009e7c:	bd10      	pop	{r4, pc}
 8009e7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e86:	e7f7      	b.n	8009e78 <memmove+0x24>

08009e88 <strncmp>:
 8009e88:	b510      	push	{r4, lr}
 8009e8a:	b16a      	cbz	r2, 8009ea8 <strncmp+0x20>
 8009e8c:	3901      	subs	r1, #1
 8009e8e:	1884      	adds	r4, r0, r2
 8009e90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e94:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d103      	bne.n	8009ea4 <strncmp+0x1c>
 8009e9c:	42a0      	cmp	r0, r4
 8009e9e:	d001      	beq.n	8009ea4 <strncmp+0x1c>
 8009ea0:	2a00      	cmp	r2, #0
 8009ea2:	d1f5      	bne.n	8009e90 <strncmp+0x8>
 8009ea4:	1ad0      	subs	r0, r2, r3
 8009ea6:	bd10      	pop	{r4, pc}
 8009ea8:	4610      	mov	r0, r2
 8009eaa:	e7fc      	b.n	8009ea6 <strncmp+0x1e>

08009eac <_sbrk_r>:
 8009eac:	b538      	push	{r3, r4, r5, lr}
 8009eae:	2300      	movs	r3, #0
 8009eb0:	4d05      	ldr	r5, [pc, #20]	@ (8009ec8 <_sbrk_r+0x1c>)
 8009eb2:	4604      	mov	r4, r0
 8009eb4:	4608      	mov	r0, r1
 8009eb6:	602b      	str	r3, [r5, #0]
 8009eb8:	f7f8 fb4c 	bl	8002554 <_sbrk>
 8009ebc:	1c43      	adds	r3, r0, #1
 8009ebe:	d102      	bne.n	8009ec6 <_sbrk_r+0x1a>
 8009ec0:	682b      	ldr	r3, [r5, #0]
 8009ec2:	b103      	cbz	r3, 8009ec6 <_sbrk_r+0x1a>
 8009ec4:	6023      	str	r3, [r4, #0]
 8009ec6:	bd38      	pop	{r3, r4, r5, pc}
 8009ec8:	200005a8 	.word	0x200005a8

08009ecc <memcpy>:
 8009ecc:	440a      	add	r2, r1
 8009ece:	4291      	cmp	r1, r2
 8009ed0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ed4:	d100      	bne.n	8009ed8 <memcpy+0xc>
 8009ed6:	4770      	bx	lr
 8009ed8:	b510      	push	{r4, lr}
 8009eda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ede:	4291      	cmp	r1, r2
 8009ee0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ee4:	d1f9      	bne.n	8009eda <memcpy+0xe>
 8009ee6:	bd10      	pop	{r4, pc}

08009ee8 <nan>:
 8009ee8:	2000      	movs	r0, #0
 8009eea:	4901      	ldr	r1, [pc, #4]	@ (8009ef0 <nan+0x8>)
 8009eec:	4770      	bx	lr
 8009eee:	bf00      	nop
 8009ef0:	7ff80000 	.word	0x7ff80000

08009ef4 <__assert_func>:
 8009ef4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009ef6:	4614      	mov	r4, r2
 8009ef8:	461a      	mov	r2, r3
 8009efa:	4b09      	ldr	r3, [pc, #36]	@ (8009f20 <__assert_func+0x2c>)
 8009efc:	4605      	mov	r5, r0
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	68d8      	ldr	r0, [r3, #12]
 8009f02:	b954      	cbnz	r4, 8009f1a <__assert_func+0x26>
 8009f04:	4b07      	ldr	r3, [pc, #28]	@ (8009f24 <__assert_func+0x30>)
 8009f06:	461c      	mov	r4, r3
 8009f08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009f0c:	9100      	str	r1, [sp, #0]
 8009f0e:	462b      	mov	r3, r5
 8009f10:	4905      	ldr	r1, [pc, #20]	@ (8009f28 <__assert_func+0x34>)
 8009f12:	f000 fba7 	bl	800a664 <fiprintf>
 8009f16:	f000 fbb7 	bl	800a688 <abort>
 8009f1a:	4b04      	ldr	r3, [pc, #16]	@ (8009f2c <__assert_func+0x38>)
 8009f1c:	e7f4      	b.n	8009f08 <__assert_func+0x14>
 8009f1e:	bf00      	nop
 8009f20:	20000018 	.word	0x20000018
 8009f24:	0800b0dd 	.word	0x0800b0dd
 8009f28:	0800b0af 	.word	0x0800b0af
 8009f2c:	0800b0a2 	.word	0x0800b0a2

08009f30 <_calloc_r>:
 8009f30:	b570      	push	{r4, r5, r6, lr}
 8009f32:	fba1 5402 	umull	r5, r4, r1, r2
 8009f36:	b93c      	cbnz	r4, 8009f48 <_calloc_r+0x18>
 8009f38:	4629      	mov	r1, r5
 8009f3a:	f7fe f9db 	bl	80082f4 <_malloc_r>
 8009f3e:	4606      	mov	r6, r0
 8009f40:	b928      	cbnz	r0, 8009f4e <_calloc_r+0x1e>
 8009f42:	2600      	movs	r6, #0
 8009f44:	4630      	mov	r0, r6
 8009f46:	bd70      	pop	{r4, r5, r6, pc}
 8009f48:	220c      	movs	r2, #12
 8009f4a:	6002      	str	r2, [r0, #0]
 8009f4c:	e7f9      	b.n	8009f42 <_calloc_r+0x12>
 8009f4e:	462a      	mov	r2, r5
 8009f50:	4621      	mov	r1, r4
 8009f52:	f7fd fa7a 	bl	800744a <memset>
 8009f56:	e7f5      	b.n	8009f44 <_calloc_r+0x14>

08009f58 <rshift>:
 8009f58:	6903      	ldr	r3, [r0, #16]
 8009f5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f5e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009f62:	f100 0414 	add.w	r4, r0, #20
 8009f66:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009f6a:	dd46      	ble.n	8009ffa <rshift+0xa2>
 8009f6c:	f011 011f 	ands.w	r1, r1, #31
 8009f70:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009f74:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009f78:	d10c      	bne.n	8009f94 <rshift+0x3c>
 8009f7a:	4629      	mov	r1, r5
 8009f7c:	f100 0710 	add.w	r7, r0, #16
 8009f80:	42b1      	cmp	r1, r6
 8009f82:	d335      	bcc.n	8009ff0 <rshift+0x98>
 8009f84:	1a9b      	subs	r3, r3, r2
 8009f86:	009b      	lsls	r3, r3, #2
 8009f88:	1eea      	subs	r2, r5, #3
 8009f8a:	4296      	cmp	r6, r2
 8009f8c:	bf38      	it	cc
 8009f8e:	2300      	movcc	r3, #0
 8009f90:	4423      	add	r3, r4
 8009f92:	e015      	b.n	8009fc0 <rshift+0x68>
 8009f94:	46a1      	mov	r9, r4
 8009f96:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009f9a:	f1c1 0820 	rsb	r8, r1, #32
 8009f9e:	40cf      	lsrs	r7, r1
 8009fa0:	f105 0e04 	add.w	lr, r5, #4
 8009fa4:	4576      	cmp	r6, lr
 8009fa6:	46f4      	mov	ip, lr
 8009fa8:	d816      	bhi.n	8009fd8 <rshift+0x80>
 8009faa:	1a9a      	subs	r2, r3, r2
 8009fac:	0092      	lsls	r2, r2, #2
 8009fae:	3a04      	subs	r2, #4
 8009fb0:	3501      	adds	r5, #1
 8009fb2:	42ae      	cmp	r6, r5
 8009fb4:	bf38      	it	cc
 8009fb6:	2200      	movcc	r2, #0
 8009fb8:	18a3      	adds	r3, r4, r2
 8009fba:	50a7      	str	r7, [r4, r2]
 8009fbc:	b107      	cbz	r7, 8009fc0 <rshift+0x68>
 8009fbe:	3304      	adds	r3, #4
 8009fc0:	42a3      	cmp	r3, r4
 8009fc2:	eba3 0204 	sub.w	r2, r3, r4
 8009fc6:	bf08      	it	eq
 8009fc8:	2300      	moveq	r3, #0
 8009fca:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009fce:	6102      	str	r2, [r0, #16]
 8009fd0:	bf08      	it	eq
 8009fd2:	6143      	streq	r3, [r0, #20]
 8009fd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009fd8:	f8dc c000 	ldr.w	ip, [ip]
 8009fdc:	fa0c fc08 	lsl.w	ip, ip, r8
 8009fe0:	ea4c 0707 	orr.w	r7, ip, r7
 8009fe4:	f849 7b04 	str.w	r7, [r9], #4
 8009fe8:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009fec:	40cf      	lsrs	r7, r1
 8009fee:	e7d9      	b.n	8009fa4 <rshift+0x4c>
 8009ff0:	f851 cb04 	ldr.w	ip, [r1], #4
 8009ff4:	f847 cf04 	str.w	ip, [r7, #4]!
 8009ff8:	e7c2      	b.n	8009f80 <rshift+0x28>
 8009ffa:	4623      	mov	r3, r4
 8009ffc:	e7e0      	b.n	8009fc0 <rshift+0x68>

08009ffe <__hexdig_fun>:
 8009ffe:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a002:	2b09      	cmp	r3, #9
 800a004:	d802      	bhi.n	800a00c <__hexdig_fun+0xe>
 800a006:	3820      	subs	r0, #32
 800a008:	b2c0      	uxtb	r0, r0
 800a00a:	4770      	bx	lr
 800a00c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a010:	2b05      	cmp	r3, #5
 800a012:	d801      	bhi.n	800a018 <__hexdig_fun+0x1a>
 800a014:	3847      	subs	r0, #71	@ 0x47
 800a016:	e7f7      	b.n	800a008 <__hexdig_fun+0xa>
 800a018:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a01c:	2b05      	cmp	r3, #5
 800a01e:	d801      	bhi.n	800a024 <__hexdig_fun+0x26>
 800a020:	3827      	subs	r0, #39	@ 0x27
 800a022:	e7f1      	b.n	800a008 <__hexdig_fun+0xa>
 800a024:	2000      	movs	r0, #0
 800a026:	4770      	bx	lr

0800a028 <__gethex>:
 800a028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a02c:	468a      	mov	sl, r1
 800a02e:	4690      	mov	r8, r2
 800a030:	b085      	sub	sp, #20
 800a032:	9302      	str	r3, [sp, #8]
 800a034:	680b      	ldr	r3, [r1, #0]
 800a036:	9001      	str	r0, [sp, #4]
 800a038:	1c9c      	adds	r4, r3, #2
 800a03a:	46a1      	mov	r9, r4
 800a03c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a040:	2830      	cmp	r0, #48	@ 0x30
 800a042:	d0fa      	beq.n	800a03a <__gethex+0x12>
 800a044:	eba9 0303 	sub.w	r3, r9, r3
 800a048:	f1a3 0b02 	sub.w	fp, r3, #2
 800a04c:	f7ff ffd7 	bl	8009ffe <__hexdig_fun>
 800a050:	4605      	mov	r5, r0
 800a052:	2800      	cmp	r0, #0
 800a054:	d168      	bne.n	800a128 <__gethex+0x100>
 800a056:	2201      	movs	r2, #1
 800a058:	4648      	mov	r0, r9
 800a05a:	499f      	ldr	r1, [pc, #636]	@ (800a2d8 <__gethex+0x2b0>)
 800a05c:	f7ff ff14 	bl	8009e88 <strncmp>
 800a060:	4607      	mov	r7, r0
 800a062:	2800      	cmp	r0, #0
 800a064:	d167      	bne.n	800a136 <__gethex+0x10e>
 800a066:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a06a:	4626      	mov	r6, r4
 800a06c:	f7ff ffc7 	bl	8009ffe <__hexdig_fun>
 800a070:	2800      	cmp	r0, #0
 800a072:	d062      	beq.n	800a13a <__gethex+0x112>
 800a074:	4623      	mov	r3, r4
 800a076:	7818      	ldrb	r0, [r3, #0]
 800a078:	4699      	mov	r9, r3
 800a07a:	2830      	cmp	r0, #48	@ 0x30
 800a07c:	f103 0301 	add.w	r3, r3, #1
 800a080:	d0f9      	beq.n	800a076 <__gethex+0x4e>
 800a082:	f7ff ffbc 	bl	8009ffe <__hexdig_fun>
 800a086:	fab0 f580 	clz	r5, r0
 800a08a:	f04f 0b01 	mov.w	fp, #1
 800a08e:	096d      	lsrs	r5, r5, #5
 800a090:	464a      	mov	r2, r9
 800a092:	4616      	mov	r6, r2
 800a094:	7830      	ldrb	r0, [r6, #0]
 800a096:	3201      	adds	r2, #1
 800a098:	f7ff ffb1 	bl	8009ffe <__hexdig_fun>
 800a09c:	2800      	cmp	r0, #0
 800a09e:	d1f8      	bne.n	800a092 <__gethex+0x6a>
 800a0a0:	2201      	movs	r2, #1
 800a0a2:	4630      	mov	r0, r6
 800a0a4:	498c      	ldr	r1, [pc, #560]	@ (800a2d8 <__gethex+0x2b0>)
 800a0a6:	f7ff feef 	bl	8009e88 <strncmp>
 800a0aa:	2800      	cmp	r0, #0
 800a0ac:	d13f      	bne.n	800a12e <__gethex+0x106>
 800a0ae:	b944      	cbnz	r4, 800a0c2 <__gethex+0x9a>
 800a0b0:	1c74      	adds	r4, r6, #1
 800a0b2:	4622      	mov	r2, r4
 800a0b4:	4616      	mov	r6, r2
 800a0b6:	7830      	ldrb	r0, [r6, #0]
 800a0b8:	3201      	adds	r2, #1
 800a0ba:	f7ff ffa0 	bl	8009ffe <__hexdig_fun>
 800a0be:	2800      	cmp	r0, #0
 800a0c0:	d1f8      	bne.n	800a0b4 <__gethex+0x8c>
 800a0c2:	1ba4      	subs	r4, r4, r6
 800a0c4:	00a7      	lsls	r7, r4, #2
 800a0c6:	7833      	ldrb	r3, [r6, #0]
 800a0c8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a0cc:	2b50      	cmp	r3, #80	@ 0x50
 800a0ce:	d13e      	bne.n	800a14e <__gethex+0x126>
 800a0d0:	7873      	ldrb	r3, [r6, #1]
 800a0d2:	2b2b      	cmp	r3, #43	@ 0x2b
 800a0d4:	d033      	beq.n	800a13e <__gethex+0x116>
 800a0d6:	2b2d      	cmp	r3, #45	@ 0x2d
 800a0d8:	d034      	beq.n	800a144 <__gethex+0x11c>
 800a0da:	2400      	movs	r4, #0
 800a0dc:	1c71      	adds	r1, r6, #1
 800a0de:	7808      	ldrb	r0, [r1, #0]
 800a0e0:	f7ff ff8d 	bl	8009ffe <__hexdig_fun>
 800a0e4:	1e43      	subs	r3, r0, #1
 800a0e6:	b2db      	uxtb	r3, r3
 800a0e8:	2b18      	cmp	r3, #24
 800a0ea:	d830      	bhi.n	800a14e <__gethex+0x126>
 800a0ec:	f1a0 0210 	sub.w	r2, r0, #16
 800a0f0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a0f4:	f7ff ff83 	bl	8009ffe <__hexdig_fun>
 800a0f8:	f100 3cff 	add.w	ip, r0, #4294967295
 800a0fc:	fa5f fc8c 	uxtb.w	ip, ip
 800a100:	f1bc 0f18 	cmp.w	ip, #24
 800a104:	f04f 030a 	mov.w	r3, #10
 800a108:	d91e      	bls.n	800a148 <__gethex+0x120>
 800a10a:	b104      	cbz	r4, 800a10e <__gethex+0xe6>
 800a10c:	4252      	negs	r2, r2
 800a10e:	4417      	add	r7, r2
 800a110:	f8ca 1000 	str.w	r1, [sl]
 800a114:	b1ed      	cbz	r5, 800a152 <__gethex+0x12a>
 800a116:	f1bb 0f00 	cmp.w	fp, #0
 800a11a:	bf0c      	ite	eq
 800a11c:	2506      	moveq	r5, #6
 800a11e:	2500      	movne	r5, #0
 800a120:	4628      	mov	r0, r5
 800a122:	b005      	add	sp, #20
 800a124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a128:	2500      	movs	r5, #0
 800a12a:	462c      	mov	r4, r5
 800a12c:	e7b0      	b.n	800a090 <__gethex+0x68>
 800a12e:	2c00      	cmp	r4, #0
 800a130:	d1c7      	bne.n	800a0c2 <__gethex+0x9a>
 800a132:	4627      	mov	r7, r4
 800a134:	e7c7      	b.n	800a0c6 <__gethex+0x9e>
 800a136:	464e      	mov	r6, r9
 800a138:	462f      	mov	r7, r5
 800a13a:	2501      	movs	r5, #1
 800a13c:	e7c3      	b.n	800a0c6 <__gethex+0x9e>
 800a13e:	2400      	movs	r4, #0
 800a140:	1cb1      	adds	r1, r6, #2
 800a142:	e7cc      	b.n	800a0de <__gethex+0xb6>
 800a144:	2401      	movs	r4, #1
 800a146:	e7fb      	b.n	800a140 <__gethex+0x118>
 800a148:	fb03 0002 	mla	r0, r3, r2, r0
 800a14c:	e7ce      	b.n	800a0ec <__gethex+0xc4>
 800a14e:	4631      	mov	r1, r6
 800a150:	e7de      	b.n	800a110 <__gethex+0xe8>
 800a152:	4629      	mov	r1, r5
 800a154:	eba6 0309 	sub.w	r3, r6, r9
 800a158:	3b01      	subs	r3, #1
 800a15a:	2b07      	cmp	r3, #7
 800a15c:	dc0a      	bgt.n	800a174 <__gethex+0x14c>
 800a15e:	9801      	ldr	r0, [sp, #4]
 800a160:	f7fe f954 	bl	800840c <_Balloc>
 800a164:	4604      	mov	r4, r0
 800a166:	b940      	cbnz	r0, 800a17a <__gethex+0x152>
 800a168:	4602      	mov	r2, r0
 800a16a:	21e4      	movs	r1, #228	@ 0xe4
 800a16c:	4b5b      	ldr	r3, [pc, #364]	@ (800a2dc <__gethex+0x2b4>)
 800a16e:	485c      	ldr	r0, [pc, #368]	@ (800a2e0 <__gethex+0x2b8>)
 800a170:	f7ff fec0 	bl	8009ef4 <__assert_func>
 800a174:	3101      	adds	r1, #1
 800a176:	105b      	asrs	r3, r3, #1
 800a178:	e7ef      	b.n	800a15a <__gethex+0x132>
 800a17a:	2300      	movs	r3, #0
 800a17c:	f100 0a14 	add.w	sl, r0, #20
 800a180:	4655      	mov	r5, sl
 800a182:	469b      	mov	fp, r3
 800a184:	45b1      	cmp	r9, r6
 800a186:	d337      	bcc.n	800a1f8 <__gethex+0x1d0>
 800a188:	f845 bb04 	str.w	fp, [r5], #4
 800a18c:	eba5 050a 	sub.w	r5, r5, sl
 800a190:	10ad      	asrs	r5, r5, #2
 800a192:	6125      	str	r5, [r4, #16]
 800a194:	4658      	mov	r0, fp
 800a196:	f7fe fa2b 	bl	80085f0 <__hi0bits>
 800a19a:	016d      	lsls	r5, r5, #5
 800a19c:	f8d8 6000 	ldr.w	r6, [r8]
 800a1a0:	1a2d      	subs	r5, r5, r0
 800a1a2:	42b5      	cmp	r5, r6
 800a1a4:	dd54      	ble.n	800a250 <__gethex+0x228>
 800a1a6:	1bad      	subs	r5, r5, r6
 800a1a8:	4629      	mov	r1, r5
 800a1aa:	4620      	mov	r0, r4
 800a1ac:	f7fe fdb3 	bl	8008d16 <__any_on>
 800a1b0:	4681      	mov	r9, r0
 800a1b2:	b178      	cbz	r0, 800a1d4 <__gethex+0x1ac>
 800a1b4:	f04f 0901 	mov.w	r9, #1
 800a1b8:	1e6b      	subs	r3, r5, #1
 800a1ba:	1159      	asrs	r1, r3, #5
 800a1bc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a1c0:	f003 021f 	and.w	r2, r3, #31
 800a1c4:	fa09 f202 	lsl.w	r2, r9, r2
 800a1c8:	420a      	tst	r2, r1
 800a1ca:	d003      	beq.n	800a1d4 <__gethex+0x1ac>
 800a1cc:	454b      	cmp	r3, r9
 800a1ce:	dc36      	bgt.n	800a23e <__gethex+0x216>
 800a1d0:	f04f 0902 	mov.w	r9, #2
 800a1d4:	4629      	mov	r1, r5
 800a1d6:	4620      	mov	r0, r4
 800a1d8:	f7ff febe 	bl	8009f58 <rshift>
 800a1dc:	442f      	add	r7, r5
 800a1de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a1e2:	42bb      	cmp	r3, r7
 800a1e4:	da42      	bge.n	800a26c <__gethex+0x244>
 800a1e6:	4621      	mov	r1, r4
 800a1e8:	9801      	ldr	r0, [sp, #4]
 800a1ea:	f7fe f94f 	bl	800848c <_Bfree>
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a1f2:	25a3      	movs	r5, #163	@ 0xa3
 800a1f4:	6013      	str	r3, [r2, #0]
 800a1f6:	e793      	b.n	800a120 <__gethex+0xf8>
 800a1f8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a1fc:	2a2e      	cmp	r2, #46	@ 0x2e
 800a1fe:	d012      	beq.n	800a226 <__gethex+0x1fe>
 800a200:	2b20      	cmp	r3, #32
 800a202:	d104      	bne.n	800a20e <__gethex+0x1e6>
 800a204:	f845 bb04 	str.w	fp, [r5], #4
 800a208:	f04f 0b00 	mov.w	fp, #0
 800a20c:	465b      	mov	r3, fp
 800a20e:	7830      	ldrb	r0, [r6, #0]
 800a210:	9303      	str	r3, [sp, #12]
 800a212:	f7ff fef4 	bl	8009ffe <__hexdig_fun>
 800a216:	9b03      	ldr	r3, [sp, #12]
 800a218:	f000 000f 	and.w	r0, r0, #15
 800a21c:	4098      	lsls	r0, r3
 800a21e:	ea4b 0b00 	orr.w	fp, fp, r0
 800a222:	3304      	adds	r3, #4
 800a224:	e7ae      	b.n	800a184 <__gethex+0x15c>
 800a226:	45b1      	cmp	r9, r6
 800a228:	d8ea      	bhi.n	800a200 <__gethex+0x1d8>
 800a22a:	2201      	movs	r2, #1
 800a22c:	4630      	mov	r0, r6
 800a22e:	492a      	ldr	r1, [pc, #168]	@ (800a2d8 <__gethex+0x2b0>)
 800a230:	9303      	str	r3, [sp, #12]
 800a232:	f7ff fe29 	bl	8009e88 <strncmp>
 800a236:	9b03      	ldr	r3, [sp, #12]
 800a238:	2800      	cmp	r0, #0
 800a23a:	d1e1      	bne.n	800a200 <__gethex+0x1d8>
 800a23c:	e7a2      	b.n	800a184 <__gethex+0x15c>
 800a23e:	4620      	mov	r0, r4
 800a240:	1ea9      	subs	r1, r5, #2
 800a242:	f7fe fd68 	bl	8008d16 <__any_on>
 800a246:	2800      	cmp	r0, #0
 800a248:	d0c2      	beq.n	800a1d0 <__gethex+0x1a8>
 800a24a:	f04f 0903 	mov.w	r9, #3
 800a24e:	e7c1      	b.n	800a1d4 <__gethex+0x1ac>
 800a250:	da09      	bge.n	800a266 <__gethex+0x23e>
 800a252:	1b75      	subs	r5, r6, r5
 800a254:	4621      	mov	r1, r4
 800a256:	462a      	mov	r2, r5
 800a258:	9801      	ldr	r0, [sp, #4]
 800a25a:	f7fe fb2d 	bl	80088b8 <__lshift>
 800a25e:	4604      	mov	r4, r0
 800a260:	1b7f      	subs	r7, r7, r5
 800a262:	f100 0a14 	add.w	sl, r0, #20
 800a266:	f04f 0900 	mov.w	r9, #0
 800a26a:	e7b8      	b.n	800a1de <__gethex+0x1b6>
 800a26c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a270:	42bd      	cmp	r5, r7
 800a272:	dd6f      	ble.n	800a354 <__gethex+0x32c>
 800a274:	1bed      	subs	r5, r5, r7
 800a276:	42ae      	cmp	r6, r5
 800a278:	dc34      	bgt.n	800a2e4 <__gethex+0x2bc>
 800a27a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a27e:	2b02      	cmp	r3, #2
 800a280:	d022      	beq.n	800a2c8 <__gethex+0x2a0>
 800a282:	2b03      	cmp	r3, #3
 800a284:	d024      	beq.n	800a2d0 <__gethex+0x2a8>
 800a286:	2b01      	cmp	r3, #1
 800a288:	d115      	bne.n	800a2b6 <__gethex+0x28e>
 800a28a:	42ae      	cmp	r6, r5
 800a28c:	d113      	bne.n	800a2b6 <__gethex+0x28e>
 800a28e:	2e01      	cmp	r6, #1
 800a290:	d10b      	bne.n	800a2aa <__gethex+0x282>
 800a292:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a296:	9a02      	ldr	r2, [sp, #8]
 800a298:	2562      	movs	r5, #98	@ 0x62
 800a29a:	6013      	str	r3, [r2, #0]
 800a29c:	2301      	movs	r3, #1
 800a29e:	6123      	str	r3, [r4, #16]
 800a2a0:	f8ca 3000 	str.w	r3, [sl]
 800a2a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a2a6:	601c      	str	r4, [r3, #0]
 800a2a8:	e73a      	b.n	800a120 <__gethex+0xf8>
 800a2aa:	4620      	mov	r0, r4
 800a2ac:	1e71      	subs	r1, r6, #1
 800a2ae:	f7fe fd32 	bl	8008d16 <__any_on>
 800a2b2:	2800      	cmp	r0, #0
 800a2b4:	d1ed      	bne.n	800a292 <__gethex+0x26a>
 800a2b6:	4621      	mov	r1, r4
 800a2b8:	9801      	ldr	r0, [sp, #4]
 800a2ba:	f7fe f8e7 	bl	800848c <_Bfree>
 800a2be:	2300      	movs	r3, #0
 800a2c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a2c2:	2550      	movs	r5, #80	@ 0x50
 800a2c4:	6013      	str	r3, [r2, #0]
 800a2c6:	e72b      	b.n	800a120 <__gethex+0xf8>
 800a2c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d1f3      	bne.n	800a2b6 <__gethex+0x28e>
 800a2ce:	e7e0      	b.n	800a292 <__gethex+0x26a>
 800a2d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d1dd      	bne.n	800a292 <__gethex+0x26a>
 800a2d6:	e7ee      	b.n	800a2b6 <__gethex+0x28e>
 800a2d8:	0800af30 	.word	0x0800af30
 800a2dc:	0800adc7 	.word	0x0800adc7
 800a2e0:	0800b0de 	.word	0x0800b0de
 800a2e4:	1e6f      	subs	r7, r5, #1
 800a2e6:	f1b9 0f00 	cmp.w	r9, #0
 800a2ea:	d130      	bne.n	800a34e <__gethex+0x326>
 800a2ec:	b127      	cbz	r7, 800a2f8 <__gethex+0x2d0>
 800a2ee:	4639      	mov	r1, r7
 800a2f0:	4620      	mov	r0, r4
 800a2f2:	f7fe fd10 	bl	8008d16 <__any_on>
 800a2f6:	4681      	mov	r9, r0
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	4629      	mov	r1, r5
 800a2fc:	1b76      	subs	r6, r6, r5
 800a2fe:	2502      	movs	r5, #2
 800a300:	117a      	asrs	r2, r7, #5
 800a302:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a306:	f007 071f 	and.w	r7, r7, #31
 800a30a:	40bb      	lsls	r3, r7
 800a30c:	4213      	tst	r3, r2
 800a30e:	4620      	mov	r0, r4
 800a310:	bf18      	it	ne
 800a312:	f049 0902 	orrne.w	r9, r9, #2
 800a316:	f7ff fe1f 	bl	8009f58 <rshift>
 800a31a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a31e:	f1b9 0f00 	cmp.w	r9, #0
 800a322:	d047      	beq.n	800a3b4 <__gethex+0x38c>
 800a324:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a328:	2b02      	cmp	r3, #2
 800a32a:	d015      	beq.n	800a358 <__gethex+0x330>
 800a32c:	2b03      	cmp	r3, #3
 800a32e:	d017      	beq.n	800a360 <__gethex+0x338>
 800a330:	2b01      	cmp	r3, #1
 800a332:	d109      	bne.n	800a348 <__gethex+0x320>
 800a334:	f019 0f02 	tst.w	r9, #2
 800a338:	d006      	beq.n	800a348 <__gethex+0x320>
 800a33a:	f8da 3000 	ldr.w	r3, [sl]
 800a33e:	ea49 0903 	orr.w	r9, r9, r3
 800a342:	f019 0f01 	tst.w	r9, #1
 800a346:	d10e      	bne.n	800a366 <__gethex+0x33e>
 800a348:	f045 0510 	orr.w	r5, r5, #16
 800a34c:	e032      	b.n	800a3b4 <__gethex+0x38c>
 800a34e:	f04f 0901 	mov.w	r9, #1
 800a352:	e7d1      	b.n	800a2f8 <__gethex+0x2d0>
 800a354:	2501      	movs	r5, #1
 800a356:	e7e2      	b.n	800a31e <__gethex+0x2f6>
 800a358:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a35a:	f1c3 0301 	rsb	r3, r3, #1
 800a35e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a360:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a362:	2b00      	cmp	r3, #0
 800a364:	d0f0      	beq.n	800a348 <__gethex+0x320>
 800a366:	f04f 0c00 	mov.w	ip, #0
 800a36a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a36e:	f104 0314 	add.w	r3, r4, #20
 800a372:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a376:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a37a:	4618      	mov	r0, r3
 800a37c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a380:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a384:	d01b      	beq.n	800a3be <__gethex+0x396>
 800a386:	3201      	adds	r2, #1
 800a388:	6002      	str	r2, [r0, #0]
 800a38a:	2d02      	cmp	r5, #2
 800a38c:	f104 0314 	add.w	r3, r4, #20
 800a390:	d13c      	bne.n	800a40c <__gethex+0x3e4>
 800a392:	f8d8 2000 	ldr.w	r2, [r8]
 800a396:	3a01      	subs	r2, #1
 800a398:	42b2      	cmp	r2, r6
 800a39a:	d109      	bne.n	800a3b0 <__gethex+0x388>
 800a39c:	2201      	movs	r2, #1
 800a39e:	1171      	asrs	r1, r6, #5
 800a3a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a3a4:	f006 061f 	and.w	r6, r6, #31
 800a3a8:	fa02 f606 	lsl.w	r6, r2, r6
 800a3ac:	421e      	tst	r6, r3
 800a3ae:	d13a      	bne.n	800a426 <__gethex+0x3fe>
 800a3b0:	f045 0520 	orr.w	r5, r5, #32
 800a3b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3b6:	601c      	str	r4, [r3, #0]
 800a3b8:	9b02      	ldr	r3, [sp, #8]
 800a3ba:	601f      	str	r7, [r3, #0]
 800a3bc:	e6b0      	b.n	800a120 <__gethex+0xf8>
 800a3be:	4299      	cmp	r1, r3
 800a3c0:	f843 cc04 	str.w	ip, [r3, #-4]
 800a3c4:	d8d9      	bhi.n	800a37a <__gethex+0x352>
 800a3c6:	68a3      	ldr	r3, [r4, #8]
 800a3c8:	459b      	cmp	fp, r3
 800a3ca:	db17      	blt.n	800a3fc <__gethex+0x3d4>
 800a3cc:	6861      	ldr	r1, [r4, #4]
 800a3ce:	9801      	ldr	r0, [sp, #4]
 800a3d0:	3101      	adds	r1, #1
 800a3d2:	f7fe f81b 	bl	800840c <_Balloc>
 800a3d6:	4681      	mov	r9, r0
 800a3d8:	b918      	cbnz	r0, 800a3e2 <__gethex+0x3ba>
 800a3da:	4602      	mov	r2, r0
 800a3dc:	2184      	movs	r1, #132	@ 0x84
 800a3de:	4b19      	ldr	r3, [pc, #100]	@ (800a444 <__gethex+0x41c>)
 800a3e0:	e6c5      	b.n	800a16e <__gethex+0x146>
 800a3e2:	6922      	ldr	r2, [r4, #16]
 800a3e4:	f104 010c 	add.w	r1, r4, #12
 800a3e8:	3202      	adds	r2, #2
 800a3ea:	0092      	lsls	r2, r2, #2
 800a3ec:	300c      	adds	r0, #12
 800a3ee:	f7ff fd6d 	bl	8009ecc <memcpy>
 800a3f2:	4621      	mov	r1, r4
 800a3f4:	9801      	ldr	r0, [sp, #4]
 800a3f6:	f7fe f849 	bl	800848c <_Bfree>
 800a3fa:	464c      	mov	r4, r9
 800a3fc:	6923      	ldr	r3, [r4, #16]
 800a3fe:	1c5a      	adds	r2, r3, #1
 800a400:	6122      	str	r2, [r4, #16]
 800a402:	2201      	movs	r2, #1
 800a404:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a408:	615a      	str	r2, [r3, #20]
 800a40a:	e7be      	b.n	800a38a <__gethex+0x362>
 800a40c:	6922      	ldr	r2, [r4, #16]
 800a40e:	455a      	cmp	r2, fp
 800a410:	dd0b      	ble.n	800a42a <__gethex+0x402>
 800a412:	2101      	movs	r1, #1
 800a414:	4620      	mov	r0, r4
 800a416:	f7ff fd9f 	bl	8009f58 <rshift>
 800a41a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a41e:	3701      	adds	r7, #1
 800a420:	42bb      	cmp	r3, r7
 800a422:	f6ff aee0 	blt.w	800a1e6 <__gethex+0x1be>
 800a426:	2501      	movs	r5, #1
 800a428:	e7c2      	b.n	800a3b0 <__gethex+0x388>
 800a42a:	f016 061f 	ands.w	r6, r6, #31
 800a42e:	d0fa      	beq.n	800a426 <__gethex+0x3fe>
 800a430:	4453      	add	r3, sl
 800a432:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a436:	f7fe f8db 	bl	80085f0 <__hi0bits>
 800a43a:	f1c6 0620 	rsb	r6, r6, #32
 800a43e:	42b0      	cmp	r0, r6
 800a440:	dbe7      	blt.n	800a412 <__gethex+0x3ea>
 800a442:	e7f0      	b.n	800a426 <__gethex+0x3fe>
 800a444:	0800adc7 	.word	0x0800adc7

0800a448 <L_shift>:
 800a448:	f1c2 0208 	rsb	r2, r2, #8
 800a44c:	0092      	lsls	r2, r2, #2
 800a44e:	b570      	push	{r4, r5, r6, lr}
 800a450:	f1c2 0620 	rsb	r6, r2, #32
 800a454:	6843      	ldr	r3, [r0, #4]
 800a456:	6804      	ldr	r4, [r0, #0]
 800a458:	fa03 f506 	lsl.w	r5, r3, r6
 800a45c:	432c      	orrs	r4, r5
 800a45e:	40d3      	lsrs	r3, r2
 800a460:	6004      	str	r4, [r0, #0]
 800a462:	f840 3f04 	str.w	r3, [r0, #4]!
 800a466:	4288      	cmp	r0, r1
 800a468:	d3f4      	bcc.n	800a454 <L_shift+0xc>
 800a46a:	bd70      	pop	{r4, r5, r6, pc}

0800a46c <__match>:
 800a46c:	b530      	push	{r4, r5, lr}
 800a46e:	6803      	ldr	r3, [r0, #0]
 800a470:	3301      	adds	r3, #1
 800a472:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a476:	b914      	cbnz	r4, 800a47e <__match+0x12>
 800a478:	6003      	str	r3, [r0, #0]
 800a47a:	2001      	movs	r0, #1
 800a47c:	bd30      	pop	{r4, r5, pc}
 800a47e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a482:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a486:	2d19      	cmp	r5, #25
 800a488:	bf98      	it	ls
 800a48a:	3220      	addls	r2, #32
 800a48c:	42a2      	cmp	r2, r4
 800a48e:	d0f0      	beq.n	800a472 <__match+0x6>
 800a490:	2000      	movs	r0, #0
 800a492:	e7f3      	b.n	800a47c <__match+0x10>

0800a494 <__hexnan>:
 800a494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a498:	2500      	movs	r5, #0
 800a49a:	680b      	ldr	r3, [r1, #0]
 800a49c:	4682      	mov	sl, r0
 800a49e:	115e      	asrs	r6, r3, #5
 800a4a0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a4a4:	f013 031f 	ands.w	r3, r3, #31
 800a4a8:	bf18      	it	ne
 800a4aa:	3604      	addne	r6, #4
 800a4ac:	1f37      	subs	r7, r6, #4
 800a4ae:	4690      	mov	r8, r2
 800a4b0:	46b9      	mov	r9, r7
 800a4b2:	463c      	mov	r4, r7
 800a4b4:	46ab      	mov	fp, r5
 800a4b6:	b087      	sub	sp, #28
 800a4b8:	6801      	ldr	r1, [r0, #0]
 800a4ba:	9301      	str	r3, [sp, #4]
 800a4bc:	f846 5c04 	str.w	r5, [r6, #-4]
 800a4c0:	9502      	str	r5, [sp, #8]
 800a4c2:	784a      	ldrb	r2, [r1, #1]
 800a4c4:	1c4b      	adds	r3, r1, #1
 800a4c6:	9303      	str	r3, [sp, #12]
 800a4c8:	b342      	cbz	r2, 800a51c <__hexnan+0x88>
 800a4ca:	4610      	mov	r0, r2
 800a4cc:	9105      	str	r1, [sp, #20]
 800a4ce:	9204      	str	r2, [sp, #16]
 800a4d0:	f7ff fd95 	bl	8009ffe <__hexdig_fun>
 800a4d4:	2800      	cmp	r0, #0
 800a4d6:	d151      	bne.n	800a57c <__hexnan+0xe8>
 800a4d8:	9a04      	ldr	r2, [sp, #16]
 800a4da:	9905      	ldr	r1, [sp, #20]
 800a4dc:	2a20      	cmp	r2, #32
 800a4de:	d818      	bhi.n	800a512 <__hexnan+0x7e>
 800a4e0:	9b02      	ldr	r3, [sp, #8]
 800a4e2:	459b      	cmp	fp, r3
 800a4e4:	dd13      	ble.n	800a50e <__hexnan+0x7a>
 800a4e6:	454c      	cmp	r4, r9
 800a4e8:	d206      	bcs.n	800a4f8 <__hexnan+0x64>
 800a4ea:	2d07      	cmp	r5, #7
 800a4ec:	dc04      	bgt.n	800a4f8 <__hexnan+0x64>
 800a4ee:	462a      	mov	r2, r5
 800a4f0:	4649      	mov	r1, r9
 800a4f2:	4620      	mov	r0, r4
 800a4f4:	f7ff ffa8 	bl	800a448 <L_shift>
 800a4f8:	4544      	cmp	r4, r8
 800a4fa:	d952      	bls.n	800a5a2 <__hexnan+0x10e>
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	f1a4 0904 	sub.w	r9, r4, #4
 800a502:	f844 3c04 	str.w	r3, [r4, #-4]
 800a506:	461d      	mov	r5, r3
 800a508:	464c      	mov	r4, r9
 800a50a:	f8cd b008 	str.w	fp, [sp, #8]
 800a50e:	9903      	ldr	r1, [sp, #12]
 800a510:	e7d7      	b.n	800a4c2 <__hexnan+0x2e>
 800a512:	2a29      	cmp	r2, #41	@ 0x29
 800a514:	d157      	bne.n	800a5c6 <__hexnan+0x132>
 800a516:	3102      	adds	r1, #2
 800a518:	f8ca 1000 	str.w	r1, [sl]
 800a51c:	f1bb 0f00 	cmp.w	fp, #0
 800a520:	d051      	beq.n	800a5c6 <__hexnan+0x132>
 800a522:	454c      	cmp	r4, r9
 800a524:	d206      	bcs.n	800a534 <__hexnan+0xa0>
 800a526:	2d07      	cmp	r5, #7
 800a528:	dc04      	bgt.n	800a534 <__hexnan+0xa0>
 800a52a:	462a      	mov	r2, r5
 800a52c:	4649      	mov	r1, r9
 800a52e:	4620      	mov	r0, r4
 800a530:	f7ff ff8a 	bl	800a448 <L_shift>
 800a534:	4544      	cmp	r4, r8
 800a536:	d936      	bls.n	800a5a6 <__hexnan+0x112>
 800a538:	4623      	mov	r3, r4
 800a53a:	f1a8 0204 	sub.w	r2, r8, #4
 800a53e:	f853 1b04 	ldr.w	r1, [r3], #4
 800a542:	429f      	cmp	r7, r3
 800a544:	f842 1f04 	str.w	r1, [r2, #4]!
 800a548:	d2f9      	bcs.n	800a53e <__hexnan+0xaa>
 800a54a:	1b3b      	subs	r3, r7, r4
 800a54c:	f023 0303 	bic.w	r3, r3, #3
 800a550:	3304      	adds	r3, #4
 800a552:	3401      	adds	r4, #1
 800a554:	3e03      	subs	r6, #3
 800a556:	42b4      	cmp	r4, r6
 800a558:	bf88      	it	hi
 800a55a:	2304      	movhi	r3, #4
 800a55c:	2200      	movs	r2, #0
 800a55e:	4443      	add	r3, r8
 800a560:	f843 2b04 	str.w	r2, [r3], #4
 800a564:	429f      	cmp	r7, r3
 800a566:	d2fb      	bcs.n	800a560 <__hexnan+0xcc>
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	b91b      	cbnz	r3, 800a574 <__hexnan+0xe0>
 800a56c:	4547      	cmp	r7, r8
 800a56e:	d128      	bne.n	800a5c2 <__hexnan+0x12e>
 800a570:	2301      	movs	r3, #1
 800a572:	603b      	str	r3, [r7, #0]
 800a574:	2005      	movs	r0, #5
 800a576:	b007      	add	sp, #28
 800a578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a57c:	3501      	adds	r5, #1
 800a57e:	2d08      	cmp	r5, #8
 800a580:	f10b 0b01 	add.w	fp, fp, #1
 800a584:	dd06      	ble.n	800a594 <__hexnan+0x100>
 800a586:	4544      	cmp	r4, r8
 800a588:	d9c1      	bls.n	800a50e <__hexnan+0x7a>
 800a58a:	2300      	movs	r3, #0
 800a58c:	2501      	movs	r5, #1
 800a58e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a592:	3c04      	subs	r4, #4
 800a594:	6822      	ldr	r2, [r4, #0]
 800a596:	f000 000f 	and.w	r0, r0, #15
 800a59a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a59e:	6020      	str	r0, [r4, #0]
 800a5a0:	e7b5      	b.n	800a50e <__hexnan+0x7a>
 800a5a2:	2508      	movs	r5, #8
 800a5a4:	e7b3      	b.n	800a50e <__hexnan+0x7a>
 800a5a6:	9b01      	ldr	r3, [sp, #4]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d0dd      	beq.n	800a568 <__hexnan+0xd4>
 800a5ac:	f04f 32ff 	mov.w	r2, #4294967295
 800a5b0:	f1c3 0320 	rsb	r3, r3, #32
 800a5b4:	40da      	lsrs	r2, r3
 800a5b6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a5ba:	4013      	ands	r3, r2
 800a5bc:	f846 3c04 	str.w	r3, [r6, #-4]
 800a5c0:	e7d2      	b.n	800a568 <__hexnan+0xd4>
 800a5c2:	3f04      	subs	r7, #4
 800a5c4:	e7d0      	b.n	800a568 <__hexnan+0xd4>
 800a5c6:	2004      	movs	r0, #4
 800a5c8:	e7d5      	b.n	800a576 <__hexnan+0xe2>

0800a5ca <__ascii_mbtowc>:
 800a5ca:	b082      	sub	sp, #8
 800a5cc:	b901      	cbnz	r1, 800a5d0 <__ascii_mbtowc+0x6>
 800a5ce:	a901      	add	r1, sp, #4
 800a5d0:	b142      	cbz	r2, 800a5e4 <__ascii_mbtowc+0x1a>
 800a5d2:	b14b      	cbz	r3, 800a5e8 <__ascii_mbtowc+0x1e>
 800a5d4:	7813      	ldrb	r3, [r2, #0]
 800a5d6:	600b      	str	r3, [r1, #0]
 800a5d8:	7812      	ldrb	r2, [r2, #0]
 800a5da:	1e10      	subs	r0, r2, #0
 800a5dc:	bf18      	it	ne
 800a5de:	2001      	movne	r0, #1
 800a5e0:	b002      	add	sp, #8
 800a5e2:	4770      	bx	lr
 800a5e4:	4610      	mov	r0, r2
 800a5e6:	e7fb      	b.n	800a5e0 <__ascii_mbtowc+0x16>
 800a5e8:	f06f 0001 	mvn.w	r0, #1
 800a5ec:	e7f8      	b.n	800a5e0 <__ascii_mbtowc+0x16>

0800a5ee <_realloc_r>:
 800a5ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5f2:	4680      	mov	r8, r0
 800a5f4:	4615      	mov	r5, r2
 800a5f6:	460c      	mov	r4, r1
 800a5f8:	b921      	cbnz	r1, 800a604 <_realloc_r+0x16>
 800a5fa:	4611      	mov	r1, r2
 800a5fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a600:	f7fd be78 	b.w	80082f4 <_malloc_r>
 800a604:	b92a      	cbnz	r2, 800a612 <_realloc_r+0x24>
 800a606:	f7fd fe03 	bl	8008210 <_free_r>
 800a60a:	2400      	movs	r4, #0
 800a60c:	4620      	mov	r0, r4
 800a60e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a612:	f000 f840 	bl	800a696 <_malloc_usable_size_r>
 800a616:	4285      	cmp	r5, r0
 800a618:	4606      	mov	r6, r0
 800a61a:	d802      	bhi.n	800a622 <_realloc_r+0x34>
 800a61c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a620:	d8f4      	bhi.n	800a60c <_realloc_r+0x1e>
 800a622:	4629      	mov	r1, r5
 800a624:	4640      	mov	r0, r8
 800a626:	f7fd fe65 	bl	80082f4 <_malloc_r>
 800a62a:	4607      	mov	r7, r0
 800a62c:	2800      	cmp	r0, #0
 800a62e:	d0ec      	beq.n	800a60a <_realloc_r+0x1c>
 800a630:	42b5      	cmp	r5, r6
 800a632:	462a      	mov	r2, r5
 800a634:	4621      	mov	r1, r4
 800a636:	bf28      	it	cs
 800a638:	4632      	movcs	r2, r6
 800a63a:	f7ff fc47 	bl	8009ecc <memcpy>
 800a63e:	4621      	mov	r1, r4
 800a640:	4640      	mov	r0, r8
 800a642:	f7fd fde5 	bl	8008210 <_free_r>
 800a646:	463c      	mov	r4, r7
 800a648:	e7e0      	b.n	800a60c <_realloc_r+0x1e>

0800a64a <__ascii_wctomb>:
 800a64a:	4603      	mov	r3, r0
 800a64c:	4608      	mov	r0, r1
 800a64e:	b141      	cbz	r1, 800a662 <__ascii_wctomb+0x18>
 800a650:	2aff      	cmp	r2, #255	@ 0xff
 800a652:	d904      	bls.n	800a65e <__ascii_wctomb+0x14>
 800a654:	228a      	movs	r2, #138	@ 0x8a
 800a656:	f04f 30ff 	mov.w	r0, #4294967295
 800a65a:	601a      	str	r2, [r3, #0]
 800a65c:	4770      	bx	lr
 800a65e:	2001      	movs	r0, #1
 800a660:	700a      	strb	r2, [r1, #0]
 800a662:	4770      	bx	lr

0800a664 <fiprintf>:
 800a664:	b40e      	push	{r1, r2, r3}
 800a666:	b503      	push	{r0, r1, lr}
 800a668:	4601      	mov	r1, r0
 800a66a:	ab03      	add	r3, sp, #12
 800a66c:	4805      	ldr	r0, [pc, #20]	@ (800a684 <fiprintf+0x20>)
 800a66e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a672:	6800      	ldr	r0, [r0, #0]
 800a674:	9301      	str	r3, [sp, #4]
 800a676:	f000 f83d 	bl	800a6f4 <_vfiprintf_r>
 800a67a:	b002      	add	sp, #8
 800a67c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a680:	b003      	add	sp, #12
 800a682:	4770      	bx	lr
 800a684:	20000018 	.word	0x20000018

0800a688 <abort>:
 800a688:	2006      	movs	r0, #6
 800a68a:	b508      	push	{r3, lr}
 800a68c:	f000 fa06 	bl	800aa9c <raise>
 800a690:	2001      	movs	r0, #1
 800a692:	f7f7 feea 	bl	800246a <_exit>

0800a696 <_malloc_usable_size_r>:
 800a696:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a69a:	1f18      	subs	r0, r3, #4
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	bfbc      	itt	lt
 800a6a0:	580b      	ldrlt	r3, [r1, r0]
 800a6a2:	18c0      	addlt	r0, r0, r3
 800a6a4:	4770      	bx	lr

0800a6a6 <__sfputc_r>:
 800a6a6:	6893      	ldr	r3, [r2, #8]
 800a6a8:	b410      	push	{r4}
 800a6aa:	3b01      	subs	r3, #1
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	6093      	str	r3, [r2, #8]
 800a6b0:	da07      	bge.n	800a6c2 <__sfputc_r+0x1c>
 800a6b2:	6994      	ldr	r4, [r2, #24]
 800a6b4:	42a3      	cmp	r3, r4
 800a6b6:	db01      	blt.n	800a6bc <__sfputc_r+0x16>
 800a6b8:	290a      	cmp	r1, #10
 800a6ba:	d102      	bne.n	800a6c2 <__sfputc_r+0x1c>
 800a6bc:	bc10      	pop	{r4}
 800a6be:	f000 b931 	b.w	800a924 <__swbuf_r>
 800a6c2:	6813      	ldr	r3, [r2, #0]
 800a6c4:	1c58      	adds	r0, r3, #1
 800a6c6:	6010      	str	r0, [r2, #0]
 800a6c8:	7019      	strb	r1, [r3, #0]
 800a6ca:	4608      	mov	r0, r1
 800a6cc:	bc10      	pop	{r4}
 800a6ce:	4770      	bx	lr

0800a6d0 <__sfputs_r>:
 800a6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6d2:	4606      	mov	r6, r0
 800a6d4:	460f      	mov	r7, r1
 800a6d6:	4614      	mov	r4, r2
 800a6d8:	18d5      	adds	r5, r2, r3
 800a6da:	42ac      	cmp	r4, r5
 800a6dc:	d101      	bne.n	800a6e2 <__sfputs_r+0x12>
 800a6de:	2000      	movs	r0, #0
 800a6e0:	e007      	b.n	800a6f2 <__sfputs_r+0x22>
 800a6e2:	463a      	mov	r2, r7
 800a6e4:	4630      	mov	r0, r6
 800a6e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6ea:	f7ff ffdc 	bl	800a6a6 <__sfputc_r>
 800a6ee:	1c43      	adds	r3, r0, #1
 800a6f0:	d1f3      	bne.n	800a6da <__sfputs_r+0xa>
 800a6f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a6f4 <_vfiprintf_r>:
 800a6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6f8:	460d      	mov	r5, r1
 800a6fa:	4614      	mov	r4, r2
 800a6fc:	4698      	mov	r8, r3
 800a6fe:	4606      	mov	r6, r0
 800a700:	b09d      	sub	sp, #116	@ 0x74
 800a702:	b118      	cbz	r0, 800a70c <_vfiprintf_r+0x18>
 800a704:	6a03      	ldr	r3, [r0, #32]
 800a706:	b90b      	cbnz	r3, 800a70c <_vfiprintf_r+0x18>
 800a708:	f7fc fe06 	bl	8007318 <__sinit>
 800a70c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a70e:	07d9      	lsls	r1, r3, #31
 800a710:	d405      	bmi.n	800a71e <_vfiprintf_r+0x2a>
 800a712:	89ab      	ldrh	r3, [r5, #12]
 800a714:	059a      	lsls	r2, r3, #22
 800a716:	d402      	bmi.n	800a71e <_vfiprintf_r+0x2a>
 800a718:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a71a:	f7fc ff14 	bl	8007546 <__retarget_lock_acquire_recursive>
 800a71e:	89ab      	ldrh	r3, [r5, #12]
 800a720:	071b      	lsls	r3, r3, #28
 800a722:	d501      	bpl.n	800a728 <_vfiprintf_r+0x34>
 800a724:	692b      	ldr	r3, [r5, #16]
 800a726:	b99b      	cbnz	r3, 800a750 <_vfiprintf_r+0x5c>
 800a728:	4629      	mov	r1, r5
 800a72a:	4630      	mov	r0, r6
 800a72c:	f000 f938 	bl	800a9a0 <__swsetup_r>
 800a730:	b170      	cbz	r0, 800a750 <_vfiprintf_r+0x5c>
 800a732:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a734:	07dc      	lsls	r4, r3, #31
 800a736:	d504      	bpl.n	800a742 <_vfiprintf_r+0x4e>
 800a738:	f04f 30ff 	mov.w	r0, #4294967295
 800a73c:	b01d      	add	sp, #116	@ 0x74
 800a73e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a742:	89ab      	ldrh	r3, [r5, #12]
 800a744:	0598      	lsls	r0, r3, #22
 800a746:	d4f7      	bmi.n	800a738 <_vfiprintf_r+0x44>
 800a748:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a74a:	f7fc fefd 	bl	8007548 <__retarget_lock_release_recursive>
 800a74e:	e7f3      	b.n	800a738 <_vfiprintf_r+0x44>
 800a750:	2300      	movs	r3, #0
 800a752:	9309      	str	r3, [sp, #36]	@ 0x24
 800a754:	2320      	movs	r3, #32
 800a756:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a75a:	2330      	movs	r3, #48	@ 0x30
 800a75c:	f04f 0901 	mov.w	r9, #1
 800a760:	f8cd 800c 	str.w	r8, [sp, #12]
 800a764:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a910 <_vfiprintf_r+0x21c>
 800a768:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a76c:	4623      	mov	r3, r4
 800a76e:	469a      	mov	sl, r3
 800a770:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a774:	b10a      	cbz	r2, 800a77a <_vfiprintf_r+0x86>
 800a776:	2a25      	cmp	r2, #37	@ 0x25
 800a778:	d1f9      	bne.n	800a76e <_vfiprintf_r+0x7a>
 800a77a:	ebba 0b04 	subs.w	fp, sl, r4
 800a77e:	d00b      	beq.n	800a798 <_vfiprintf_r+0xa4>
 800a780:	465b      	mov	r3, fp
 800a782:	4622      	mov	r2, r4
 800a784:	4629      	mov	r1, r5
 800a786:	4630      	mov	r0, r6
 800a788:	f7ff ffa2 	bl	800a6d0 <__sfputs_r>
 800a78c:	3001      	adds	r0, #1
 800a78e:	f000 80a7 	beq.w	800a8e0 <_vfiprintf_r+0x1ec>
 800a792:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a794:	445a      	add	r2, fp
 800a796:	9209      	str	r2, [sp, #36]	@ 0x24
 800a798:	f89a 3000 	ldrb.w	r3, [sl]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	f000 809f 	beq.w	800a8e0 <_vfiprintf_r+0x1ec>
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a7a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7ac:	f10a 0a01 	add.w	sl, sl, #1
 800a7b0:	9304      	str	r3, [sp, #16]
 800a7b2:	9307      	str	r3, [sp, #28]
 800a7b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a7b8:	931a      	str	r3, [sp, #104]	@ 0x68
 800a7ba:	4654      	mov	r4, sl
 800a7bc:	2205      	movs	r2, #5
 800a7be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7c2:	4853      	ldr	r0, [pc, #332]	@ (800a910 <_vfiprintf_r+0x21c>)
 800a7c4:	f7fc fec1 	bl	800754a <memchr>
 800a7c8:	9a04      	ldr	r2, [sp, #16]
 800a7ca:	b9d8      	cbnz	r0, 800a804 <_vfiprintf_r+0x110>
 800a7cc:	06d1      	lsls	r1, r2, #27
 800a7ce:	bf44      	itt	mi
 800a7d0:	2320      	movmi	r3, #32
 800a7d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a7d6:	0713      	lsls	r3, r2, #28
 800a7d8:	bf44      	itt	mi
 800a7da:	232b      	movmi	r3, #43	@ 0x2b
 800a7dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a7e0:	f89a 3000 	ldrb.w	r3, [sl]
 800a7e4:	2b2a      	cmp	r3, #42	@ 0x2a
 800a7e6:	d015      	beq.n	800a814 <_vfiprintf_r+0x120>
 800a7e8:	4654      	mov	r4, sl
 800a7ea:	2000      	movs	r0, #0
 800a7ec:	f04f 0c0a 	mov.w	ip, #10
 800a7f0:	9a07      	ldr	r2, [sp, #28]
 800a7f2:	4621      	mov	r1, r4
 800a7f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7f8:	3b30      	subs	r3, #48	@ 0x30
 800a7fa:	2b09      	cmp	r3, #9
 800a7fc:	d94b      	bls.n	800a896 <_vfiprintf_r+0x1a2>
 800a7fe:	b1b0      	cbz	r0, 800a82e <_vfiprintf_r+0x13a>
 800a800:	9207      	str	r2, [sp, #28]
 800a802:	e014      	b.n	800a82e <_vfiprintf_r+0x13a>
 800a804:	eba0 0308 	sub.w	r3, r0, r8
 800a808:	fa09 f303 	lsl.w	r3, r9, r3
 800a80c:	4313      	orrs	r3, r2
 800a80e:	46a2      	mov	sl, r4
 800a810:	9304      	str	r3, [sp, #16]
 800a812:	e7d2      	b.n	800a7ba <_vfiprintf_r+0xc6>
 800a814:	9b03      	ldr	r3, [sp, #12]
 800a816:	1d19      	adds	r1, r3, #4
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	9103      	str	r1, [sp, #12]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	bfbb      	ittet	lt
 800a820:	425b      	neglt	r3, r3
 800a822:	f042 0202 	orrlt.w	r2, r2, #2
 800a826:	9307      	strge	r3, [sp, #28]
 800a828:	9307      	strlt	r3, [sp, #28]
 800a82a:	bfb8      	it	lt
 800a82c:	9204      	strlt	r2, [sp, #16]
 800a82e:	7823      	ldrb	r3, [r4, #0]
 800a830:	2b2e      	cmp	r3, #46	@ 0x2e
 800a832:	d10a      	bne.n	800a84a <_vfiprintf_r+0x156>
 800a834:	7863      	ldrb	r3, [r4, #1]
 800a836:	2b2a      	cmp	r3, #42	@ 0x2a
 800a838:	d132      	bne.n	800a8a0 <_vfiprintf_r+0x1ac>
 800a83a:	9b03      	ldr	r3, [sp, #12]
 800a83c:	3402      	adds	r4, #2
 800a83e:	1d1a      	adds	r2, r3, #4
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	9203      	str	r2, [sp, #12]
 800a844:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a848:	9305      	str	r3, [sp, #20]
 800a84a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a914 <_vfiprintf_r+0x220>
 800a84e:	2203      	movs	r2, #3
 800a850:	4650      	mov	r0, sl
 800a852:	7821      	ldrb	r1, [r4, #0]
 800a854:	f7fc fe79 	bl	800754a <memchr>
 800a858:	b138      	cbz	r0, 800a86a <_vfiprintf_r+0x176>
 800a85a:	2240      	movs	r2, #64	@ 0x40
 800a85c:	9b04      	ldr	r3, [sp, #16]
 800a85e:	eba0 000a 	sub.w	r0, r0, sl
 800a862:	4082      	lsls	r2, r0
 800a864:	4313      	orrs	r3, r2
 800a866:	3401      	adds	r4, #1
 800a868:	9304      	str	r3, [sp, #16]
 800a86a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a86e:	2206      	movs	r2, #6
 800a870:	4829      	ldr	r0, [pc, #164]	@ (800a918 <_vfiprintf_r+0x224>)
 800a872:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a876:	f7fc fe68 	bl	800754a <memchr>
 800a87a:	2800      	cmp	r0, #0
 800a87c:	d03f      	beq.n	800a8fe <_vfiprintf_r+0x20a>
 800a87e:	4b27      	ldr	r3, [pc, #156]	@ (800a91c <_vfiprintf_r+0x228>)
 800a880:	bb1b      	cbnz	r3, 800a8ca <_vfiprintf_r+0x1d6>
 800a882:	9b03      	ldr	r3, [sp, #12]
 800a884:	3307      	adds	r3, #7
 800a886:	f023 0307 	bic.w	r3, r3, #7
 800a88a:	3308      	adds	r3, #8
 800a88c:	9303      	str	r3, [sp, #12]
 800a88e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a890:	443b      	add	r3, r7
 800a892:	9309      	str	r3, [sp, #36]	@ 0x24
 800a894:	e76a      	b.n	800a76c <_vfiprintf_r+0x78>
 800a896:	460c      	mov	r4, r1
 800a898:	2001      	movs	r0, #1
 800a89a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a89e:	e7a8      	b.n	800a7f2 <_vfiprintf_r+0xfe>
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	f04f 0c0a 	mov.w	ip, #10
 800a8a6:	4619      	mov	r1, r3
 800a8a8:	3401      	adds	r4, #1
 800a8aa:	9305      	str	r3, [sp, #20]
 800a8ac:	4620      	mov	r0, r4
 800a8ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8b2:	3a30      	subs	r2, #48	@ 0x30
 800a8b4:	2a09      	cmp	r2, #9
 800a8b6:	d903      	bls.n	800a8c0 <_vfiprintf_r+0x1cc>
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d0c6      	beq.n	800a84a <_vfiprintf_r+0x156>
 800a8bc:	9105      	str	r1, [sp, #20]
 800a8be:	e7c4      	b.n	800a84a <_vfiprintf_r+0x156>
 800a8c0:	4604      	mov	r4, r0
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8c8:	e7f0      	b.n	800a8ac <_vfiprintf_r+0x1b8>
 800a8ca:	ab03      	add	r3, sp, #12
 800a8cc:	9300      	str	r3, [sp, #0]
 800a8ce:	462a      	mov	r2, r5
 800a8d0:	4630      	mov	r0, r6
 800a8d2:	4b13      	ldr	r3, [pc, #76]	@ (800a920 <_vfiprintf_r+0x22c>)
 800a8d4:	a904      	add	r1, sp, #16
 800a8d6:	f7fb fec5 	bl	8006664 <_printf_float>
 800a8da:	4607      	mov	r7, r0
 800a8dc:	1c78      	adds	r0, r7, #1
 800a8de:	d1d6      	bne.n	800a88e <_vfiprintf_r+0x19a>
 800a8e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a8e2:	07d9      	lsls	r1, r3, #31
 800a8e4:	d405      	bmi.n	800a8f2 <_vfiprintf_r+0x1fe>
 800a8e6:	89ab      	ldrh	r3, [r5, #12]
 800a8e8:	059a      	lsls	r2, r3, #22
 800a8ea:	d402      	bmi.n	800a8f2 <_vfiprintf_r+0x1fe>
 800a8ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a8ee:	f7fc fe2b 	bl	8007548 <__retarget_lock_release_recursive>
 800a8f2:	89ab      	ldrh	r3, [r5, #12]
 800a8f4:	065b      	lsls	r3, r3, #25
 800a8f6:	f53f af1f 	bmi.w	800a738 <_vfiprintf_r+0x44>
 800a8fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a8fc:	e71e      	b.n	800a73c <_vfiprintf_r+0x48>
 800a8fe:	ab03      	add	r3, sp, #12
 800a900:	9300      	str	r3, [sp, #0]
 800a902:	462a      	mov	r2, r5
 800a904:	4630      	mov	r0, r6
 800a906:	4b06      	ldr	r3, [pc, #24]	@ (800a920 <_vfiprintf_r+0x22c>)
 800a908:	a904      	add	r1, sp, #16
 800a90a:	f7fc f949 	bl	8006ba0 <_printf_i>
 800a90e:	e7e4      	b.n	800a8da <_vfiprintf_r+0x1e6>
 800a910:	0800b089 	.word	0x0800b089
 800a914:	0800b08f 	.word	0x0800b08f
 800a918:	0800b093 	.word	0x0800b093
 800a91c:	08006665 	.word	0x08006665
 800a920:	0800a6d1 	.word	0x0800a6d1

0800a924 <__swbuf_r>:
 800a924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a926:	460e      	mov	r6, r1
 800a928:	4614      	mov	r4, r2
 800a92a:	4605      	mov	r5, r0
 800a92c:	b118      	cbz	r0, 800a936 <__swbuf_r+0x12>
 800a92e:	6a03      	ldr	r3, [r0, #32]
 800a930:	b90b      	cbnz	r3, 800a936 <__swbuf_r+0x12>
 800a932:	f7fc fcf1 	bl	8007318 <__sinit>
 800a936:	69a3      	ldr	r3, [r4, #24]
 800a938:	60a3      	str	r3, [r4, #8]
 800a93a:	89a3      	ldrh	r3, [r4, #12]
 800a93c:	071a      	lsls	r2, r3, #28
 800a93e:	d501      	bpl.n	800a944 <__swbuf_r+0x20>
 800a940:	6923      	ldr	r3, [r4, #16]
 800a942:	b943      	cbnz	r3, 800a956 <__swbuf_r+0x32>
 800a944:	4621      	mov	r1, r4
 800a946:	4628      	mov	r0, r5
 800a948:	f000 f82a 	bl	800a9a0 <__swsetup_r>
 800a94c:	b118      	cbz	r0, 800a956 <__swbuf_r+0x32>
 800a94e:	f04f 37ff 	mov.w	r7, #4294967295
 800a952:	4638      	mov	r0, r7
 800a954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a956:	6823      	ldr	r3, [r4, #0]
 800a958:	6922      	ldr	r2, [r4, #16]
 800a95a:	b2f6      	uxtb	r6, r6
 800a95c:	1a98      	subs	r0, r3, r2
 800a95e:	6963      	ldr	r3, [r4, #20]
 800a960:	4637      	mov	r7, r6
 800a962:	4283      	cmp	r3, r0
 800a964:	dc05      	bgt.n	800a972 <__swbuf_r+0x4e>
 800a966:	4621      	mov	r1, r4
 800a968:	4628      	mov	r0, r5
 800a96a:	f7ff fa4b 	bl	8009e04 <_fflush_r>
 800a96e:	2800      	cmp	r0, #0
 800a970:	d1ed      	bne.n	800a94e <__swbuf_r+0x2a>
 800a972:	68a3      	ldr	r3, [r4, #8]
 800a974:	3b01      	subs	r3, #1
 800a976:	60a3      	str	r3, [r4, #8]
 800a978:	6823      	ldr	r3, [r4, #0]
 800a97a:	1c5a      	adds	r2, r3, #1
 800a97c:	6022      	str	r2, [r4, #0]
 800a97e:	701e      	strb	r6, [r3, #0]
 800a980:	6962      	ldr	r2, [r4, #20]
 800a982:	1c43      	adds	r3, r0, #1
 800a984:	429a      	cmp	r2, r3
 800a986:	d004      	beq.n	800a992 <__swbuf_r+0x6e>
 800a988:	89a3      	ldrh	r3, [r4, #12]
 800a98a:	07db      	lsls	r3, r3, #31
 800a98c:	d5e1      	bpl.n	800a952 <__swbuf_r+0x2e>
 800a98e:	2e0a      	cmp	r6, #10
 800a990:	d1df      	bne.n	800a952 <__swbuf_r+0x2e>
 800a992:	4621      	mov	r1, r4
 800a994:	4628      	mov	r0, r5
 800a996:	f7ff fa35 	bl	8009e04 <_fflush_r>
 800a99a:	2800      	cmp	r0, #0
 800a99c:	d0d9      	beq.n	800a952 <__swbuf_r+0x2e>
 800a99e:	e7d6      	b.n	800a94e <__swbuf_r+0x2a>

0800a9a0 <__swsetup_r>:
 800a9a0:	b538      	push	{r3, r4, r5, lr}
 800a9a2:	4b29      	ldr	r3, [pc, #164]	@ (800aa48 <__swsetup_r+0xa8>)
 800a9a4:	4605      	mov	r5, r0
 800a9a6:	6818      	ldr	r0, [r3, #0]
 800a9a8:	460c      	mov	r4, r1
 800a9aa:	b118      	cbz	r0, 800a9b4 <__swsetup_r+0x14>
 800a9ac:	6a03      	ldr	r3, [r0, #32]
 800a9ae:	b90b      	cbnz	r3, 800a9b4 <__swsetup_r+0x14>
 800a9b0:	f7fc fcb2 	bl	8007318 <__sinit>
 800a9b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9b8:	0719      	lsls	r1, r3, #28
 800a9ba:	d422      	bmi.n	800aa02 <__swsetup_r+0x62>
 800a9bc:	06da      	lsls	r2, r3, #27
 800a9be:	d407      	bmi.n	800a9d0 <__swsetup_r+0x30>
 800a9c0:	2209      	movs	r2, #9
 800a9c2:	602a      	str	r2, [r5, #0]
 800a9c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a9cc:	81a3      	strh	r3, [r4, #12]
 800a9ce:	e033      	b.n	800aa38 <__swsetup_r+0x98>
 800a9d0:	0758      	lsls	r0, r3, #29
 800a9d2:	d512      	bpl.n	800a9fa <__swsetup_r+0x5a>
 800a9d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a9d6:	b141      	cbz	r1, 800a9ea <__swsetup_r+0x4a>
 800a9d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a9dc:	4299      	cmp	r1, r3
 800a9de:	d002      	beq.n	800a9e6 <__swsetup_r+0x46>
 800a9e0:	4628      	mov	r0, r5
 800a9e2:	f7fd fc15 	bl	8008210 <_free_r>
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	6363      	str	r3, [r4, #52]	@ 0x34
 800a9ea:	89a3      	ldrh	r3, [r4, #12]
 800a9ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a9f0:	81a3      	strh	r3, [r4, #12]
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	6063      	str	r3, [r4, #4]
 800a9f6:	6923      	ldr	r3, [r4, #16]
 800a9f8:	6023      	str	r3, [r4, #0]
 800a9fa:	89a3      	ldrh	r3, [r4, #12]
 800a9fc:	f043 0308 	orr.w	r3, r3, #8
 800aa00:	81a3      	strh	r3, [r4, #12]
 800aa02:	6923      	ldr	r3, [r4, #16]
 800aa04:	b94b      	cbnz	r3, 800aa1a <__swsetup_r+0x7a>
 800aa06:	89a3      	ldrh	r3, [r4, #12]
 800aa08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800aa0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa10:	d003      	beq.n	800aa1a <__swsetup_r+0x7a>
 800aa12:	4621      	mov	r1, r4
 800aa14:	4628      	mov	r0, r5
 800aa16:	f000 f882 	bl	800ab1e <__smakebuf_r>
 800aa1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa1e:	f013 0201 	ands.w	r2, r3, #1
 800aa22:	d00a      	beq.n	800aa3a <__swsetup_r+0x9a>
 800aa24:	2200      	movs	r2, #0
 800aa26:	60a2      	str	r2, [r4, #8]
 800aa28:	6962      	ldr	r2, [r4, #20]
 800aa2a:	4252      	negs	r2, r2
 800aa2c:	61a2      	str	r2, [r4, #24]
 800aa2e:	6922      	ldr	r2, [r4, #16]
 800aa30:	b942      	cbnz	r2, 800aa44 <__swsetup_r+0xa4>
 800aa32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800aa36:	d1c5      	bne.n	800a9c4 <__swsetup_r+0x24>
 800aa38:	bd38      	pop	{r3, r4, r5, pc}
 800aa3a:	0799      	lsls	r1, r3, #30
 800aa3c:	bf58      	it	pl
 800aa3e:	6962      	ldrpl	r2, [r4, #20]
 800aa40:	60a2      	str	r2, [r4, #8]
 800aa42:	e7f4      	b.n	800aa2e <__swsetup_r+0x8e>
 800aa44:	2000      	movs	r0, #0
 800aa46:	e7f7      	b.n	800aa38 <__swsetup_r+0x98>
 800aa48:	20000018 	.word	0x20000018

0800aa4c <_raise_r>:
 800aa4c:	291f      	cmp	r1, #31
 800aa4e:	b538      	push	{r3, r4, r5, lr}
 800aa50:	4605      	mov	r5, r0
 800aa52:	460c      	mov	r4, r1
 800aa54:	d904      	bls.n	800aa60 <_raise_r+0x14>
 800aa56:	2316      	movs	r3, #22
 800aa58:	6003      	str	r3, [r0, #0]
 800aa5a:	f04f 30ff 	mov.w	r0, #4294967295
 800aa5e:	bd38      	pop	{r3, r4, r5, pc}
 800aa60:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800aa62:	b112      	cbz	r2, 800aa6a <_raise_r+0x1e>
 800aa64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aa68:	b94b      	cbnz	r3, 800aa7e <_raise_r+0x32>
 800aa6a:	4628      	mov	r0, r5
 800aa6c:	f000 f830 	bl	800aad0 <_getpid_r>
 800aa70:	4622      	mov	r2, r4
 800aa72:	4601      	mov	r1, r0
 800aa74:	4628      	mov	r0, r5
 800aa76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa7a:	f000 b817 	b.w	800aaac <_kill_r>
 800aa7e:	2b01      	cmp	r3, #1
 800aa80:	d00a      	beq.n	800aa98 <_raise_r+0x4c>
 800aa82:	1c59      	adds	r1, r3, #1
 800aa84:	d103      	bne.n	800aa8e <_raise_r+0x42>
 800aa86:	2316      	movs	r3, #22
 800aa88:	6003      	str	r3, [r0, #0]
 800aa8a:	2001      	movs	r0, #1
 800aa8c:	e7e7      	b.n	800aa5e <_raise_r+0x12>
 800aa8e:	2100      	movs	r1, #0
 800aa90:	4620      	mov	r0, r4
 800aa92:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800aa96:	4798      	blx	r3
 800aa98:	2000      	movs	r0, #0
 800aa9a:	e7e0      	b.n	800aa5e <_raise_r+0x12>

0800aa9c <raise>:
 800aa9c:	4b02      	ldr	r3, [pc, #8]	@ (800aaa8 <raise+0xc>)
 800aa9e:	4601      	mov	r1, r0
 800aaa0:	6818      	ldr	r0, [r3, #0]
 800aaa2:	f7ff bfd3 	b.w	800aa4c <_raise_r>
 800aaa6:	bf00      	nop
 800aaa8:	20000018 	.word	0x20000018

0800aaac <_kill_r>:
 800aaac:	b538      	push	{r3, r4, r5, lr}
 800aaae:	2300      	movs	r3, #0
 800aab0:	4d06      	ldr	r5, [pc, #24]	@ (800aacc <_kill_r+0x20>)
 800aab2:	4604      	mov	r4, r0
 800aab4:	4608      	mov	r0, r1
 800aab6:	4611      	mov	r1, r2
 800aab8:	602b      	str	r3, [r5, #0]
 800aaba:	f7f7 fcc6 	bl	800244a <_kill>
 800aabe:	1c43      	adds	r3, r0, #1
 800aac0:	d102      	bne.n	800aac8 <_kill_r+0x1c>
 800aac2:	682b      	ldr	r3, [r5, #0]
 800aac4:	b103      	cbz	r3, 800aac8 <_kill_r+0x1c>
 800aac6:	6023      	str	r3, [r4, #0]
 800aac8:	bd38      	pop	{r3, r4, r5, pc}
 800aaca:	bf00      	nop
 800aacc:	200005a8 	.word	0x200005a8

0800aad0 <_getpid_r>:
 800aad0:	f7f7 bcb4 	b.w	800243c <_getpid>

0800aad4 <__swhatbuf_r>:
 800aad4:	b570      	push	{r4, r5, r6, lr}
 800aad6:	460c      	mov	r4, r1
 800aad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aadc:	4615      	mov	r5, r2
 800aade:	2900      	cmp	r1, #0
 800aae0:	461e      	mov	r6, r3
 800aae2:	b096      	sub	sp, #88	@ 0x58
 800aae4:	da0c      	bge.n	800ab00 <__swhatbuf_r+0x2c>
 800aae6:	89a3      	ldrh	r3, [r4, #12]
 800aae8:	2100      	movs	r1, #0
 800aaea:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800aaee:	bf14      	ite	ne
 800aaf0:	2340      	movne	r3, #64	@ 0x40
 800aaf2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800aaf6:	2000      	movs	r0, #0
 800aaf8:	6031      	str	r1, [r6, #0]
 800aafa:	602b      	str	r3, [r5, #0]
 800aafc:	b016      	add	sp, #88	@ 0x58
 800aafe:	bd70      	pop	{r4, r5, r6, pc}
 800ab00:	466a      	mov	r2, sp
 800ab02:	f000 f849 	bl	800ab98 <_fstat_r>
 800ab06:	2800      	cmp	r0, #0
 800ab08:	dbed      	blt.n	800aae6 <__swhatbuf_r+0x12>
 800ab0a:	9901      	ldr	r1, [sp, #4]
 800ab0c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ab10:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ab14:	4259      	negs	r1, r3
 800ab16:	4159      	adcs	r1, r3
 800ab18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ab1c:	e7eb      	b.n	800aaf6 <__swhatbuf_r+0x22>

0800ab1e <__smakebuf_r>:
 800ab1e:	898b      	ldrh	r3, [r1, #12]
 800ab20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab22:	079d      	lsls	r5, r3, #30
 800ab24:	4606      	mov	r6, r0
 800ab26:	460c      	mov	r4, r1
 800ab28:	d507      	bpl.n	800ab3a <__smakebuf_r+0x1c>
 800ab2a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ab2e:	6023      	str	r3, [r4, #0]
 800ab30:	6123      	str	r3, [r4, #16]
 800ab32:	2301      	movs	r3, #1
 800ab34:	6163      	str	r3, [r4, #20]
 800ab36:	b003      	add	sp, #12
 800ab38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab3a:	466a      	mov	r2, sp
 800ab3c:	ab01      	add	r3, sp, #4
 800ab3e:	f7ff ffc9 	bl	800aad4 <__swhatbuf_r>
 800ab42:	9f00      	ldr	r7, [sp, #0]
 800ab44:	4605      	mov	r5, r0
 800ab46:	4639      	mov	r1, r7
 800ab48:	4630      	mov	r0, r6
 800ab4a:	f7fd fbd3 	bl	80082f4 <_malloc_r>
 800ab4e:	b948      	cbnz	r0, 800ab64 <__smakebuf_r+0x46>
 800ab50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab54:	059a      	lsls	r2, r3, #22
 800ab56:	d4ee      	bmi.n	800ab36 <__smakebuf_r+0x18>
 800ab58:	f023 0303 	bic.w	r3, r3, #3
 800ab5c:	f043 0302 	orr.w	r3, r3, #2
 800ab60:	81a3      	strh	r3, [r4, #12]
 800ab62:	e7e2      	b.n	800ab2a <__smakebuf_r+0xc>
 800ab64:	89a3      	ldrh	r3, [r4, #12]
 800ab66:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ab6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab6e:	81a3      	strh	r3, [r4, #12]
 800ab70:	9b01      	ldr	r3, [sp, #4]
 800ab72:	6020      	str	r0, [r4, #0]
 800ab74:	b15b      	cbz	r3, 800ab8e <__smakebuf_r+0x70>
 800ab76:	4630      	mov	r0, r6
 800ab78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab7c:	f000 f81e 	bl	800abbc <_isatty_r>
 800ab80:	b128      	cbz	r0, 800ab8e <__smakebuf_r+0x70>
 800ab82:	89a3      	ldrh	r3, [r4, #12]
 800ab84:	f023 0303 	bic.w	r3, r3, #3
 800ab88:	f043 0301 	orr.w	r3, r3, #1
 800ab8c:	81a3      	strh	r3, [r4, #12]
 800ab8e:	89a3      	ldrh	r3, [r4, #12]
 800ab90:	431d      	orrs	r5, r3
 800ab92:	81a5      	strh	r5, [r4, #12]
 800ab94:	e7cf      	b.n	800ab36 <__smakebuf_r+0x18>
	...

0800ab98 <_fstat_r>:
 800ab98:	b538      	push	{r3, r4, r5, lr}
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	4d06      	ldr	r5, [pc, #24]	@ (800abb8 <_fstat_r+0x20>)
 800ab9e:	4604      	mov	r4, r0
 800aba0:	4608      	mov	r0, r1
 800aba2:	4611      	mov	r1, r2
 800aba4:	602b      	str	r3, [r5, #0]
 800aba6:	f7f7 fcaf 	bl	8002508 <_fstat>
 800abaa:	1c43      	adds	r3, r0, #1
 800abac:	d102      	bne.n	800abb4 <_fstat_r+0x1c>
 800abae:	682b      	ldr	r3, [r5, #0]
 800abb0:	b103      	cbz	r3, 800abb4 <_fstat_r+0x1c>
 800abb2:	6023      	str	r3, [r4, #0]
 800abb4:	bd38      	pop	{r3, r4, r5, pc}
 800abb6:	bf00      	nop
 800abb8:	200005a8 	.word	0x200005a8

0800abbc <_isatty_r>:
 800abbc:	b538      	push	{r3, r4, r5, lr}
 800abbe:	2300      	movs	r3, #0
 800abc0:	4d05      	ldr	r5, [pc, #20]	@ (800abd8 <_isatty_r+0x1c>)
 800abc2:	4604      	mov	r4, r0
 800abc4:	4608      	mov	r0, r1
 800abc6:	602b      	str	r3, [r5, #0]
 800abc8:	f7f7 fcad 	bl	8002526 <_isatty>
 800abcc:	1c43      	adds	r3, r0, #1
 800abce:	d102      	bne.n	800abd6 <_isatty_r+0x1a>
 800abd0:	682b      	ldr	r3, [r5, #0]
 800abd2:	b103      	cbz	r3, 800abd6 <_isatty_r+0x1a>
 800abd4:	6023      	str	r3, [r4, #0]
 800abd6:	bd38      	pop	{r3, r4, r5, pc}
 800abd8:	200005a8 	.word	0x200005a8

0800abdc <_init>:
 800abdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abde:	bf00      	nop
 800abe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abe2:	bc08      	pop	{r3}
 800abe4:	469e      	mov	lr, r3
 800abe6:	4770      	bx	lr

0800abe8 <_fini>:
 800abe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abea:	bf00      	nop
 800abec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abee:	bc08      	pop	{r3}
 800abf0:	469e      	mov	lr, r3
 800abf2:	4770      	bx	lr
